{
  "swagger": "2.0",
  "info": {
    "title": "andromeda/api/group_configuration_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "GroupService"
    },
    {
      "name": "IntegrationService"
    },
    {
      "name": "TenantService"
    },
    {
      "name": "TenantSettingsService"
    },
    {
      "name": "EnvironmentMappingPolicyService"
    },
    {
      "name": "SensitivityMappingPolicyService"
    },
    {
      "name": "OwnersMappingPolicyService"
    },
    {
      "name": "JitPolicyProfileService"
    },
    {
      "name": "IdpApplicationConfigService"
    },
    {
      "name": "ScimPushGroupService"
    },
    {
      "name": "ImageInfoService"
    },
    {
      "name": "EnvironmentService"
    },
    {
      "name": "AndromedaBehaviorService"
    },
    {
      "name": "WorkdayConfigService"
    },
    {
      "name": "HrisConfigService"
    },
    {
      "name": "SalesforceProviderConfigurationService"
    },
    {
      "name": "RecommendationService"
    },
    {
      "name": "AWSProviderConfigurationService"
    },
    {
      "name": "SwitchTenantService"
    },
    {
      "name": "GoogleWorkspaceProviderConfigurationService"
    },
    {
      "name": "ActiveDirectoryService"
    },
    {
      "name": "AwsLspService"
    },
    {
      "name": "AccountService"
    },
    {
      "name": "AccountIdentityService"
    },
    {
      "name": "AccountUserService"
    },
    {
      "name": "AtlasProviderConfigurationService"
    },
    {
      "name": "JitPolicyRequestService"
    },
    {
      "name": "JitPolicyRequestServiceV2"
    },
    {
      "name": "JitPolicyReviewService"
    },
    {
      "name": "JitPolicyReviewServiceV2"
    },
    {
      "name": "AccessRequestReviewService"
    },
    {
      "name": "AccessRequestAdminOverrideReviewService"
    },
    {
      "name": "AdminJitPolicyReviewService"
    },
    {
      "name": "AdpProviderConfigurationService"
    },
    {
      "name": "RecommendationEngine"
    },
    {
      "name": "UserService"
    },
    {
      "name": "PolicyService"
    },
    {
      "name": "TenantInternalConfigurationService"
    },
    {
      "name": "SystemConfigurationService"
    },
    {
      "name": "AccessReviewsReviewerService"
    },
    {
      "name": "AccessReviewsUAROwnerService"
    },
    {
      "name": "CampaignTemplateService"
    },
    {
      "name": "CampaignInstanceService"
    },
    {
      "name": "ActionCampaignInstanceService"
    },
    {
      "name": "ProviderInternalConfigurationService"
    },
    {
      "name": "EntraProviderConfigurationService"
    },
    {
      "name": "PolicyConfigurationService"
    },
    {
      "name": "FileUploaderService"
    },
    {
      "name": "EventsSinkConfigurationService"
    },
    {
      "name": "CustomAppProviderService"
    },
    {
      "name": "AuthenticationService"
    },
    {
      "name": "ProviderService"
    },
    {
      "name": "AndromedaBrokerService"
    },
    {
      "name": "ProviderTierService"
    },
    {
      "name": "Operations"
    },
    {
      "name": "GCPProviderConfigurationService"
    },
    {
      "name": "AzureProviderConfigurationService"
    },
    {
      "name": "RemediationService"
    },
    {
      "name": "OktaConfigService"
    },
    {
      "name": "PingOneProviderConfigurationService"
    },
    {
      "name": "PolicyEligibilityMappingService"
    },
    {
      "name": "SecuarService"
    },
    {
      "name": "ConduitTaskService"
    },
    {
      "name": "ConduitBrokerService"
    },
    {
      "name": "ProviderUtilityService"
    },
    {
      "name": "FluxBatchJobService"
    },
    {
      "name": "ShadowAppsService"
    },
    {
      "name": "DeltaComputeService"
    },
    {
      "name": "MaxmindGeolocationService"
    },
    {
      "name": "ArielAnalyzerService"
    },
    {
      "name": "SummarizationService"
    },
    {
      "name": "RelayService"
    },
    {
      "name": "SyncService"
    },
    {
      "name": "GraphDatagramService"
    },
    {
      "name": "JobStatusService"
    },
    {
      "name": "GraphHRService"
    },
    {
      "name": "GraphProviderService"
    },
    {
      "name": "IRGServiceIdentityService"
    },
    {
      "name": "LejitService"
    },
    {
      "name": "RiskScoreService"
    },
    {
      "name": "IdentityActivityService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/access-key": {
      "post": {
        "summary": "RequestAccessKey allows authenticated users to request for a short-lived access key.\nThe response includes the generated access key and needs to be\nsaved by the User.",
        "operationId": "AuthenticationService_RequestAccessKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAccessKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiRequestAccessKeyRequest"
            }
          }
        ],
        "tags": [
          "AuthenticationService"
        ]
      }
    },
    "/accessrequestprofiles": {
      "get": {
        "operationId": "JitPolicyProfileService_ListJitPolicyProfiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListJitPolicyProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "JitPolicyProfileService"
        ]
      },
      "post": {
        "operationId": "JitPolicyProfileService_CreateJitPolicyProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configJitPolicyProfile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "jitPolicyProfile",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configJitPolicyProfile"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "JitPolicyProfileService"
        ]
      }
    },
    "/accessrequestprofiles/{id}": {
      "get": {
        "operationId": "JitPolicyProfileService_GetJitPolicyProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configJitPolicyProfile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "JitPolicyProfileService"
        ]
      },
      "delete": {
        "operationId": "JitPolicyProfileService_DeleteJitPolicyProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "JitPolicyProfileService"
        ]
      },
      "put": {
        "operationId": "JitPolicyProfileService_UpdateJitPolicyProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configJitPolicyProfile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "jitPolicyProfile",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configJitPolicyProfile"
            }
          }
        ],
        "tags": [
          "JitPolicyProfileService"
        ]
      }
    },
    "/accessrequests/{id}/review": {
      "post": {
        "operationId": "AccessRequestReviewService_UpdateAccessRequestReview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configJitPolicyReview"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "access request id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "updateJitPolicyReview",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateJitPolicyReviewPayload"
            }
          }
        ],
        "tags": [
          "AccessRequestReviewService"
        ]
      }
    },
    "/accessrequests/{id}/review/override": {
      "post": {
        "operationId": "AccessRequestAdminOverrideReviewService_AdminOverrideAccessRequestReview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configJitPolicyReview"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "access request id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "updateJitPolicyReview",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateJitPolicyReviewPayload"
            }
          }
        ],
        "tags": [
          "AccessRequestAdminOverrideReviewService"
        ]
      }
    },
    "/accessrequests/{jitPolicyRequestId}/admin/reviews": {
      "put": {
        "operationId": "AdminJitPolicyReviewService_AdminUpdateJitPolicyReview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configJitPolicyReview"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "jitPolicyRequestId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "updateJitPolicyReview",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateJitPolicyReviewPayload"
            }
          }
        ],
        "tags": [
          "AdminJitPolicyReviewService"
        ]
      }
    },
    "/accessrequests/{jitPolicyRequestId}/reviews/{id}": {
      "put": {
        "operationId": "JitPolicyReviewServiceV2_UpdateJitPolicyReviewV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configJitPolicyReview"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "jitPolicyRequestId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "updateJitPolicyReview",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateJitPolicyReviewPayload"
            }
          }
        ],
        "tags": [
          "JitPolicyReviewServiceV2"
        ]
      }
    },
    "/accounts": {
      "get": {
        "operationId": "AccountService_ListAccount2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AccountService"
        ]
      }
    },
    "/accounts/{accountId}/accessrequests/{jitPolicyRequestId}/reviews/{id}": {
      "put": {
        "operationId": "JitPolicyReviewService_UpdateJitPolicyReview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configJitPolicyReview"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "jitPolicyRequestId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "updateJitPolicyReview",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateJitPolicyReviewPayload"
            }
          }
        ],
        "tags": [
          "JitPolicyReviewService"
        ]
      }
    },
    "/accounts/{id}": {
      "get": {
        "operationId": "AccountService_GetAccount2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "providerId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AccountService"
        ]
      },
      "put": {
        "operationId": "AccountService_UpdateAccount2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "providerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account.name",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "account.providerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account.providerType",
            "description": " - PROVIDER_TYPE_IDP_APPLICATION: TODO(P0) AS-3963\nAll the providers created from the IDP like okta will have\ncategory as IDP_APPLICATION\n - PROVIDER_TYPE_HRIS: generic hris integration",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PROVIDER_TYPE_UNSPECIFIED",
              "PROVIDER_TYPE_AWS",
              "PROVIDER_TYPE_GCP",
              "PROVIDER_TYPE_AZURE",
              "PROVIDER_TYPE_WORKDAY",
              "PROVIDER_TYPE_OKTA",
              "PROVIDER_TYPE_IDP_APPLICATION",
              "PROVIDER_TYPE_ENTRA",
              "PROVIDER_TYPE_CUSTOM_APPLICATION",
              "PROVIDER_TYPE_GOOGLE_WORKSPACE",
              "PROVIDER_TYPE_ADP",
              "PROVIDER_TYPE_SALESFORCE",
              "PROVIDER_TYPE_HRIS",
              "PROVIDER_TYPE_ACTIVE_DIRECTORY",
              "PROVIDER_TYPE_PINGONE",
              "PROVIDER_TYPE_ATLAS"
            ],
            "default": "PROVIDER_TYPE_UNSPECIFIED"
          },
          {
            "name": "account.mode",
            "description": "It is going to override the mode in the Provider.\nWhen not specified the backend will fill in with the Provider mode.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACCOUNT_MODE_OBSERVATION",
              "ACCOUNT_MODE_ENFORCEMENT",
              "ACCOUNT_MODE_UNSPECIFIED"
            ],
            "default": "ACCOUNT_MODE_OBSERVATION"
          },
          {
            "name": "account.lspDeactivated",
            "description": "This a new option supported in Google's latest proto.\n[\n  (google.api.field_behavior) = NON_EMPTY_DEFAULT\n];",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "account.defaultAccessRequestProfileId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account.tenantId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "account.updatedAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "AccountService"
        ]
      }
    },
    "/admin/access-key": {
      "post": {
        "operationId": "AuthenticationService_AdminRequestAccessKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAccessKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAdminRequestAccessKeyRequest"
            }
          }
        ],
        "tags": [
          "AuthenticationService"
        ]
      }
    },
    "/behavior/run": {
      "post": {
        "summary": "RunBehaviorModel triggers a job that runs behavior models",
        "description": "The endpoint accepts a BehaviorModelRequest which allows configuring various parameters of the run\n\nReturns an Empty response on successful completion.",
        "operationId": "AndromedaBehaviorService_RunBehaviorModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/andromedaapiBehaviorModelRequest"
            }
          }
        ],
        "tags": [
          "AndromedaBehaviorService"
        ]
      }
    },
    "/brokers": {
      "get": {
        "operationId": "AndromedaBrokerService_ListBroker",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListBrokerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AndromedaBrokerService"
        ]
      },
      "post": {
        "operationId": "AndromedaBrokerService_CreateBroker",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configBroker"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateBrokerRequest"
            }
          }
        ],
        "tags": [
          "AndromedaBrokerService"
        ]
      }
    },
    "/brokers/{id}": {
      "get": {
        "operationId": "AndromedaBrokerService_GetBroker",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configBroker"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AndromedaBrokerService"
        ]
      },
      "delete": {
        "operationId": "AndromedaBrokerService_DeleteBroker",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AndromedaBrokerService"
        ]
      },
      "put": {
        "operationId": "AndromedaBrokerService_UpdateBroker",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configBroker"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AndromedaBrokerServiceUpdateBrokerBody"
            }
          }
        ],
        "tags": [
          "AndromedaBrokerService"
        ]
      }
    },
    "/brokers/{id}/auth-config": {
      "delete": {
        "operationId": "AndromedaBrokerService_DeleteBrokerAuthConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AndromedaBrokerService"
        ]
      },
      "post": {
        "summary": "rpc GetBrokerAuthConfig(GetBrokerAuthConfigRequest) returns (models.config.BrokerAuthConfiguration) {\n  option (google.api.http) = {\n    get: \"/brokers/{broker_id}/auth-config\"\n  };\n}",
        "operationId": "AndromedaBrokerService_CreateBrokerAuthConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configBrokerAuthConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AndromedaBrokerServiceCreateBrokerAuthConfigBody"
            }
          }
        ],
        "tags": [
          "AndromedaBrokerService"
        ]
      }
    },
    "/campaigns": {
      "post": {
        "summary": "This is only used for running a campaign on demand.",
        "operationId": "CampaignInstanceService_CreateCampaignInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/campaignsCampaignInstance"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "campaignInstance",
            "description": "string id = 1;",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/campaignsCampaignInstance"
            }
          }
        ],
        "tags": [
          "CampaignInstanceService"
        ]
      }
    },
    "/campaigns/accessreviewers/{accessReviewerDataId}/action": {
      "post": {
        "operationId": "AccessReviewsReviewerService_ReviewerAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/campaignsCampaignSnapshotReviewerDetails"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accessReviewerDataId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiReviewerActionPayload"
            }
          }
        ],
        "tags": [
          "AccessReviewsReviewerService"
        ]
      }
    },
    "/campaigns/{campaignId}/accessreviews/mark-manually-revoked": {
      "post": {
        "operationId": "AccessReviewsUAROwnerService_BulkManualRevocationForAccessReview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiBulkAccessReviewUpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAccessReviewAndReasonList"
            }
          }
        ],
        "tags": [
          "AccessReviewsUAROwnerService"
        ]
      }
    },
    "/campaigns/{campaignId}/accessreviews/review": {
      "post": {
        "summary": "Approve/Reject/Reassign/Skip multiple access reviews.",
        "operationId": "AccessReviewsReviewerService_BulkUpdateAccessReviewReviewStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiBulkAccessReviewUpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiBulkUpdateAccessReviewReviewStatusPayload"
            }
          }
        ],
        "tags": [
          "AccessReviewsReviewerService"
        ]
      }
    },
    "/campaigns/{campaignId}/accessreviews/skip-revocation-check": {
      "post": {
        "operationId": "AccessReviewsUAROwnerService_BulkSkipRevocationCheckForAccessReview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiBulkAccessReviewUpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAccessReviewAndReasonList"
            }
          }
        ],
        "tags": [
          "AccessReviewsUAROwnerService"
        ]
      }
    },
    "/campaigns/{campaignId}/check-revocation": {
      "post": {
        "operationId": "AccessReviewsUAROwnerService_TriggerRevocationCheckForCampaign",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccessReviewsUAROwnerServiceTriggerRevocationCheckForCampaignBody"
            }
          }
        ],
        "tags": [
          "AccessReviewsUAROwnerService"
        ]
      }
    },
    "/campaigns/{campaignId}/reviewerdata/{campaignReviewerDataId}/approve-recommendations": {
      "post": {
        "summary": "Accept AI recommended approvals over multiple access reviews across campaigns for a single reviewer.",
        "operationId": "AccessReviewsReviewerService_BulkApproveAccessReviewsAiRecommendation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiBulkAccessReviewUpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "campaignReviewerDataId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "payload.reviewerId",
            "description": "To be used by tenant admin reviewer for review override.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "payload.campaignId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AccessReviewsReviewerService"
        ]
      }
    },
    "/campaigns/{campaignId}/send-reminder": {
      "post": {
        "operationId": "AccessReviewsUAROwnerService_SendReminder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccessReviewsUAROwnerServiceSendReminderBody"
            }
          }
        ],
        "tags": [
          "AccessReviewsUAROwnerService"
        ]
      }
    },
    "/campaigns/{id}": {
      "get": {
        "operationId": "CampaignInstanceService_GetCampaignInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/campaignsCampaignInstance"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CampaignInstanceService"
        ]
      },
      "delete": {
        "operationId": "CampaignInstanceService_DeleteCampaignInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CampaignInstanceService"
        ]
      },
      "put": {
        "operationId": "CampaignInstanceService_UpdateCampaignInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/campaignsCampaignInstance"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "campaignInstance",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/campaignsCampaignInstance"
            }
          }
        ],
        "tags": [
          "CampaignInstanceService"
        ]
      }
    },
    "/campaigns/{id}/action": {
      "post": {
        "operationId": "ActionCampaignInstanceService_ActionCampaignInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/campaignsCampaignInstance"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiActionCampaignInstancePayload"
            }
          }
        ],
        "tags": [
          "ActionCampaignInstanceService"
        ]
      }
    },
    "/campaigns/{id}/report": {
      "get": {
        "operationId": "ActionCampaignInstanceService_DownloadCampaignReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCampaignReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ActionCampaignInstanceService"
        ]
      },
      "post": {
        "operationId": "ActionCampaignInstanceService_TriggerCampaignReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/googlelongrunningOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "ActionCampaignInstanceService"
        ]
      }
    },
    "/campaigntemplates": {
      "get": {
        "operationId": "CampaignTemplateService_ListCampaignTemplates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListCampaignTemplatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CampaignTemplateService"
        ]
      },
      "post": {
        "operationId": "CampaignTemplateService_CreateCampaignTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigCampaignTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "campaignTemplate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsconfigCampaignTemplate"
            }
          }
        ],
        "tags": [
          "CampaignTemplateService"
        ]
      }
    },
    "/campaigntemplates/{id}": {
      "get": {
        "operationId": "CampaignTemplateService_GetCampaignTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigCampaignTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CampaignTemplateService"
        ]
      },
      "delete": {
        "operationId": "CampaignTemplateService_DeleteCampaignTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CampaignTemplateService"
        ]
      },
      "put": {
        "operationId": "CampaignTemplateService_UpdateCampaignTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigCampaignTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "campaignTemplate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsconfigCampaignTemplate"
            }
          }
        ],
        "tags": [
          "CampaignTemplateService"
        ]
      }
    },
    "/environments": {
      "get": {
        "operationId": "EnvironmentService_ListEnvironment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListEnvironmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EnvironmentService"
        ]
      },
      "post": {
        "operationId": "EnvironmentService_CreateEnvironment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configEnvironment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "environment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configEnvironment",
              "required": [
                "environment"
              ]
            }
          }
        ],
        "tags": [
          "EnvironmentService"
        ]
      }
    },
    "/environments/{id}": {
      "get": {
        "operationId": "EnvironmentService_GetEnvironment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configEnvironment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EnvironmentService"
        ]
      },
      "delete": {
        "operationId": "EnvironmentService_DeleteEnvironment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EnvironmentService"
        ]
      },
      "put": {
        "operationId": "EnvironmentService_UpdateEnvironment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configEnvironment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configEnvironment",
              "required": [
                "environment"
              ]
            }
          }
        ],
        "tags": [
          "EnvironmentService"
        ]
      }
    },
    "/events/sink_configuration": {
      "get": {
        "operationId": "EventsSinkConfigurationService_GetEventsSinkConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configSinkConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "EventsSinkConfigurationService"
        ]
      },
      "post": {
        "operationId": "EventsSinkConfigurationService_CreateEventsSinkConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configSinkConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configSinkConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "EventsSinkConfigurationService"
        ]
      },
      "put": {
        "operationId": "EventsSinkConfigurationService_UpdateEventsSinkConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configSinkConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configSinkConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "EventsSinkConfigurationService"
        ]
      }
    },
    "/groups/{groupId}/config": {
      "get": {
        "operationId": "GroupService_GetGroupConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configGroupConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupService"
        ]
      },
      "delete": {
        "operationId": "GroupService_DeleteGroupConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GroupService"
        ]
      },
      "post": {
        "operationId": "GroupService_CreateGroupConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configGroupConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configGroupConfiguration",
              "required": [
                "groupConfiguration"
              ]
            }
          }
        ],
        "tags": [
          "GroupService"
        ]
      },
      "put": {
        "operationId": "GroupService_UpdateGroupConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configGroupConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configGroupConfiguration",
              "required": [
                "groupConfiguration"
              ]
            }
          }
        ],
        "tags": [
          "GroupService"
        ]
      }
    },
    "/identities/{identityId}/accounts/{accountId}/accepted-risk": {
      "delete": {
        "operationId": "AccountIdentityService_DeleteAcceptedIdentityRisk",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "identityId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AccountIdentityService"
        ]
      },
      "post": {
        "operationId": "AccountIdentityService_AcceptIdentityRisk",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configAcceptedRisk"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "identityId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountIdentityServiceAcceptIdentityRiskBody"
            }
          }
        ],
        "tags": [
          "AccountIdentityService"
        ]
      }
    },
    "/identity-details": {
      "get": {
        "operationId": "UserService_GetIdentityDetails",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configIdentityDetails"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "UserService"
        ]
      }
    },
    "/integrations": {
      "get": {
        "operationId": "IntegrationService_ListIntegrations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListIntegrationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "IntegrationService"
        ]
      },
      "post": {
        "operationId": "IntegrationService_CreateIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigIntegration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrations",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsconfigIntegration",
              "required": [
                "integrations"
              ]
            }
          }
        ],
        "tags": [
          "IntegrationService"
        ]
      }
    },
    "/integrations/{id}": {
      "get": {
        "operationId": "IntegrationService_GetIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigIntegration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IntegrationService"
        ]
      },
      "delete": {
        "operationId": "IntegrationService_DeleteIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IntegrationService"
        ]
      },
      "put": {
        "operationId": "IntegrationService_UpdateIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigIntegration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "integrations",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsconfigIntegration",
              "required": [
                "integrations"
              ]
            }
          }
        ],
        "tags": [
          "IntegrationService"
        ]
      }
    },
    "/integrations/{integrationId}/workday": {
      "get": {
        "operationId": "WorkdayConfigService_GetWorkdayConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configWorkdayConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "WorkdayConfigService"
        ]
      },
      "post": {
        "operationId": "WorkdayConfigService_CreateWorkdayConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configWorkdayConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "workdayConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configWorkdayConfiguration",
              "required": [
                "workdayConfiguration"
              ]
            }
          },
          {
            "name": "fileId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WorkdayConfigService"
        ]
      },
      "put": {
        "operationId": "WorkdayConfigService_UpdateWorkdayConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configWorkdayConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "workdayConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configWorkdayConfiguration",
              "required": [
                "workdayConfiguration"
              ]
            }
          },
          {
            "name": "fileId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WorkdayConfigService"
        ]
      }
    },
    "/integrations/{providerId}/files": {
      "get": {
        "operationId": "FileUploaderService_ListFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListFileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "FileUploaderService"
        ]
      }
    },
    "/integrations/{providerId}/files/upload": {
      "post": {
        "summary": "Not implemented grpc",
        "operationId": "FileUploaderService_UploadFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configFile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileUploaderServiceUploadFileBody"
            }
          }
        ],
        "tags": [
          "FileUploaderService"
        ]
      }
    },
    "/integrations/{providerId}/files/{id}": {
      "get": {
        "operationId": "FileUploaderService_GetFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configFile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "FileUploaderService"
        ]
      },
      "delete": {
        "operationId": "FileUploaderService_DeleteFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "FileUploaderService"
        ]
      }
    },
    "/internal/configuration/system": {
      "get": {
        "operationId": "SystemConfigurationService_GetSystemConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configSystemConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "SystemConfigurationService"
        ]
      },
      "put": {
        "operationId": "SystemConfigurationService_UpdateSystemConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configSystemConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configSystemConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "SystemConfigurationService"
        ]
      }
    },
    "/internal/configuration/tenants/{tenantId}": {
      "get": {
        "operationId": "TenantInternalConfigurationService_GetTenantInternalConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configTenantInternalConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantInternalConfigurationService"
        ]
      },
      "post": {
        "summary": "By default this should be created with default values when a tenant is created.",
        "operationId": "TenantInternalConfigurationService_CreateTenantInternalConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configTenantInternalConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configTenantInternalConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "TenantInternalConfigurationService"
        ]
      },
      "put": {
        "operationId": "TenantInternalConfigurationService_UpdateTenantInternalConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configTenantInternalConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configTenantInternalConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "TenantInternalConfigurationService"
        ]
      }
    },
    "/internal/configuration/tenants/{tenantId}/providers/{providerId}": {
      "get": {
        "operationId": "ProviderInternalConfigurationService_GetProviderInternalConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configProviderInternalConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ProviderInternalConfigurationService"
        ]
      },
      "delete": {
        "operationId": "ProviderInternalConfigurationService_DeleteProviderInternalConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ProviderInternalConfigurationService"
        ]
      },
      "post": {
        "operationId": "ProviderInternalConfigurationService_CreateProviderInternalConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configProviderInternalConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configProviderInternalConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "ProviderInternalConfigurationService"
        ]
      },
      "put": {
        "operationId": "ProviderInternalConfigurationService_UpdateProviderInternalConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configProviderInternalConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configProviderInternalConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "ProviderInternalConfigurationService"
        ]
      }
    },
    "/internal/image-version": {
      "get": {
        "operationId": "ImageInfoService_GetImageVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configImageVersion"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "ImageInfoService"
        ]
      }
    },
    "/login": {
      "post": {
        "summary": "RequestLogin initiates the Login flow of a User identified by their Email.",
        "operationId": "AuthenticationService_RequestLogin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiRequestLoginResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "LoginRequest is the main input payload that is provided by the User\non the login page.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiLoginRequest"
            }
          }
        ],
        "tags": [
          "AuthenticationService"
        ]
      }
    },
    "/login/access-key": {
      "post": {
        "summary": "AccessKeyLogin verifies the access key generated from RequestAccessKey.\nAccessKeyLogin is primarily used by CLI agents and temporary SDK users.",
        "operationId": "AuthenticationService_AccessKeyLogin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configIdentityDetails"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "LoginVerificationRequest is the request payload that is provided by\nUsers while logging in.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiLoginVerificationRequest"
            }
          }
        ],
        "tags": [
          "AuthenticationService"
        ]
      }
    },
    "/login/channel": {
      "post": {
        "operationId": "AuthenticationService_ChannelLogin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiChannelLoginResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiChannelLoginRequest"
            }
          }
        ],
        "tags": [
          "AuthenticationService"
        ]
      }
    },
    "/login/email": {
      "post": {
        "summary": "EmailLogin verifies the OTP of the User and approves the Login request that\nwas initiated with RequestLogin and provides the caller with the\nsessionToken and refreshToken.\nThe gRPC endpoint returns these tokens as headers, whereas the\nHTTP endpoint sets these tokens in the Cookie (via the Set-Cookie Header).",
        "operationId": "AuthenticationService_EmailLogin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configIdentityDetails"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "LoginVerificationRequest is the request payload that is provided by\nUsers while logging in.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiLoginVerificationRequest"
            }
          }
        ],
        "tags": [
          "AuthenticationService"
        ]
      }
    },
    "/login/saml": {
      "post": {
        "summary": "SAMLLogin exchanges the IdP code with Andromeda session and refresh Tokens\nand approves the Login request that was initiated with RequestLogin.\nThe gRPC endpoint returns these tokens as headers, whereas the\nHTTP endpoint sets these tokens in the Cookie (via the Set-Cookie Header).",
        "operationId": "AuthenticationService_SAMLLogin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configIdentityDetails"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "LoginVerificationRequest is the request payload that is provided by\nUsers while logging in.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiLoginVerificationRequest"
            }
          }
        ],
        "tags": [
          "AuthenticationService"
        ]
      }
    },
    "/logout": {
      "get": {
        "summary": "Logout empties the tokens from the Cookies in the response in addition to\ninvalidating the current session token.",
        "operationId": "AuthenticationService_Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "AuthenticationService"
        ]
      }
    },
    "/logout/all": {
      "get": {
        "summary": "LogoutAll empties the tokens from the Cookies in the response in addition to\ninvalidating all active sessions.",
        "operationId": "AuthenticationService_LogoutAll",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "AuthenticationService"
        ]
      }
    },
    "/operations/{name}": {
      "get": {
        "summary": "Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice.",
        "operationId": "Operations_GetOperation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/googlelongrunningOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the operation resource.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Operations"
        ]
      }
    },
    "/operations/{name}/wait": {
      "post": {
        "summary": "Waits until the specified long-running operation is done or reaches at most\na specified timeout, returning the latest state.  If the operation is\nalready done, the latest state is immediately returned.  If the timeout\nspecified is greater than the default HTTP/RPC timeout, the HTTP/RPC\ntimeout is used.  If the server does not support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.\nNote that this method is on a best-effort basis.  It may return the latest\nstate before the specified timeout (including immediately), meaning even an\nimmediate response is no guarantee that the operation is done.",
        "operationId": "Operations_WaitOperation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/googlelongrunningOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the operation resource to wait on.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timeout",
            "description": "The maximum duration to wait before timing out. If left blank, the wait\nwill be at most the time permitted by the underlying HTTP/RPC protocol.\nIf RPC context deadline is also specified, the shorter one will be used.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Operations"
        ]
      }
    },
    "/policies/{policyId}/accounts/{accountId}/config": {
      "get": {
        "operationId": "PolicyConfigurationService_GetAccountPolicyConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configPolicyConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyConfigurationService"
        ]
      },
      "delete": {
        "operationId": "PolicyConfigurationService_DeleteAccountPolicyConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyConfigurationService"
        ]
      },
      "post": {
        "operationId": "PolicyConfigurationService_CreateAccountPolicyConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configPolicyConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "policyConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configPolicyConfiguration",
              "required": [
                "policyConfiguration"
              ]
            }
          }
        ],
        "tags": [
          "PolicyConfigurationService"
        ]
      },
      "put": {
        "operationId": "PolicyConfigurationService_UpdateAccountPolicyConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configPolicyConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "policyConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configPolicyConfiguration",
              "required": [
                "policyConfiguration"
              ]
            }
          }
        ],
        "tags": [
          "PolicyConfigurationService"
        ]
      }
    },
    "/policies/{policyId}/config": {
      "get": {
        "operationId": "PolicyConfigurationService_GetPolicyConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configPolicyConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyConfigurationService"
        ]
      },
      "delete": {
        "operationId": "PolicyConfigurationService_DeletePolicyConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyConfigurationService"
        ]
      },
      "post": {
        "operationId": "PolicyConfigurationService_CreatePolicyConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configPolicyConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "policyConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configPolicyConfiguration",
              "required": [
                "policyConfiguration"
              ]
            }
          }
        ],
        "tags": [
          "PolicyConfigurationService"
        ]
      },
      "put": {
        "operationId": "PolicyConfigurationService_UpdatePolicyConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configPolicyConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "policyConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configPolicyConfiguration",
              "required": [
                "policyConfiguration"
              ]
            }
          }
        ],
        "tags": [
          "PolicyConfigurationService"
        ]
      }
    },
    "/policy/permissions": {
      "post": {
        "operationId": "PolicyService_GetEffectivePermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/andromedaapiEffectivePermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/andromedaapiGetEffectivePermissionsRequest"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/providers": {
      "get": {
        "operationId": "ProviderService_ListProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListProviderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProviderService"
        ]
      },
      "post": {
        "operationId": "ProviderService_CreateProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigProvider"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsconfigProvider",
              "required": [
                "provider"
              ]
            }
          }
        ],
        "tags": [
          "ProviderService"
        ]
      }
    },
    "/providers/{id}": {
      "get": {
        "operationId": "ProviderService_GetProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigProvider"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ProviderService"
        ]
      },
      "delete": {
        "operationId": "ProviderService_DeleteProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ProviderService"
        ]
      },
      "put": {
        "operationId": "ProviderService_UpdateProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigProvider"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "provider",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsconfigProvider",
              "required": [
                "provider"
              ]
            }
          }
        ],
        "tags": [
          "ProviderService"
        ]
      }
    },
    "/providers/{providerId}/accessrequests": {
      "post": {
        "operationId": "JitPolicyRequestServiceV2_CreateJitPolicyRequestV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configJitPolicyRequest"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "jitPolicyRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configJitPolicyRequest"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "JitPolicyRequestServiceV2"
        ]
      },
      "put": {
        "operationId": "JitPolicyRequestServiceV2_UpdateJitPolicyRequestV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configJitPolicyRequest"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "jitPolicyRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configJitPolicyRequest"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "JitPolicyRequestServiceV2"
        ]
      }
    },
    "/providers/{providerId}/accessrequests/{id}/action": {
      "put": {
        "operationId": "JitPolicyRequestServiceV2_ActionJitPolicyRequestV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configJitPolicyRequest"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userAction",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configJitPolicyRequestUserAction"
            }
          }
        ],
        "tags": [
          "JitPolicyRequestServiceV2"
        ]
      }
    },
    "/providers/{providerId}/accounts": {
      "get": {
        "operationId": "AccountService_ListAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AccountService"
        ]
      }
    },
    "/providers/{providerId}/accounts/{accountId}/accessrequests": {
      "post": {
        "operationId": "JitPolicyRequestService_CreateJitPolicyRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configJitPolicyRequest"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "jitPolicyRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configJitPolicyRequest"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "JitPolicyRequestService"
        ]
      },
      "put": {
        "operationId": "JitPolicyRequestService_UpdateJitPolicyRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configJitPolicyRequest"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "jitPolicyRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configJitPolicyRequest"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "JitPolicyRequestService"
        ]
      }
    },
    "/providers/{providerId}/accounts/{accountId}/accessrequests/{id}/action": {
      "put": {
        "operationId": "JitPolicyRequestService_ActionJitPolicyRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configJitPolicyRequest"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userAction",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configJitPolicyRequestUserAction"
            }
          }
        ],
        "tags": [
          "JitPolicyRequestService"
        ]
      }
    },
    "/providers/{providerId}/accounts/{id}": {
      "get": {
        "operationId": "AccountService_GetAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AccountService"
        ]
      },
      "put": {
        "operationId": "AccountService_UpdateAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsconfigAccount",
              "required": [
                "account"
              ]
            }
          }
        ],
        "tags": [
          "AccountService"
        ]
      }
    },
    "/providers/{providerId}/activedirectory/config": {
      "get": {
        "operationId": "ActiveDirectoryService_GetActiveDirectoryProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configActiveDirectoryConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ActiveDirectoryService"
        ]
      },
      "post": {
        "operationId": "ActiveDirectoryService_CreateActiveDirectoryProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configActiveDirectoryConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configActiveDirectoryConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "ActiveDirectoryService"
        ]
      },
      "put": {
        "operationId": "ActiveDirectoryService_UpdateActiveDirectoryProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configActiveDirectoryConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configActiveDirectoryConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "ActiveDirectoryService"
        ]
      }
    },
    "/providers/{providerId}/adp/config": {
      "get": {
        "operationId": "AdpProviderConfigurationService_GetAdpProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configAdpProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AdpProviderConfigurationService"
        ]
      },
      "post": {
        "operationId": "AdpProviderConfigurationService_CreateAdpProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configAdpProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configAdpProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "AdpProviderConfigurationService"
        ]
      },
      "put": {
        "operationId": "AdpProviderConfigurationService_UpdateAdpProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configAdpProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configAdpProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "AdpProviderConfigurationService"
        ]
      }
    },
    "/providers/{providerId}/atlas/config": {
      "get": {
        "operationId": "AtlasProviderConfigurationService_GetAtlasProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configAtlasProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AtlasProviderConfigurationService"
        ]
      },
      "post": {
        "operationId": "AtlasProviderConfigurationService_CreateAtlasProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configAtlasProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configAtlasProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "AtlasProviderConfigurationService"
        ]
      },
      "put": {
        "operationId": "AtlasProviderConfigurationService_UpdateAtlasProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configAtlasProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configAtlasProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "AtlasProviderConfigurationService"
        ]
      }
    },
    "/providers/{providerId}/aws/accounts/{awsAccountId}/users/{awsUser}/lsp": {
      "get": {
        "summary": "* GetAwsLsp obtains the latest LSP from TSDB.",
        "operationId": "AwsLspService_GetAwsLsp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/awsAwsLsp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "awsAccountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "awsUser",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AwsLspService"
        ]
      }
    },
    "/providers/{providerId}/aws/config": {
      "get": {
        "operationId": "AWSProviderConfigurationService_GetAWSProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configAWSProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AWSProviderConfigurationService"
        ]
      },
      "post": {
        "operationId": "AWSProviderConfigurationService_CreateAWSProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configAWSProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configAWSProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "AWSProviderConfigurationService"
        ]
      },
      "put": {
        "operationId": "AWSProviderConfigurationService_UpdateAWSProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configAWSProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configAWSProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "AWSProviderConfigurationService"
        ]
      }
    },
    "/providers/{providerId}/azure/config": {
      "get": {
        "operationId": "AzureProviderConfigurationService_GetAzureProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configAzureProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AzureProviderConfigurationService"
        ]
      },
      "post": {
        "operationId": "AzureProviderConfigurationService_CreateAzureProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configAzureProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configAzureProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "AzureProviderConfigurationService"
        ]
      },
      "put": {
        "operationId": "AzureProviderConfigurationService_UpdateAzureProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configAzureProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configAzureProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "AzureProviderConfigurationService"
        ]
      }
    },
    "/providers/{providerId}/broker/{id}": {
      "delete": {
        "operationId": "AndromedaBrokerService_DeleteProviderBrokerMapper",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AndromedaBrokerService"
        ]
      }
    },
    "/providers/{providerId}/brokers": {
      "get": {
        "operationId": "AndromedaBrokerService_ListProviderBrokerMapper",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListProviderBrokerMapperResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AndromedaBrokerService"
        ]
      },
      "post": {
        "operationId": "AndromedaBrokerService_CreateProviderBrokerMapper",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configBrokerProviderMapper"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AndromedaBrokerServiceCreateProviderBrokerMapperBody"
            }
          }
        ],
        "tags": [
          "AndromedaBrokerService"
        ]
      }
    },
    "/providers/{providerId}/customapp/config": {
      "get": {
        "operationId": "CustomAppProviderService_GetCustomAppProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configCustomAppProvider"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CustomAppProviderService"
        ]
      },
      "post": {
        "operationId": "CustomAppProviderService_CreateCustomAppProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configCustomAppProvider"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configCustomAppProvider",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "CustomAppProviderService"
        ]
      },
      "put": {
        "operationId": "CustomAppProviderService_UpdateCustomAppProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configCustomAppProvider"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configCustomAppProvider",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "CustomAppProviderService"
        ]
      }
    },
    "/providers/{providerId}/eligibilities": {
      "post": {
        "operationId": "PolicyEligibilityMappingService_CreatePolicyEligibilityMapping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigPolicyEligibilityMapping"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "policyEligibilityMapping",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsconfigPolicyEligibilityMapping",
              "required": [
                "policyEligibilityMapping"
              ]
            }
          }
        ],
        "tags": [
          "PolicyEligibilityMappingService"
        ]
      }
    },
    "/providers/{providerId}/eligibilities/{policyEligibilityMappingId}": {
      "delete": {
        "operationId": "PolicyEligibilityMappingService_DeletePolicyEligibilityMapping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "policyEligibilityMappingId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyEligibilityMappingService"
        ]
      }
    },
    "/providers/{providerId}/entra/config": {
      "get": {
        "operationId": "EntraProviderConfigurationService_GetEntraProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configEntraProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EntraProviderConfigurationService"
        ]
      },
      "post": {
        "operationId": "EntraProviderConfigurationService_CreateEntraProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configEntraProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configEntraProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "EntraProviderConfigurationService"
        ]
      },
      "put": {
        "operationId": "EntraProviderConfigurationService_UpdateEntraProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configEntraProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configEntraProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "EntraProviderConfigurationService"
        ]
      }
    },
    "/providers/{providerId}/environmentmappingpolicies": {
      "get": {
        "operationId": "EnvironmentMappingPolicyService_ListEnvironmentMappingPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListEnvironmentMappingPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EnvironmentMappingPolicyService"
        ]
      },
      "post": {
        "operationId": "EnvironmentMappingPolicyService_CreateEnvironmentMappingPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configEnvironmentMappingPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environmentMappingPolicy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configEnvironmentMappingPolicy",
              "required": [
                "environmentMappingPolicy"
              ]
            }
          }
        ],
        "tags": [
          "EnvironmentMappingPolicyService"
        ]
      }
    },
    "/providers/{providerId}/environmentmappingpolicies/{id}": {
      "get": {
        "operationId": "EnvironmentMappingPolicyService_GetEnvironmentMappingPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configEnvironmentMappingPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EnvironmentMappingPolicyService"
        ]
      },
      "delete": {
        "operationId": "EnvironmentMappingPolicyService_DeleteEnvironmentMappingPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EnvironmentMappingPolicyService"
        ]
      },
      "put": {
        "operationId": "EnvironmentMappingPolicyService_UpdateEnvironmentMappingPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configEnvironmentMappingPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environmentMappingPolicy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configEnvironmentMappingPolicy",
              "required": [
                "environmentMappingPolicy"
              ]
            }
          }
        ],
        "tags": [
          "EnvironmentMappingPolicyService"
        ]
      }
    },
    "/providers/{providerId}/gcp/config": {
      "get": {
        "operationId": "GCPProviderConfigurationService_GetGCPProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configGCPProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GCPProviderConfigurationService"
        ]
      },
      "post": {
        "operationId": "GCPProviderConfigurationService_CreateGCPProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configGCPProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configGCPProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "GCPProviderConfigurationService"
        ]
      },
      "put": {
        "operationId": "GCPProviderConfigurationService_UpdateGCPProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configGCPProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configGCPProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "GCPProviderConfigurationService"
        ]
      }
    },
    "/providers/{providerId}/googleworkspace/config": {
      "get": {
        "operationId": "GoogleWorkspaceProviderConfigurationService_GetGoogleWorkspaceProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configGoogleWorkspaceProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GoogleWorkspaceProviderConfigurationService"
        ]
      },
      "post": {
        "operationId": "GoogleWorkspaceProviderConfigurationService_CreateGoogleWorkspaceProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configGoogleWorkspaceProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configGoogleWorkspaceProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "GoogleWorkspaceProviderConfigurationService"
        ]
      },
      "put": {
        "operationId": "GoogleWorkspaceProviderConfigurationService_UpdateGoogleWorkspaceProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configGoogleWorkspaceProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configGoogleWorkspaceProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "GoogleWorkspaceProviderConfigurationService"
        ]
      }
    },
    "/providers/{providerId}/hris/config": {
      "get": {
        "operationId": "HrisConfigService_GetHrisConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configHrisProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "HrisConfigService"
        ]
      },
      "post": {
        "operationId": "HrisConfigService_CreateHrisConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configHrisProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "hrisConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configHrisProviderConfiguration",
              "required": [
                "hrisConfiguration"
              ]
            }
          },
          {
            "name": "fileId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "HrisConfigService"
        ]
      },
      "put": {
        "operationId": "HrisConfigService_UpdateHrisConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configHrisProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "hrisConfiguration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configHrisProviderConfiguration",
              "required": [
                "hrisConfiguration"
              ]
            }
          },
          {
            "name": "fileId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "HrisConfigService"
        ]
      }
    },
    "/providers/{providerId}/idpapplication/config": {
      "get": {
        "operationId": "IdpApplicationConfigService_GetIdpApplicationConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configIdpApplicationConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "IdpApplicationConfigService"
        ]
      },
      "post": {
        "operationId": "IdpApplicationConfigService_CreateIdpApplicationConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configIdpApplicationConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configIdpApplicationConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "IdpApplicationConfigService"
        ]
      },
      "put": {
        "operationId": "IdpApplicationConfigService_UpdateIdpApplicationConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configIdpApplicationConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configIdpApplicationConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "IdpApplicationConfigService"
        ]
      }
    },
    "/providers/{providerId}/idpapplication/scimpushgroups": {
      "get": {
        "operationId": "ScimPushGroupService_ListScimPushGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListScimPushGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ScimPushGroupService"
        ]
      },
      "post": {
        "operationId": "ScimPushGroupService_CreateScimPushGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configScimPushGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scimPushGroup",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configScimPushGroup",
              "required": [
                "scimPushGroup"
              ]
            }
          }
        ],
        "tags": [
          "ScimPushGroupService"
        ]
      }
    },
    "/providers/{providerId}/idpapplication/scimpushgroups/{id}": {
      "get": {
        "operationId": "ScimPushGroupService_GetScimPushGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configScimPushGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ScimPushGroupService"
        ]
      },
      "put": {
        "operationId": "ScimPushGroupService_UpdateScimPushGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configScimPushGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scimPushGroup",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configScimPushGroup",
              "required": [
                "scimPushGroup"
              ]
            }
          }
        ],
        "tags": [
          "ScimPushGroupService"
        ]
      }
    },
    "/providers/{providerId}/inventory": {
      "post": {
        "operationId": "ProviderService_TriggerInventoryIngestion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProviderServiceTriggerInventoryIngestionBody"
            }
          }
        ],
        "tags": [
          "ProviderService"
        ]
      }
    },
    "/providers/{providerId}/inventory/pause": {
      "post": {
        "operationId": "ProviderUtilityService_PauseInventoryIngestion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProviderUtilityServicePauseInventoryIngestionBody"
            }
          }
        ],
        "tags": [
          "ProviderUtilityService"
        ]
      }
    },
    "/providers/{providerId}/inventory/unpause": {
      "post": {
        "operationId": "ProviderUtilityService_UnpauseInventoryIngestion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProviderUtilityServiceUnpauseInventoryIngestionBody"
            }
          }
        ],
        "tags": [
          "ProviderUtilityService"
        ]
      }
    },
    "/providers/{providerId}/logs/historical": {
      "post": {
        "operationId": "ProviderUtilityService_TriggerHistoricalLogsWorkflow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProviderUtilityServiceTriggerHistoricalLogsWorkflowBody"
            }
          }
        ],
        "tags": [
          "ProviderUtilityService"
        ]
      }
    },
    "/providers/{providerId}/logs/realtime": {
      "post": {
        "operationId": "ProviderUtilityService_TriggerRealtimeLogsWorkflow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProviderUtilityServiceTriggerRealtimeLogsWorkflowBody"
            }
          }
        ],
        "tags": [
          "ProviderUtilityService"
        ]
      }
    },
    "/providers/{providerId}/okta/config": {
      "get": {
        "operationId": "OktaConfigService_GetOktaConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configOktaConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OktaConfigService"
        ]
      },
      "post": {
        "operationId": "OktaConfigService_CreateOktaConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configOktaConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configOktaConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "OktaConfigService"
        ]
      },
      "put": {
        "operationId": "OktaConfigService_UpdateOktaConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configOktaConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configOktaConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "OktaConfigService"
        ]
      }
    },
    "/providers/{providerId}/ownersmappingpolicies": {
      "get": {
        "operationId": "OwnersMappingPolicyService_ListOwnersMappingPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListOwnersMappingPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OwnersMappingPolicyService"
        ]
      },
      "post": {
        "operationId": "OwnersMappingPolicyService_CreateOwnersMappingPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configOwnersMappingPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ownersMappingPolicy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configOwnersMappingPolicy",
              "required": [
                "ownersMappingPolicy"
              ]
            }
          }
        ],
        "tags": [
          "OwnersMappingPolicyService"
        ]
      }
    },
    "/providers/{providerId}/ownersmappingpolicies/{id}": {
      "get": {
        "operationId": "OwnersMappingPolicyService_GetOwnersMappingPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configOwnersMappingPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OwnersMappingPolicyService"
        ]
      },
      "delete": {
        "operationId": "OwnersMappingPolicyService_DeleteOwnersMappingPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OwnersMappingPolicyService"
        ]
      },
      "put": {
        "operationId": "OwnersMappingPolicyService_UpdateOwnersMappingPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configOwnersMappingPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ownersMappingPolicy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configOwnersMappingPolicy",
              "required": [
                "ownersMappingPolicy"
              ]
            }
          }
        ],
        "tags": [
          "OwnersMappingPolicyService"
        ]
      }
    },
    "/providers/{providerId}/salesforce/config": {
      "get": {
        "operationId": "SalesforceProviderConfigurationService_GetSalesforceProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configSalesforceProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SalesforceProviderConfigurationService"
        ]
      },
      "post": {
        "operationId": "SalesforceProviderConfigurationService_CreateSalesforceProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configSalesforceProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configSalesforceProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "SalesforceProviderConfigurationService"
        ]
      },
      "put": {
        "operationId": "SalesforceProviderConfigurationService_UpdateSalesforceProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configSalesforceProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configSalesforceProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "SalesforceProviderConfigurationService"
        ]
      }
    },
    "/providers/{providerId}/sensitivitymappingpolicies": {
      "get": {
        "operationId": "SensitivityMappingPolicyService_ListSensitivityMappingPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListSensitivityMappingPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SensitivityMappingPolicyService"
        ]
      },
      "post": {
        "operationId": "SensitivityMappingPolicyService_CreateSensitivityMappingPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configSensitivityMappingPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sensitivityMappingPolicy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configSensitivityMappingPolicy",
              "required": [
                "sensitivityMappingPolicy"
              ]
            }
          }
        ],
        "tags": [
          "SensitivityMappingPolicyService"
        ]
      }
    },
    "/providers/{providerId}/sensitivitymappingpolicies/{id}": {
      "get": {
        "operationId": "SensitivityMappingPolicyService_GetSensitivityMappingPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configSensitivityMappingPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SensitivityMappingPolicyService"
        ]
      },
      "delete": {
        "operationId": "SensitivityMappingPolicyService_DeleteSensitivityMappingPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SensitivityMappingPolicyService"
        ]
      },
      "put": {
        "operationId": "SensitivityMappingPolicyService_UpdateSensitivityMappingPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configSensitivityMappingPolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sensitivityMappingPolicy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configSensitivityMappingPolicy",
              "required": [
                "sensitivityMappingPolicy"
              ]
            }
          }
        ],
        "tags": [
          "SensitivityMappingPolicyService"
        ]
      }
    },
    "/providers/{providerId}/shadow-apps/inventory": {
      "post": {
        "operationId": "ShadowAppsService_TriggerShadowAppsWorkflow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShadowAppsServiceTriggerShadowAppsWorkflowBody"
            }
          }
        ],
        "tags": [
          "ShadowAppsService"
        ]
      }
    },
    "/providertiers": {
      "get": {
        "operationId": "ProviderTierService_ListProviderTier",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListProviderTierResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProviderTierService"
        ]
      },
      "post": {
        "operationId": "ProviderTierService_CreateProviderTier",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigProviderTier"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providertier",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsconfigProviderTier",
              "required": [
                "providertier"
              ]
            }
          }
        ],
        "tags": [
          "ProviderTierService"
        ]
      }
    },
    "/providertiers/{id}": {
      "get": {
        "operationId": "ProviderTierService_GetProviderTier",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigProviderTier"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ProviderTierService"
        ]
      },
      "delete": {
        "operationId": "ProviderTierService_DeleteProviderTier",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ProviderTierService"
        ]
      },
      "put": {
        "operationId": "ProviderTierService_UpdateProviderTier",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigProviderTier"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "providertier",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsconfigProviderTier",
              "required": [
                "providertier"
              ]
            }
          }
        ],
        "tags": [
          "ProviderTierService"
        ]
      }
    },
    "/recommendation-type": {
      "post": {
        "operationId": "RecommendationService_CreateRecommendationType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configRecommendationTypeConfig"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "recommendation",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configRecommendationTypeConfig",
              "required": [
                "recommendation"
              ]
            }
          }
        ],
        "tags": [
          "RecommendationService"
        ]
      }
    },
    "/recommendation-type/{id}": {
      "get": {
        "operationId": "RecommendationService_GetRecommendationType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configRecommendationTypeConfig"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RecommendationService"
        ]
      },
      "put": {
        "operationId": "RecommendationService_UpdateRecommendationType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configRecommendationTypeConfig"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "recommendation",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configRecommendationTypeConfig",
              "required": [
                "recommendation"
              ]
            }
          }
        ],
        "tags": [
          "RecommendationService"
        ]
      }
    },
    "/recommendations/{id}": {
      "get": {
        "operationId": "RecommendationService_GetRecommendation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configRecommendationConfig"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RecommendationService"
        ]
      },
      "put": {
        "operationId": "RecommendationService_UpdateRecommendation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configRecommendationConfig"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "recommendation",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configRecommendationConfig",
              "required": [
                "recommendation"
              ]
            }
          }
        ],
        "tags": [
          "RecommendationService"
        ]
      }
    },
    "/remediation": {
      "post": {
        "operationId": "RemediationService_CreateRemediation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configUrlResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "remediation",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configRemediation"
            }
          }
        ],
        "tags": [
          "RemediationService"
        ]
      }
    },
    "/signup": {
      "post": {
        "summary": "RequestSignup accepts payload to sign up a User to Andromeda. This creates a local\nUser in Andromeda, and sends a OTP to the User's provided Email for email verification.",
        "operationId": "AuthenticationService_RequestSignup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsconfigUser",
              "required": [
                "user"
              ]
            }
          }
        ],
        "tags": [
          "AuthenticationService"
        ]
      }
    },
    "/signup/email": {
      "post": {
        "summary": "Signup approves the Signup request that was initiated with RequestSignup.\nThis completes authentication of the user and provides the caller with the sessionToken\nand refreshToken. The gRPC endpoint returns these tokens as headers, whereas the\nHTTP endpoint sets these tokens in the Cookie (via the Set-Cookie Header).",
        "operationId": "AuthenticationService_Signup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "LoginVerificationRequest is the request payload that is provided by\nUsers while logging in.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiLoginVerificationRequest"
            }
          }
        ],
        "tags": [
          "AuthenticationService"
        ]
      }
    },
    "/signup/retry": {
      "post": {
        "summary": "RetryRequestSignup is same as RequestSignup, but can be used to re-send the OTP.",
        "operationId": "AuthenticationService_RetryRequestSignup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsconfigUser",
              "required": [
                "user"
              ]
            }
          }
        ],
        "tags": [
          "AuthenticationService"
        ]
      }
    },
    "/tenants": {
      "get": {
        "operationId": "TenantService_ListTenants",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListTenantResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TenantService"
        ]
      },
      "post": {
        "operationId": "TenantService_CreateTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigTenant"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsconfigTenant",
              "required": [
                "tenant"
              ]
            }
          }
        ],
        "tags": [
          "TenantService"
        ]
      }
    },
    "/tenants/profile": {
      "get": {
        "operationId": "TenantService_GetTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigTenant"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "TenantService"
        ]
      }
    },
    "/tenants/switch/{partitionId}": {
      "post": {
        "operationId": "SwitchTenantService_SwitchTenantPartitions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "partitionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SwitchTenantService"
        ]
      }
    },
    "/tenants/{id}": {
      "delete": {
        "summary": "DeleteTenant should only be called during a failure in Tenant onboarding. Andromeda\ndoes not cleanup Tenant data on this DeleteTenant call.",
        "operationId": "TenantService_DeleteTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantService"
        ]
      },
      "put": {
        "operationId": "TenantService_UpdateTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigTenant"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenant",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsconfigTenant",
              "required": [
                "tenant"
              ]
            }
          }
        ],
        "tags": [
          "TenantService"
        ]
      }
    },
    "/tenants/{id}/partitions": {
      "get": {
        "summary": "GetTenantPartitionsMappings returns the mapping of partitions for a tenant.\nThis is used to get the mapping of partitions for a tenant.",
        "operationId": "TenantService_GetTenantPartitionsMappings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTenantPartitionsMappingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantService"
        ]
      },
      "delete": {
        "summary": "DeleteTenantPartitionsMapping deletes an existing mapping of partitions for a tenant.\nThis is used to delete an existing mapping of partitions for a tenant.",
        "operationId": "TenantService_DeleteTenantPartitionsMapping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantService"
        ]
      },
      "post": {
        "summary": "CreateTenantPartitionsMapping creates a new mapping of partitions for a tenant.\nThis is used to create a new mapping of partitions for a tenant.",
        "operationId": "TenantService_CreateTenantPartitionsMapping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTenantPartitionsMappingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mapping",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiTenantPartitionsMappingResponse",
              "required": [
                "mapping"
              ]
            }
          }
        ],
        "tags": [
          "TenantService"
        ]
      },
      "put": {
        "summary": "UpdateTenantPartitionsMapping updates an existing mapping of partitions for a tenant.\nThis is used to update an existing mapping of partitions for a tenant.",
        "operationId": "TenantService_UpdateTenantPartitionsMapping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTenantPartitionsMappingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mapping",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiTenantPartitionsMappingResponse",
              "required": [
                "mapping"
              ]
            }
          }
        ],
        "tags": [
          "TenantService"
        ]
      }
    },
    "/tenants/{tenantId}/job_status": {
      "get": {
        "operationId": "JobStatusService_ListJobsStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/nonpublicListJobsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter.providerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.providerAccountId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.type",
            "description": " - ANY: *USE IN FILTER ONLY*\nANY is used to filter for all job types at once.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNDEFINED",
              "ANY",
              "INVENTORY_FULL_SYNC_INGEST",
              "RISK",
              "LSP",
              "AUDIT_TRAIL_SYNC",
              "INVENTORY_FULL_SYNC_DIGEST",
              "QUERY_CACHE",
              "GRAPH_DIAGNOSTIC"
            ],
            "default": "UNDEFINED"
          },
          {
            "name": "filter.startedAfter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.state",
            "description": " - ANY: *USE IN FILTER ONLY*\nANY is used to filter for all job states at once.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNDEFINED",
              "ANY",
              "RUNNING",
              "SUCCESS",
              "PENDING",
              "FAILED",
              "UNKNOWN",
              "TERMINATED",
              "RETRY"
            ],
            "default": "UNDEFINED"
          },
          {
            "name": "filter.scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNDEFINED",
              "TENANT",
              "PROVIDER",
              "ACCOUNT",
              "ALL"
            ],
            "default": "UNDEFINED"
          },
          {
            "name": "filter.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.metadata",
            "in": "query",
            "required": false,
            "type": "object"
          },
          {
            "name": "filter.providerType",
            "description": " - PROVIDER_AWS: Providers 1 - 199\nTODO: Cleanup this ProviderType enum and use the config ProviderType enum",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PROVIDER_TYPE_UNSPECIFIED",
              "PROVIDER_AWS",
              "PROVIDER_GCP",
              "PROVIDER_AZURE",
              "PROVIDER_OKTA",
              "PROVIDER_WORKDAY",
              "PROVIDER_ENTRA",
              "PROVIDER_APPLICATION",
              "PROVIDER_CUSTOM_APPLICATION",
              "PROVIDER_GOOGLE_WORKSPACE",
              "PROVIDER_ADP",
              "PROVIDER_SALESFORCE",
              "PROVIDER_HRIS",
              "PROVIDER_ACTIVE_DIRECTORY",
              "PROVIDER_PINGONE",
              "PROVIDER_ATLAS"
            ],
            "default": "PROVIDER_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "JobStatusService"
        ]
      }
    },
    "/tenants/{tenantId}/tenant_status": {
      "get": {
        "operationId": "JobStatusService_GetTenantStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/nonpublicGetTenantStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "JobStatusService"
        ]
      }
    },
    "/tenantsettings": {
      "get": {
        "operationId": "TenantSettingsService_GetTenantSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigTenantSettings"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "TenantSettingsService"
        ]
      },
      "delete": {
        "operationId": "TenantSettingsService_DeleteTenantSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TenantSettingsService"
        ]
      },
      "put": {
        "operationId": "TenantSettingsService_UpdateTenantSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigTenantSettings"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantSettings",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsconfigTenantSettings",
              "required": [
                "tenantSettings"
              ]
            }
          }
        ],
        "tags": [
          "TenantSettingsService"
        ]
      }
    },
    "/user-id": {
      "get": {
        "operationId": "UserService_GetUserId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configUserId"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "UserService"
        ]
      }
    },
    "/users": {
      "get": {
        "operationId": "UserService_ListUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "operationId": "UserService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsconfigUser",
              "required": [
                "user"
              ]
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "UserService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "put": {
        "operationId": "UserService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modelsconfigUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/modelsconfigUser",
              "required": [
                "user"
              ]
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/users/{userId}/accounts/{accountId}/accepted-risk": {
      "delete": {
        "operationId": "AccountUserService_DeleteAcceptedUserRisk",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AccountUserService"
        ]
      },
      "post": {
        "operationId": "AccountUserService_AcceptUserRisk",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configAcceptedRisk"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountUserServiceAcceptUserRiskBody"
            }
          }
        ],
        "tags": [
          "AccountUserService"
        ]
      }
    },
    "/v1/providers/{providerId}/pingone/config": {
      "get": {
        "operationId": "PingOneProviderConfigurationService_GetPingOneProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configPingOneProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PingOneProviderConfigurationService"
        ]
      },
      "post": {
        "operationId": "PingOneProviderConfigurationService_CreatePingOneProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configPingOneProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configPingOneProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "PingOneProviderConfigurationService"
        ]
      },
      "put": {
        "operationId": "PingOneProviderConfigurationService_UpdatePingOneProviderConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configPingOneProviderConfiguration"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configPingOneProviderConfiguration",
              "required": [
                "config"
              ]
            }
          }
        ],
        "tags": [
          "PingOneProviderConfigurationService"
        ]
      }
    }
  },
  "definitions": {
    "AccessKeyStatusMessageAccessKeyStatus": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "ACTIVE",
        "INACTIVE"
      ],
      "default": "UNSPECIFIED"
    },
    "AccessRequestAssignmentTypeMessageAccessRequestAssignmentType": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "ROLE_ASSIGNMENT",
        "PROVIDER_ASSIGNMENT",
        "RESOURCE_ASSIGNMENT"
      ],
      "default": "UNDEFINED"
    },
    "AccessRequestProvisioningGroupMatchMessageAccessRequestProvisioningGroupMatchType": {
      "type": "string",
      "enum": [
        "PATTERN_MATCH",
        "ROLE_BASED_PROVISIONING_GROUP"
      ],
      "default": "PATTERN_MATCH",
      "description": " - PATTERN_MATCH: The group name is a static string.\n - ROLE_BASED_PROVISIONING_GROUP: The group is picked up from the per role, account Provisioning Group."
    },
    "AccessRequestProvisioningPolicyProvisioningPolicy": {
      "type": "string",
      "enum": [
        "PRINCIPAL_DIRECT_BINDING",
        "IDENTITY_ACCESS_VIA_GROUP_BINDING"
      ],
      "default": "PRINCIPAL_DIRECT_BINDING",
      "description": " - PRINCIPAL_DIRECT_BINDING: Default behaviour.\nThe Principal User/Group is directly given access to a Policy in a Scope.\nAndromeda JIT only managed Account/Scope-User-Policy-Binding and\nAccount/Scope-Group-Policy-Binding.\n - IDENTITY_ACCESS_VIA_GROUP_BINDING: Identity is granted access to a Role via Group membership if the Group\nscoped binding already exists. If not, a Group and Group binding is created first,\non top of which a membership is created.\nAndromeda JIT manages Account/Scope-Group-Policy-Binding, Groups and Group\nmemberships. The Group-Role assignment is automatically removed\nwhen no Users are effectively part of the Group."
    },
    "AccessRequestTypeMessageAccessRequestType": {
      "type": "string",
      "enum": [
        "JIT",
        "STANDING"
      ],
      "default": "JIT"
    },
    "AccessReviewActionTypeMessageReviewActionType": {
      "type": "string",
      "enum": [
        "REVIEW_ACTION_UNSPECIFIED",
        "APPROVE",
        "REJECT",
        "SKIP_REVOCATION_CHECK",
        "MARK_REVOKED",
        "MARK_EXTERNALLY_REVOKED"
      ],
      "default": "REVIEW_ACTION_UNSPECIFIED",
      "description": "Actions that can be done on Access reviews."
    },
    "AccessReviewActionTypeMessageReviewerActionType": {
      "type": "string",
      "enum": [
        "REVIEWER_ACTION_UNSPECIFIED",
        "REASSIGN",
        "SIGN_OFF"
      ],
      "default": "REVIEWER_ACTION_UNSPECIFIED"
    },
    "AccessReviewAnalysisActionMessageAccessReviewAnalysisAction": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "PASS",
        "REVIEW"
      ],
      "default": "UNSPECIFIED",
      "title": "- PASS: The action is to approve the access\n - REVIEW: The action is to deny the access"
    },
    "AccessReviewAnalysisCheckTypeMessageAccessReviewAnalysisCheckType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "ROLE_BLAST_RISK",
        "RECENTLY_APPROVED",
        "IDENTITY_STATUS",
        "POLICY_LAST_USAGE",
        "ROLE_NAME"
      ],
      "default": "UNSPECIFIED",
      "title": "- ROLE_BLAST_RISK: Rule to check if the user has access to the resource\nPRIVILEGE_CATEGORY = 1;\n - RECENTLY_APPROVED: BEHAVIOR\n - IDENTITY_STATUS: POSTURE\n - POLICY_LAST_USAGE: BEHAVIOR\n - ROLE_NAME: POSTURE"
    },
    "AccessReviewAnalysisStatusMessageAccessReviewAnalysisStatus": {
      "type": "string",
      "enum": [
        "IN_PROGRESS",
        "PASS",
        "FAILED",
        "SKIPPED",
        "NO_DECISION"
      ],
      "default": "IN_PROGRESS",
      "title": "- IN_PROGRESS: Check is in progress\n - PASS: All the conditions for the check passed\n - FAILED: Check failed\n - SKIPPED: not applicable\n - NO_DECISION: Not enough data to make a decision due to not enough data or model could not make a decision"
    },
    "AccessReviewReviewerStatusMessageAccessReviewReviewerStatus": {
      "type": "string",
      "enum": [
        "READY",
        "ASSIGNED",
        "COMPLETED",
        "SIGNED_OFF"
      ],
      "default": "READY",
      "description": " - READY: Once the Campaign is ready with the snapshots and is waiting\nactivation the reviewer status is set to READY.\n - ASSIGNED: When the Campaign is activated and the reviewer has not made any\ndecision on the review and saved it.\n - COMPLETED: Reviewer has made a decision on the review as either\napproved or denied.\n - SIGNED_OFF: reviewer has made the decision and signed off the review\nThis is automatically done by the system when the reviewer\nsigns off the campaign when all the reviews for that campaign are\ncompleted."
    },
    "AccessReviewRevocationStatusMessageAccessReviewRevocationStatus": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "REVOKED",
        "IN_PROGRESS",
        "PENDING",
        "SKIPPED",
        "EXTERNALLY_REVOKED"
      ],
      "default": "UNSPECIFIED",
      "title": "- UNSPECIFIED: The statuses can only go from ASSIGNED to any other state mentioned.\n - IN_PROGRESS: Andromeda is in the process of revoking the access will be retried infinitely\n - PENDING: Access needs to be revoked manually by the user\n - SKIPPED: UAR Owner has manually skipped revocation check\n - EXTERNALLY_REVOKED: User has marked the binding as revoked"
    },
    "AccessReviewStatusMessageAccessReviewStatus": {
      "type": "string",
      "enum": [
        "ASSIGNED",
        "APPROVED",
        "SKIPPED",
        "DENIED",
        "DRAFT"
      ],
      "default": "ASSIGNED",
      "title": "- ASSIGNED: The statuses can only go from ASSIGNED to any other state mentioned.\n - SKIPPED: The access will not be reviewed in the current campaign.\n - DENIED: Access is to be revoked, either automatically or manually.\n - DRAFT: intermidiate state before campaign state is set to review in progress"
    },
    "AccessReviewsUAROwnerServiceSendReminderBody": {
      "type": "object"
    },
    "AccessReviewsUAROwnerServiceTriggerRevocationCheckForCampaignBody": {
      "type": "object"
    },
    "AccessTypeMessageAccessType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "WEB_CONSOLE",
        "API",
        "OTHER"
      ],
      "default": "UNSPECIFIED"
    },
    "AccountIdentityServiceAcceptIdentityRiskBody": {
      "type": "object"
    },
    "AccountPolicyServiceIdentitySignificanceTypeMessageAccountPolicyServiceIdentitySignificanceType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "OVERPRIVILEGED_ROLE",
        "UNUSED_ROLE"
      ],
      "default": "UNSPECIFIED",
      "title": "- OVERPRIVILEGED_ROLE: NHI has over provisioned permissions in the context.\nCategory: PRIVILEGE"
    },
    "AccountUserServiceAcceptUserRiskBody": {
      "type": "object"
    },
    "ActionAccessLevelEnumActionAccessLevel": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "LIST",
        "WRITE_TAG",
        "DELETE_TAG",
        "READ_METADATA",
        "READ_DATA",
        "WRITE_METADATA",
        "CREATE",
        "WRITE_DATA",
        "DELETE_DATA",
        "DELETE",
        "PERMISSIONS_MANAGEMENT"
      ],
      "default": "UNDEFINED"
    },
    "ActionRiskLevelEnumActionRiskLevel": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "LOW",
        "HIGH"
      ],
      "default": "UNDEFINED"
    },
    "ActionUsageLevelEnumActionUsageLevel": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "USED",
        "FREQUENTLY_USED",
        "INFREQUENTLY_USED",
        "UNUSED",
        "UNTRACKED_USAGE"
      ],
      "default": "UNDEFINED"
    },
    "AiAccessReviewRecommendationMessageAiAccessReviewRecommendation": {
      "type": "string",
      "enum": [
        "NONE",
        "REVIEW",
        "APPROVE",
        "PENDING",
        "FAILED"
      ],
      "default": "NONE",
      "title": "- FAILED: TBD: Whether it should be exposed"
    },
    "AndromedaBrokerServiceCreateBrokerAuthConfigBody": {
      "type": "object"
    },
    "AndromedaBrokerServiceCreateProviderBrokerMapperBody": {
      "type": "object",
      "properties": {
        "providerMapper": {
          "$ref": "#/definitions/configBrokerProviderMapper"
        }
      },
      "required": [
        "providerMapper"
      ]
    },
    "AndromedaBrokerServiceUpdateBrokerBody": {
      "type": "object",
      "properties": {
        "broker": {
          "$ref": "#/definitions/configBroker"
        }
      },
      "required": [
        "broker"
      ]
    },
    "AndromedaModeMessageAndromedaMode": {
      "type": "string",
      "enum": [
        "OBSERVATION",
        "ENFORCEMENT"
      ],
      "default": "OBSERVATION"
    },
    "ApiRoleEnumApiRole": {
      "type": "string",
      "enum": [
        "ANDROMEDA_ADMIN",
        "ADMIN",
        "USER",
        "ADMIN_READ_ONLY",
        "SUPER_TENANT_ADMIN",
        "SUPER_TENANT_ADMIN_READ_ONLY",
        "UAR_ADMIN"
      ],
      "default": "ANDROMEDA_ADMIN"
    },
    "ApplicationAuthTypeMessageApplicationAuthType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "SAML",
        "SAML_WITH_PUSH_GROUPS",
        "OAUTH_OIDC",
        "MS_APP",
        "B2B_APP",
        "SHADOW_APP"
      ],
      "default": "UNSPECIFIED"
    },
    "AwsExternalServiceIdentitySubTypeMessageAwsExternalServiceIdentitySubType": {
      "type": "string",
      "enum": [
        "NOT_APPLICABLE",
        "IAM_USER",
        "IAM_ROLE",
        "IAM_ROOT",
        "OIDC_PROVIDER",
        "SAML_PROVIDER"
      ],
      "default": "NOT_APPLICABLE"
    },
    "AzureServiceIdentitySubTypeMessageAzureServiceIdentitySubType": {
      "type": "string",
      "enum": [
        "NOT_APPLICABLE",
        "USER_MANAGED_IDENTITY",
        "SYSTEM_MANAGED_IDENTITY",
        "ENTERPRISE_APPLICATION",
        "EXTERNAL_APPLICATION"
      ],
      "default": "NOT_APPLICABLE"
    },
    "BehaviorModelMessageBehaviorModel": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "GEO_TRUSTED_LOCATIONS"
      ],
      "default": "UNDEFINED"
    },
    "BrokerErrorCodeEnumBrokerErrorCode": {
      "type": "string",
      "enum": [
        "NO_ERROR",
        "INITIALIZATION_FAILED",
        "CONFIGURATION_INVALID",
        "AUTHENTICATION_FAILED",
        "PERMISSION_DENIED",
        "CONNECTION_TIMEOUT",
        "UNSUPPORTED_TASK_TYPE",
        "TASK_TIMEOUT",
        "INTERNAL_ERROR",
        "UNKNOWN_ERROR"
      ],
      "default": "NO_ERROR",
      "title": "- NO_ERROR: No error\n - INITIALIZATION_FAILED: Initialization errors\n - CONNECTION_TIMEOUT: Connection errors\n - UNSUPPORTED_TASK_TYPE: Task errors\n - INTERNAL_ERROR: System errors"
    },
    "BrokerHealthStatusEnumBrokerHealthStatus": {
      "type": "string",
      "enum": [
        "INITIALIZED",
        "CONNECTED",
        "FAILED",
        "DISCONNECTED"
      ],
      "default": "INITIALIZED",
      "title": "- INITIALIZED: INITIALIZED indicates that the broker object has been created but not yet fully operational\n - CONNECTED: HEALTHY indicates the broker is fully operational and functioning normally\n - FAILED: FAILED indicates the broker is not operational and requires intervention\n - DISCONNECTED: DISCONNECTED indicates that the broker is not connected Andromeda"
    },
    "BrokerProviderHealthStatusMessageBrokerProviderHealthStatus": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "HEALTHY",
        "UNHEALTHY"
      ],
      "default": "UNSPECIFIED"
    },
    "BrokerRegistrationResultMessageBrokerRegistrationResult": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "SUCCESS",
        "FAILED",
        "TIMEOUT"
      ],
      "default": "UNSPECIFIED"
    },
    "CampaignActionTypeMessageCampaignActionType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "CREATE_DRAFT",
        "START_CAMPAIGN",
        "ACTIVATE_CAMPAIGN",
        "COMPLETE_CAMPAIGN",
        "CANCEL_CAMPAIGN",
        "END_CAMPAIGN",
        "FORCE_REVOCATION_DONE",
        "ARCHIVE"
      ],
      "default": "UNSPECIFIED",
      "description": "Actions that can be done on Campaign instances.\n\n - START_CAMPAIGN: Start preparing the snapshot.\n - ACTIVATE_CAMPAIGN: Start the campaign officially, and assigns reviewers the access reviews.\n - COMPLETE_CAMPAIGN: This acknowledges that the campaign is complete and all reviews have been given, either fully or partially.\n - CANCEL_CAMPAIGN: Cancel midway."
    },
    "CampaignReviewerPersonaTypeMessageCampaignReviewerPersonaType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "IDENTITY",
        "MANAGER",
        "PROVIDER_OWNER",
        "SCOPE_OWNER"
      ],
      "default": "UNSPECIFIED"
    },
    "ConduitErrorCodeMessageConduitErrorCode": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "INVALID_REQUEST",
        "INVALID_RESPONSE",
        "TIMEOUT"
      ],
      "default": "UNSPECIFIED"
    },
    "ConduitTaskStatusMessageConduitTaskStatus": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "CREATED",
        "ASSIGNED",
        "DISPATCHED",
        "EXECUTED",
        "SUCCESS",
        "FAILED",
        "PENDING"
      ],
      "default": "UNSPECIFIED"
    },
    "ConduitTaskTypeMessageConduitTaskType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "QUERY_PROVIDER_CONFIG",
        "AD_LIST_USERS",
        "AD_LIST_GROUPS",
        "AD_REVOKE_GROUP_MEMBERSHIP",
        "AD_REVOKE_ROLE_ASSIGNMENT"
      ],
      "default": "UNSPECIFIED",
      "title": "- UNSPECIFIED: To do: add task category\n - QUERY_PROVIDER_CONFIG: Task to instruct broker to fetch provider config"
    },
    "ConsoleAccessSignificanceMessageConsoleAccessSignificance": {
      "type": "string",
      "enum": [
        "CONSOLE_ACTIVE",
        "CONSOLE_UNUSED_365_DAYS_PLUS",
        "CONSOLE_UNUSED_180_365_DAYS",
        "CONSOLE_UNUSED_90_180_DAYS",
        "CONSOLE_UNUSED_30_90_DAYS"
      ],
      "default": "CONSOLE_ACTIVE",
      "title": "- CONSOLE_ACTIVE: TIME BUCKETS"
    },
    "DeltaComputeOperationTypeEnumDeltaComputeOperationType": {
      "type": "string",
      "enum": [
        "DELTA_COMPUTE_OPERATION_TYPE_UNSPECIFIED",
        "RESOURCE_UPDATE",
        "RESOURCE_DELETE"
      ],
      "default": "DELTA_COMPUTE_OPERATION_TYPE_UNSPECIFIED"
    },
    "DeploymentModeMessageAWSDeploymentMode": {
      "type": "string",
      "enum": [
        "AWS_DEPLOYMENT_MODE_UNSPECIFIED",
        "AWS_IAM_LEGACY",
        "AWS_IAM_SSO_FEDERATED",
        "AWS_IDC_STANDALONE",
        "AWS_IDC_WITH_SSO"
      ],
      "default": "AWS_DEPLOYMENT_MODE_UNSPECIFIED"
    },
    "DiscoveredFromMessageDiscoveredFrom": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "INVENTORY",
        "ROLE_BINDING"
      ],
      "default": "UNSPECIFIED"
    },
    "EdgeTypeMessageEdgeType": {
      "type": "string",
      "enum": [
        "DIRECT",
        "INDIRECT"
      ],
      "default": "DIRECT"
    },
    "EligibilityConfigurationTypeMessageEligibilityConfigurationType": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "ROLE_ELIGIBILITY",
        "PROVIDER_ELIGIBILITY",
        "RESOURCE_SET_ELIGIBILITY"
      ],
      "default": "UNDEFINED"
    },
    "EligibilityRevocationBehaviourTypeMessageBehaviourType": {
      "type": "string",
      "enum": [
        "NO_ACTION",
        "TERMINATE_ACTIVE_SESSIONS"
      ],
      "default": "NO_ACTION",
      "description": " - NO_ACTION: If this is set and the eligibility is removed, only new access requests won't\nbe allowed and the PROVISIONED access requests stay as is.\n - TERMINATE_ACTIVE_SESSIONS: If this is set and the eligibility is removed, all active/scheduled requests are\nclosed and sessions ended."
    },
    "EnumsMatchCriteriaMessageEnumsMatchCriteria": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "IN",
        "NOT_IN"
      ],
      "default": "UNSPECIFIED",
      "description": " - IN: Matches any of the provider categories.\n - NOT_IN: Matches all of the provider categories."
    },
    "ExternalNhiInsightOperationTypeMessageExternalNhiInsightOperationType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "ADD",
        "REMOVE"
      ],
      "default": "UNSPECIFIED",
      "description": " - UNSPECIFIED: Default value indicating no specific operation set. This will be treated as an error.\n - ADD: Set the significance of the user to privileged user."
    },
    "ExternalUserStatusMessageExternalUserStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "ACTIVE",
        "INACTIVE",
        "DEPROVISIONED",
        "SUSPENDED"
      ],
      "default": "UNKNOWN"
    },
    "FeatureStatusMessageFeatureStatus": {
      "type": "string",
      "enum": [
        "DEACTIVATED",
        "ENABLED",
        "DEVELOPMENT",
        "EARLY_ACCESS",
        "SHADOW_DEPLOYMENT"
      ],
      "default": "DEACTIVATED"
    },
    "FeatureTypeMessageFeatureType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "USER_ACCESS_REVIEW",
        "CUSTOM_APPLICATION",
        "GCP",
        "GCP_ACCESS_MANAGEMENT",
        "ENTRA_ACCESS_MANAGEMENT",
        "OKTA_ACCESS_MANAGEMENT",
        "ANDROMEDA_PROXY",
        "OKTA_DEFAULT_NHI",
        "ENTRA_DEFAULT_NHI",
        "IRG",
        "INVENTORY_INGESTION_V2",
        "EMAIL_MERGE",
        "GCP_ROLE_RESOLUTION",
        "RESOURCE_LEVEL_ACCESS_MANAGEMENT",
        "POLICY_SEASONAL_BEHAVIOUR_MODEL",
        "GEO_LOCATION_BEHAVIOR_ANOMALY_MODEL",
        "DEVICE_BEHAVIOR_ANOMALY_MODEL",
        "AUTHENTICATION_BEHAVIOUR_MODEL"
      ],
      "default": "UNSPECIFIED"
    },
    "FeatureVersionMessageFeatureVersion": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "V1",
        "V2"
      ],
      "default": "UNSPECIFIED"
    },
    "FileUploaderServiceUploadFileBody": {
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string"
        },
        "fileType": {
          "$ref": "#/definitions/configFileType"
        }
      }
    },
    "FrequencyMessageFrequency": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "MINUTELY",
        "DAILY",
        "WEEKLY",
        "MONTHLY",
        "YEARLY"
      ],
      "default": "UNSPECIFIED",
      "title": "- MINUTELY: Default"
    },
    "GcpServiceIdentitySubTypeMessageGcpServiceIdentitySubType": {
      "type": "string",
      "enum": [
        "NOT_APPLICABLE",
        "USER_MANAGED_SERVICE_ACCOUNT",
        "SYSTEM_MANAGED_SERVICE_ACCOUNT"
      ],
      "default": "NOT_APPLICABLE"
    },
    "GroupTypeMessageGroupType": {
      "type": "string",
      "enum": [
        "GROUP_TYPE_UNSPECIFIED",
        "AWS_IAM",
        "AWS_IDC",
        "ENTRA",
        "OKTA",
        "GOOGLE_WORKSPACE",
        "ACTIVE_DIRECTORY",
        "PINGONE",
        "ATLAS",
        "GLOBAL",
        "IDP"
      ],
      "default": "GROUP_TYPE_UNSPECIFIED",
      "title": "- GLOBAL: Deprecated"
    },
    "IdMatchCriteriaMessageIdMatchCriteria": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "IN",
        "NOT_IN",
        "EQUALS",
        "NOT_EQUALS"
      ],
      "default": "UNSPECIFIED",
      "description": " - IN: Matches any of the provider categories.\n - NOT_IN: Matches all of the provider categories."
    },
    "IdentityDataIssueTypeMessageIdentityDataIssueType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "ORIGIN_DATA_INCONSISTENT",
        "ANOMALOUS"
      ],
      "default": "UNSPECIFIED"
    },
    "IdentityEligibilityAccessTypeMessageIdentityEligibilityAccessType": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "ROLE_ACCESS",
        "PROVIDER_ACCESS",
        "RESOURCE_SET_ACCESS",
        "RESOURCE_ACCESS"
      ],
      "default": "UNDEFINED"
    },
    "IdentityGroupTypeMessageIdentityGroupType": {
      "type": "string",
      "enum": [
        "GROUP_TYPE_UNSPECIFIED",
        "GLOBAL",
        "IAM",
        "IDP"
      ],
      "default": "GROUP_TYPE_UNSPECIFIED"
    },
    "IdentityOriginTypeMessageIdentityOriginType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "AWS_IAM",
        "AWS_IDC",
        "IDP",
        "HRIS",
        "ANDROMEDA",
        "AWS_IAM_SSO",
        "AWS_IDC_SCIM",
        "AWS_IAM_ROLE",
        "AZURE_ENTRA_DEPRECATED",
        "AZURE",
        "ENTRA",
        "IDP_APPLICATION",
        "AZURE_ENTRA",
        "CUSTOM_APPLICATION",
        "GOOGLE_WORKSPACE",
        "GCP",
        "SALESFORCE",
        "ACTIVE_DIRECTORY",
        "ATLAS_DATABASE",
        "ATLAS_MANAGEMENT"
      ],
      "default": "UNSPECIFIED",
      "title": "- AWS_IAM: Local IAM user created in an AWS account.\n - AWS_IDC: User manually created in the AWS Identity Center manually.\nThis happens when Identity center is enabled with SSO but\nThe SCIM protocol is not enabled.\n - IDP: User created in IDP system like OKTA.\n - HRIS: User created in HRIS system.\n - ANDROMEDA: User created in Andromeda system.\n - AWS_IAM_SSO: Logical user that Andromeda resolves in the AWS provider.\n - AWS_IDC_SCIM: User is synced from the IDP via SCIM to AWS.\n - AWS_IAM_ROLE: Service identity user created from IAM Roles\n - AZURE_ENTRA_DEPRECATED: DEPRECATED\n - AZURE: referenced entra users that can access azure\n - ENTRA: entra users\n - IDP_APPLICATION: References IDP users in IDP application\n - AZURE_ENTRA: temp backward compatability\n - CUSTOM_APPLICATION: User as part of custom application provider"
    },
    "IdentityScimStatusTypeMessageIdentityScimStatusType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "SCIM",
        "MANUAL"
      ],
      "default": "UNSPECIFIED"
    },
    "IdentitySignificanceCategoryMessageIdentitySignificanceCategory": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "POSTURE",
        "ACTIVITY",
        "PRIVILEGE"
      ],
      "default": "UNSPECIFIED"
    },
    "IdentitySignificanceTypeMessageIdentitySignificanceType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "ACCOUNT_OWNER",
        "ACCOUNT_ADMIN",
        "INACTIVE",
        "PROVIDER_OWNER",
        "RISK_ACCEPTED",
        "SUPER_ADMIN",
        "LOCAL_IDENTITY",
        "NON_COMPLIANT",
        "IDENTITY_DATA_INCONSISTENCY",
        "CROSS_ACCOUNT_WITH_CRITICALITY_ESCALATION",
        "DEACTIVATED_USER_WITH_POLICY_BINDINGS",
        "INACTIVE_30_90_DAYS",
        "INACTIVE_90_180_DAYS",
        "INACTIVE_180_365_DAYS",
        "INACTIVE_365_DAYS_PLUS",
        "KEY_INACTIVE_30_90_DAYS",
        "KEY_INACTIVE_90_180_DAYS",
        "KEY_INACTIVE_180_365_DAYS",
        "KEY_INACTIVE_365_DAYS_PLUS",
        "MFA_INCONSISTENCY",
        "PRIVILEGED_USER"
      ],
      "default": "UNSPECIFIED",
      "title": "- ACCOUNT_OWNER: Identities that are marked owners for an account.\n - ACCOUNT_ADMIN: Identity has admin level privileges in the account determined by either access to\nmanaged roles like AWSAdministratorAccess or IAM admin permissions like \u003cTBD\u003e\n - INACTIVE: The identity has not exhibited any activity for 90 days in this account or provider.\n - PROVIDER_OWNER: The identity is a provider owner\n - RISK_ACCEPTED: Identities whos risk has been accepted in the account. The standing policies\nthat have high blast risk are not included in account's risk calculation.\n - SUPER_ADMIN: Identities that have super admin privileges like IAM admin permissions like \u003cTBD\u003e\n - LOCAL_IDENTITY: IDC user with local IAM Identities\nLocal IAM users when provider is setup with the AWS IDC\n - NON_COMPLIANT: Identity state is non-compliant across the IDP (deactivated) and Provider (active).\n - IDENTITY_DATA_INCONSISTENCY: Identity data is inconsistent across different sources.\nDeprecated.\n - CROSS_ACCOUNT_WITH_CRITICALITY_ESCALATION: Cross account access with criticality escalation\n - DEACTIVATED_USER_WITH_POLICY_BINDINGS: Deactivated User with policy bindings\n - KEY_INACTIVE_30_90_DAYS: These would replace the inactive Key types\n - PRIVILEGED_USER: TODO(AS-2495)\nIf identity has one of the sources (incarnation) as a privileged user defined\nby the identity mapping policy"
    },
    "IdentityUsernameMatchCriteriaMessageIdentityUsernameMatchCriteria": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "IN",
        "NOT_IN",
        "EQUALS",
        "CONTAINS",
        "STARTS_WITH",
        "ENDS_WITH",
        "REGEX"
      ],
      "default": "UNSPECIFIED",
      "description": " - IN: Matches any of the provider categories.\n - NOT_IN: Matches all of the provider categories."
    },
    "ItsmTypeMessageItsmType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "JIRA"
      ],
      "default": "UNSPECIFIED"
    },
    "JitPolicyAndromedaReviewRuleActionMessageRuleAction": {
      "type": "string",
      "enum": [
        "PASS",
        "ASK_FOR_REVIEW"
      ],
      "default": "PASS"
    },
    "JitPolicyAndromedaReviewStatusMessageAndromedaReviewStatus": {
      "type": "string",
      "enum": [
        "ASK_FOR_REVIEW",
        "APPROVED"
      ],
      "default": "ASK_FOR_REVIEW"
    },
    "JitPolicyAssignReviewerPersonaTypeMessagePersonaType": {
      "type": "string",
      "enum": [
        "IDENTITY",
        "GROUP_MEMBER",
        "PROVIDER_SUPER_ADMIN",
        "MANAGER"
      ],
      "default": "IDENTITY"
    },
    "JitPolicyRequestAnalysisCheckStatusMessageRequestAnalysisCheckStatus": {
      "type": "string",
      "enum": [
        "SKIPPED",
        "PASSED",
        "FAILED"
      ],
      "default": "SKIPPED"
    },
    "JitPolicyRequestUserActionTypeMessageActionType": {
      "type": "string",
      "enum": [
        "OPEN",
        "EXTENSION",
        "CLOSE"
      ],
      "default": "OPEN",
      "description": " - EXTENSION: Users can REQUEST an extension to the JIT session\n - CLOSE: Users/admins can CLOSE the request if the access is no longer required,\nor if the request is no longer valid or when a new request has to be created\nwith updated details."
    },
    "JitPolicyReviewStatusMessageReviewerReviewStatus": {
      "type": "string",
      "enum": [
        "QUEUED",
        "ASSIGNED",
        "APPROVED",
        "REJECTED",
        "DISMISSED"
      ],
      "default": "QUEUED",
      "description": " - QUEUED: These reviews are waiting for previous level reviews to be completed.\n - ASSIGNED: The review is awaiting approval.\n - APPROVED: The request was approved by the reviewer.\n - REJECTED: The request was rejected by the reviewer.\n - DISMISSED: Request has moved on from review in progress state."
    },
    "JitPolicyTransactionStatusTypeMessageAccessRequestStatus": {
      "type": "string",
      "enum": [
        "CREATED",
        "REQUEST_ANALYSIS_IN_PROGRESS",
        "REQUEST_ANALYZED",
        "REVIEW_IN_PROGRESS",
        "APPROVED",
        "SCHEDULED_FOR_PROVISIONING",
        "WAITING_FOR_MANUAL_PROVISIONING",
        "PROVISIONING_IN_PROGRESS",
        "PROVISIONED",
        "DEPROVISIONING_IN_PROGRESS",
        "WAITING_FOR_MANUAL_DEPROVISIONING",
        "DEPROVISIONED",
        "SESSION_ANALYSIS_PENDING",
        "CANCELLATION_IN_PROGRESS",
        "REJECTED",
        "FAILED",
        "TIMED_OUT",
        "CLOSED",
        "COMPLETED"
      ],
      "default": "CREATED",
      "description": " - CREATED: Initial status of the JitPolicyRequest when it is created by the User.\nThe JitPolicyTransaction is created right after the JitPolicyRequest is created\nwith this status (as a transaction). The transaction, is initialized with\nstatus \"CREATED\".\n - REQUEST_ANALYSIS_IN_PROGRESS: A JitPolicyTransaction is marked SUBMITTED once the JIT Controller reads/registers\nthe \"CREATED\" JIT Request.\nThe JIT Controller must be active to mark the JIT Transaction as SUBMITTED.\nAs part of the Controller processing, the Request is also sent for Request Analysis\nby the Andromeda system.\n - REQUEST_ANALYZED: A JitPolicyTransaction is marked REQUEST_ANALYZED when the JIT Controller gets\na response from the analyzer system.\nAs part of the Controller processing, the Request is also assigned Reviewers\nand Reviewers are notified. The Reviewers can, at this point, view the analyzed\nJIT Policy Request, and approval/reject the Request.\n - REVIEW_IN_PROGRESS: JitPolicyRequest is marked REVIEW_IN_PROGRESS once initial set of Reviewers are notified.\nAndromeda System then waits for the Approval/Rejection/Timeout of the Reviewers.\nThe Request stays in this state until all the required Reviewers have responded.\n - APPROVED: JitPolicyRequest is APPROVED once all Reviewers have APPROVED.\n - SCHEDULED_FOR_PROVISIONING: JitPolicyRequest is SCHEDULED_FOR_PROVISIONING for a future time, once it has been APPROVED.\nThe startTime for the Provisioning is asked as part of the JitPolicyRequest creation.\n - WAITING_FOR_MANUAL_PROVISIONING: The Request is WAITING_FOR_MANUAL_PROVISIONING to be completed, when request profile has\nmanual provisioning/deprovisioning enabled.\n - PROVISIONING_IN_PROGRESS: Transient\n - PROVISIONED: JIT Session is PROVISIONED and the User can access the resources.\nAfter the Provisioning, the Request is scheduled for Deprovisioning.\n - DEPROVISIONING_IN_PROGRESS: Transient\n - WAITING_FOR_MANUAL_DEPROVISIONING: The Request is WAITING_FOR_MANUAL_DEPROVISIONING to be completed, when request profile has\nmanual provisioning/deprovisioning enabled.\n - DEPROVISIONED: JIT Session is DEPROVISIONED and the User can no longer access the resources.\nAfter the successful DeProvisioning, the JIT Controller schedules a check to validate whether\nthe Policy has been Deprovisioned for the User.\n - SESSION_ANALYSIS_PENDING: Once the JIT Controller detects a deprovisioned action, the Session is marked\nas pending for analysis by the Session summarizer.\n - CANCELLATION_IN_PROGRESS: Access request status is marked as CANCELLATION_IN_PROGRESS when:\n1. The Requester manually ends the session. Here the controller will be cleaning up\n  running processes for the request.\n - REJECTED: JitPolicyRequest is REJECTED once a Reviewer rejects the Request.\nThis is a terminal state.\n - FAILED: JIT processing failed during any of the previous steps.\nThis is a terminal state.\n - TIMED_OUT: Request is Time out when start time passes and review is not approved.\nThis is a terminal state.\n - CLOSED: Request is closed before PROVISIONED.\nThis is a terminal state.\n - COMPLETED: JitPolicyRequest is marked as COMPLETED from either:\n1. The Requester manually ending the Session after it is Provisioned, or\n2. The Controller archiving it once the Session has been analyzed in the end, or\nThis is a terminal state."
    },
    "JobStateEnumJobState": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "ANY",
        "RUNNING",
        "SUCCESS",
        "PENDING",
        "FAILED",
        "UNKNOWN",
        "TERMINATED",
        "RETRY"
      ],
      "default": "UNDEFINED",
      "description": " - ANY: *USE IN FILTER ONLY*\nANY is used to filter for all job states at once."
    },
    "JobStatusScopeEnumJobStatusScope": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "TENANT",
        "PROVIDER",
        "ACCOUNT",
        "ALL"
      ],
      "default": "UNDEFINED"
    },
    "JobTypeEnumJobType": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "ANY",
        "INVENTORY_FULL_SYNC_INGEST",
        "RISK",
        "LSP",
        "AUDIT_TRAIL_SYNC",
        "INVENTORY_FULL_SYNC_DIGEST",
        "QUERY_CACHE",
        "GRAPH_DIAGNOSTIC"
      ],
      "default": "UNDEFINED",
      "description": " - ANY: *USE IN FILTER ONLY*\nANY is used to filter for all job types at once."
    },
    "KeyRiskCategoryMessageKeyRiskCategory": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "POSTURE"
      ],
      "default": "UNSPECIFIED"
    },
    "KeyRiskFactorTypeMessageKeyRiskFactorType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "KEY_HYGIENE"
      ],
      "default": "UNSPECIFIED"
    },
    "KeySignificanceCategoryMessageKeySignificanceCategory": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "POSTURE",
        "ACTIVITY"
      ],
      "default": "UNSPECIFIED"
    },
    "KeySignificanceTypeMessageKeySignificanceType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "UNUSED_30_90_DAYS",
        "UNUSED_90_180_DAYS",
        "UNUSED_180_365_DAYS",
        "UNUSED_365_DAYS_PLUS"
      ],
      "default": "UNSPECIFIED",
      "title": "- UNUSED_30_90_DAYS: Category: ACTIVITY"
    },
    "KeyTypeMessageKeyType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "OKTA",
        "AWS_IAM",
        "AZURE_CLIENT_SECRET",
        "AZURE_CERTIFICATE",
        "AZURE_STORAGE_ACCOUNT_KEY",
        "GCP_USER_MANAGED_SERVICE_ACCOUNT_KEY",
        "GCP_SYSTEM_MANAGED_SERVICE_ACCOUNT_KEY"
      ],
      "default": "UNSPECIFIED"
    },
    "MatchTypeMessageMatchType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "EXACT",
        "WILDCARD",
        "PREFIX"
      ],
      "default": "UNSPECIFIED"
    },
    "MfaFactorTypeMessageMfaFactorType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "CALL",
        "EMAIL",
        "PUSH",
        "QUESTION",
        "SIGNED_NONCE",
        "SMS",
        "TOKEN_HARDWARE",
        "TOKEN_HOTP",
        "TOKEN_SOFTWARE_TOTP",
        "TOKEN",
        "U2F",
        "WEB",
        "WEBAUTHN"
      ],
      "default": "UNSPECIFIED"
    },
    "MfaStrengthMessageMfaStrength": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "UNRESOLVED",
        "NONE",
        "WEAK",
        "STRONG",
        "NOT_APPLICABLE"
      ],
      "default": "UNSPECIFIED",
      "title": "- UNSPECIFIED: default state for no mfa data\n - UNRESOLVED: API resolution failures where data is not available"
    },
    "ModelBasedAnalysisRecommendationMessageRecommendation": {
      "type": "string",
      "enum": [
        "SKIPPED",
        "APPROVED",
        "REJECTED"
      ],
      "default": "SKIPPED"
    },
    "OperationStatusMessageOperationStatus": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "IN_PROGRESS",
        "COMPLETED",
        "FAILED"
      ],
      "default": "UNSPECIFIED"
    },
    "OriginalEventSourceEnumOriginalEventSource": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "AZURE_EVENT_HUB",
        "AZURE_BLOB_STORAGE",
        "AZURE_ANALYTICS_WORKSPACE"
      ],
      "default": "UNSPECIFIED"
    },
    "PolicyAssignmentTypeMessagePolicyAssignmentType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "IAM_ASSIGNMENT",
        "RESOURCE_ASSIGNMENT"
      ],
      "default": "UNSPECIFIED"
    },
    "PolicyBindingTypeMessagePolicyBindingType": {
      "type": "string",
      "enum": [
        "STANDING",
        "JIT_ACTIVE",
        "RECOMMENDED",
        "LATERAL",
        "BAD_BINDING"
      ],
      "default": "STANDING"
    },
    "PolicyLastUsedAtDataSourceMessagePolicyLastUsedAtDataSource": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "INVENTORY",
        "LOGS"
      ],
      "default": "UNSPECIFIED"
    },
    "PolicyRecommendationTypeMessagePolicyRecommendationType": {
      "type": "string",
      "enum": [
        "POLICY_RECOMMENDATION_TYPE_UNSPECIFIED",
        "POLICY_RECOMMENDATION_TYPE_USAGE_BASED",
        "POLICY_RECOMMENDATION_TYPE_EXPAND_LOWRISK"
      ],
      "default": "POLICY_RECOMMENDATION_TYPE_UNSPECIFIED",
      "title": "- POLICY_RECOMMENDATION_TYPE_USAGE_BASED: Usage-based flow - only includes permissions that have been used in the past\n - POLICY_RECOMMENDATION_TYPE_EXPAND_LOWRISK: Read metadata flow - includes used permissions plus List/Read/ReadMetadata permissions for services used in the past"
    },
    "PolicySignificanceCategoryMessagePolicySignificanceCategory": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "POSTURE",
        "ACTIVITY",
        "PRIVILEGE"
      ],
      "default": "UNSPECIFIED"
    },
    "PolicySignificanceTypeMessagePolicySignificanceType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "USED_BY_MULTIPLE_NON_HUMAN_IDENTITIES",
        "UNUSED_30_90_DAYS",
        "UNUSED_90_180_DAYS",
        "UNUSED_180_365_DAYS",
        "UNUSED_365_DAYS_PLUS",
        "NOT_ALL_ASSIGNMENTS_USED_365_DAYS_PLUS",
        "OVERPROVISIONED",
        "HAS_IMPROPER_TRUST",
        "ADMIN_PRIVILEDGE"
      ],
      "default": "UNSPECIFIED",
      "title": "- USED_BY_MULTIPLE_NON_HUMAN_IDENTITIES: Policies that are used by multiple non-human identities.\nCategory: POSTURE\n - UNUSED_30_90_DAYS: These are policies that are not used by any of the identities in the account\nIn the Policy Details page it will have zero used.\nFrom grounding perpective - need to show the list of the policies in the account\nthat are not used and for each one we can show the policy details.\nAs high priority only implement the unused policies.\nCategory: ACTIVITY\n - NOT_ALL_ASSIGNMENTS_USED_365_DAYS_PLUS: Policies that have only used by some of the identities who have access to the account\nThese assignements can be removed from the identity. Note, when assignment is via\ngroup then group members need to be identified who needs to be removed from the list.\nPARTIAL_ASSIGNMENTS_USED\nThese are computed based on unused of\nCategory: POSTURE\n - OVERPROVISIONED: These policies are overprovisioned in the account.\nIt is basically used/total permissions \u003c 10 %.\nThese are tagged only for High Risk Policies. I am divided as we can always\ncombine high blast risk with overprovisioned and get the same result.\nCategory: PRIVILEGE\n - HAS_IMPROPER_TRUST: Policies having self trusted roles\n - ADMIN_PRIVILEDGE: Policies that have admin permissions.\nCategory: PRIVILEGE"
    },
    "PrincipalOriginTypeMessagePrincipalOriginType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "AWS_IAM",
        "AWS_IDC",
        "IDP",
        "HRIS",
        "ANDROMEDA",
        "AWS_IAM_SSO",
        "AWS_IDC_SCIM",
        "AWS_IAM_ROLE",
        "AZURE_ENTRA_DEPRECATED",
        "AZURE",
        "ENTRA",
        "GCP",
        "GOOGLE_WORKSPACE"
      ],
      "default": "UNSPECIFIED",
      "title": "- AWS_IAM: Local IAM user/group/policy created in an AWS Account.\n - AWS_IDC: User/Group/Policy manually created in the AWS Identity Center.\nThis happens when Identity Center is enabled with SSO but\nThe SCIM protocol is not enabled.\n - IDP: User/Group/Policy created in IDP system like OKTA.\n - HRIS: User/Group/Policy created in HRIS system.\n - ANDROMEDA: User/Group/Policy created in Andromeda system.\n - AWS_IAM_SSO: Logical user/group/policy that Andromeda resolves in the AWS provider.\n - AWS_IDC_SCIM: User/Group/Policy synced from the IDP via SCIM to AWS.\n - AWS_IAM_ROLE: Service Identity user/group/policy created from IAM Roles\n - AZURE_ENTRA_DEPRECATED: User/Group/Policy in Azure Directory\n - AZURE: User/Group/Policy in Azure\n - ENTRA: User/Group/Policy in Entra\n - GCP: User/Group/Policy in GCP\n - GOOGLE_WORKSPACE: User/Group/Policy in Google Workspace"
    },
    "PriorityMessagePriority": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "NORMAL",
        "HIGH"
      ],
      "default": "UNSPECIFIED"
    },
    "ProviderAssignmentTypeMessageProviderAssignmentType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "STANDING",
        "JIT",
        "LATERAL",
        "BAD_ASSIGNMENT"
      ],
      "default": "UNSPECIFIED"
    },
    "ProviderPolicyTypeMessageProviderPolicyType": {
      "type": "string",
      "enum": [
        "PROVIDER_POLICY_TYPE_UNSPECIFIED",
        "AWS_CUSTOMER_MANAGED_POLICY",
        "AWS_MANAGED_POLICY",
        "AWS_INLINE_POLICY",
        "AZURE_BUILTIN_ROLE",
        "AZURE_CUSTOM_ROLE",
        "GCP_BUILTIN_ROLE",
        "GCP_CUSTOM_ROLE",
        "ENTRA_BUILTIN_ROLE",
        "ENTRA_CUSTOM_ROLE",
        "SFDC_STANDARD_PERMISSION_SET",
        "SFDC_CUSTOM_PERMISSION_SET",
        "SFDC_STANDARD_PROFILE",
        "SFDC_CUSTOM_PROFILE",
        "WORKSPACE_BUILTIN_ROLE",
        "WORKSPACE_CUSTOM_ROLE",
        "PINGONE_BUILTIN_ROLE",
        "PINGONE_CUSTOM_ROLE"
      ],
      "default": "PROVIDER_POLICY_TYPE_UNSPECIFIED"
    },
    "ProviderServiceTriggerInventoryIngestionBody": {
      "type": "object"
    },
    "ProviderUtilityServicePauseInventoryIngestionBody": {
      "type": "object"
    },
    "ProviderUtilityServiceTriggerHistoricalLogsWorkflowBody": {
      "type": "object"
    },
    "ProviderUtilityServiceTriggerRealtimeLogsWorkflowBody": {
      "type": "object"
    },
    "ProviderUtilityServiceUnpauseInventoryIngestionBody": {
      "type": "object"
    },
    "RecommendationStateMessageRecommendationState": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "ACTIVE",
        "SNOOZED",
        "IGNORED"
      ],
      "default": "UNSPECIFIED",
      "title": "- SNOOZED: snoozed for some time (2 weeks etc)\n - IGNORED: never shown again irrespective of severity"
    },
    "RecommendationTypeMessageRecommendationType": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "INSIGHT_INACTIVE_POLICY_GT_365_DAYS",
        "INSIGHT_INACTIVE_POLICY_GT_180_DAYS",
        "INSIGHT_INACTIVE_POLICY_GT_90_DAYS",
        "HI_POSTURE_RISK_KEY_HYGIENE_INACTIVE_KEYS_GT_365_DAYS",
        "HI_POSTURE_RISK_KEY_HYGIENE_INACTIVE_KEYS_GT_180_DAYS",
        "HI_POSTURE_RISK_KEY_HYGIENE_INACTIVE_KEYS_GT_90_DAYS",
        "NHI_POSTURE_RISK_KEY_HYGIENE_INACTIVE_KEYS_GT_365_DAYS",
        "NHI_POSTURE_RISK_KEY_HYGIENE_INACTIVE_KEYS_GT_180_DAYS",
        "NHI_POSTURE_RISK_KEY_HYGIENE_INACTIVE_KEYS_GT_90_DAYS",
        "HI_POSTURE_RISK_STALE",
        "NHI_POSTURE_INSIGHT_EKS_HYGIENE",
        "NHI_POSTURE_RISK_CONSOLE_ACCESS",
        "NHI_PRIVILEGE_RISK_OVERPRIVILEGED_ROLE",
        "IDP_APPLICATION_POSTURE_INSIGHT_WITHOUT_ASSIGNED_IDENTITIES",
        "IDP_APPLICATION_POSTURE_INSIGHT_WITHOUT_ACTIVE_IDENTITIES",
        "HI_POSTURE_RISK_KEY_HYGIENE_ACCESS_KEY_INACTIVE_GT_365_DAYS",
        "HI_POSTURE_RISK_KEY_HYGIENE_ACCESS_KEY_INACTIVE_GT_180_DAYS",
        "HI_POSTURE_RISK_KEY_HYGIENE_ACCESS_KEY_INACTIVE_GT_90_DAYS",
        "NHI_POSTURE_RISK_KEY_HYGIENE_ACCESS_KEY_INACTIVE_GT_365_DAYS",
        "NHI_POSTURE_RISK_KEY_HYGIENE_ACCESS_KEY_INACTIVE_GT_180_DAYS",
        "NHI_POSTURE_RISK_KEY_HYGIENE_ACCESS_KEY_INACTIVE_GT_90_DAYS",
        "HI_POSTURE_RISK_KEY_HYGIENE_ACCESS_KEY_INACTIVE_GT_30_DAYS",
        "NHI_POSTURE_RISK_KEY_HYGIENE_ACCESS_KEY_INACTIVE_GT_30_DAYS",
        "HI_POSTURE_RISK_KEY_HYGIENE_ACCESS_KEY_ACTIVE",
        "NHI_POSTURE_RISK_KEY_HYGIENE_ACCESS_KEY_ACTIVE"
      ],
      "default": "UNDEFINED",
      "title": "- HI_POSTURE_RISK_KEY_HYGIENE_INACTIVE_KEYS_GT_365_DAYS: HI_POSTURE_RISK_STALE_IDP = 4 [\n    (utils.recommendation_type_options) = {\n      priority: 200,\n      provider_recommendation: true,\n      account_recommendation: true,\n      severity: HIGH,\n      category: POSTURE_RISK,\n      recommendation_origin_type: HUMAN\n    }\n  ];\n  HI_POSTURE_RISK_STALE_LOCAL_ACCOUNTS = 5 [\n    (utils.recommendation_type_options) = {\n      priority: 300,\n      provider_recommendation: true,\n      account_recommendation: true,\n      severity: HIGH,\n      category: POSTURE_RISK,\n      recommendation_origin_type: HUMAN\n    }\n  ];"
    },
    "RecommendationTypeStateMessageRecommendationTypeState": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "ACTIVATED",
        "DEACTIVATED"
      ],
      "default": "UNSPECIFIED"
    },
    "RemediationTypeMessageRemediationType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "POLICY",
        "STALE_IDENTITY",
        "HUMAN_IDENTITY_ACCESS_KEY",
        "NON_HUMAN_IDENTITY_ACCESS_KEY",
        "STALE_USER",
        "EKS_OIDC_NHI",
        "BAD_BINDING",
        "NHI_WITH_NO_POLICY_BINDINGS",
        "ACCESS_KEY",
        "REMOVE_NHI_CONSOLE_ACCESS"
      ],
      "default": "UNSPECIFIED"
    },
    "RequestAnalysisConditionCategoryMessageRequestAnalysisConditionCategory": {
      "type": "string",
      "enum": [
        "POLICY_RISK",
        "IDENTITY_DISABLED",
        "IDENTITY_TERMINATION_DATE",
        "POLICY_NAME",
        "POLICY_USAGE_BEHAVIOUR_MODEL",
        "GEOLOCATION_ANOMALY_MODEL",
        "DEVICE_PATTERN_ANOMALY_MODEL",
        "AUTHENTICATION_BEHAVIOUR_MODEL",
        "GEO_LOCATION_BEHAVIOR_ANOMALY_MODEL",
        "DEVICE_BEHAVIOR_ANOMALY_MODEL",
        "POLICY_SEASONAL_BEHAVIOUR_MODEL"
      ],
      "default": "POLICY_RISK"
    },
    "ResourceSetEligibilityConstraintMessageResourceSetEligibilityConstraint": {
      "type": "string",
      "enum": [
        "REQUIRES_SPECIFIC_RESOURCES_SELECTION",
        "ALLOWS_SINGLE_REQUEST_FOR_ALL_RESOURCES"
      ],
      "default": "REQUIRES_SPECIFIC_RESOURCES_SELECTION",
      "title": "- REQUIRES_SPECIFIC_RESOURCES_SELECTION: User needs to select specific resources from the resource set\n - ALLOWS_SINGLE_REQUEST_FOR_ALL_RESOURCES: User can request access to the whole resource set in a single access request"
    },
    "ResourceTypeMessageResourceType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "AWS_EKS_CLUSTER",
        "AWS_OIDC_PROVIDER",
        "AWS_SAML_PROVIDER",
        "AWS_EC2_INSTANCE",
        "AWS_S3_BUCKET",
        "AWS_RDS_INSTANCE",
        "AWS_SECRETS_MANAGER",
        "GCP_SERVICE_ACCOUNT",
        "GCP_STORAGE_BUCKET",
        "ATLAS_DATABASE_DB",
        "AZURE_STORAGE_ACCOUNT",
        "AZURE_BLOB_CONTAINER"
      ],
      "default": "UNSPECIFIED",
      "title": "- AWS_EKS_CLUSTER: AWS Services\n - GCP_SERVICE_ACCOUNT: GCP Services"
    },
    "RevocationOperationTypeMessageRevocationOperationType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "REVOKE_ROLE_ASSIGNMENT",
        "REVOKE_GROUP_MEMBERSHIP",
        "REVOKE_PROVIDER_DIRECT_ASSIGNMENT",
        "REVOKE_APP_ASSIGNMENT",
        "REVOKE_RESOURCE_SET_ASSIGNMENT"
      ],
      "default": "UNSPECIFIED"
    },
    "RiskLevelMessageRiskLevel": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "LOW",
        "MEDIUM",
        "HIGH"
      ],
      "default": "UNSPECIFIED"
    },
    "RoleTrustConditionTypeMessageRoleTrustConditionType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "NULL",
        "STRING_EQUALS",
        "STRING_NOT_EQUALS",
        "STRING_EQUALS_IGNORE_CASE",
        "STRING_NOT_EQUALS_IGNORE_CASE",
        "STRING_LIKE",
        "STRING_NOT_LIKE"
      ],
      "default": "UNKNOWN"
    },
    "SalesforceAuthModeMessageSalesforceAuthMode": {
      "type": "string",
      "enum": [
        "SALESFORCE_AUTHMODE_UNSPECIFIED",
        "SALESFORCE_AUTHMODE_REFRESH_CODE",
        "SALESFORCE_AUTHMODE_USERNAME_PASSWORD"
      ],
      "default": "SALESFORCE_AUTHMODE_UNSPECIFIED"
    },
    "ScopeTypeEnumScopeType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "PROVIDER",
        "FOLDER",
        "ACCOUNT",
        "RESOURCE_GROUP",
        "GROUP",
        "IDP_APPLICATION",
        "RESOURCE"
      ],
      "default": "UNSPECIFIED"
    },
    "ServiceCriticalityLevelEnumServiceCriticalityLevel": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "LOW",
        "MEDIUM",
        "HIGH",
        "CRITICAL"
      ],
      "default": "UNDEFINED"
    },
    "ServiceIdentitySignificanceCategoryMessageServiceIdentitySignificanceCategory": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "POSTURE",
        "ACTIVITY",
        "PRIVILEGE"
      ],
      "default": "UNSPECIFIED"
    },
    "ServiceIdentitySignificanceTypeMessageServiceIdentitySignificanceType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "INACTIVE",
        "RISK_ACCEPTED",
        "ADMIN_PRIVILEGES",
        "CROSS_ACCOUNT_WITH_CRITICALITY_ESCALATION",
        "SUPER_ADMIN",
        "ACCOUNT_ADMIN",
        "EKS_CLUSTER_NOT_FOUND",
        "OIDC_PROVIDER_NOT_FOUND",
        "MULTIPLE_BINDINGS_FOR_EKS",
        "SAML_PROVIDER_NOT_FOUND",
        "EKS_SERVICE_ACCOUNT_WITHOUT_CONSTRAINT",
        "EKS_SERVICE_ACCOUNT_WITH_INVALID_TRUST",
        "MULTIPLE_NHIS_SHARE_SAME_AWS_ROLE",
        "INACTIVE_30_90_DAYS",
        "INACTIVE_90_180_DAYS",
        "INACTIVE_180_365_DAYS",
        "INACTIVE_365_DAYS_PLUS",
        "KEY_INACTIVE_30_90_DAYS",
        "KEY_INACTIVE_90_180_DAYS",
        "KEY_INACTIVE_180_365_DAYS",
        "KEY_INACTIVE_365_DAYS_PLUS",
        "CONSOLE_ACCESS_UNUSED_30_90_DAYS",
        "CONSOLE_ACCESS_UNUSED_90_180_DAYS",
        "CONSOLE_ACCESS_UNUSED_180_365_DAYS",
        "CONSOLE_ACCESS_UNUSED_365_DAYS_PLUS",
        "NHI_WITH_NO_POLICY_BINDINGS",
        "OVERPRIVILEGED_ROLE",
        "UNUSED_ROLE",
        "EXTERNAL_CLIENT"
      ],
      "default": "UNSPECIFIED",
      "description": " - CROSS_ACCOUNT_WITH_CRITICALITY_ESCALATION: Anyone of the owners is a stale owner or deactived owner.\nCross account access with criticality escalation\n - SUPER_ADMIN: Deprecated\n - ACCOUNT_ADMIN: Deprecated\n - EKS_CLUSTER_NOT_FOUND: If a service identity has some inconsistency\n - MULTIPLE_NHIS_SHARE_SAME_AWS_ROLE: multiple service identities that were discovered from the same role\n - INACTIVE_30_90_DAYS: last activity seen.\n - NHI_WITH_NO_POLICY_BINDINGS: NHI with no policy bindings\n - OVERPRIVILEGED_ROLE: NHI has over provisioned permissions for this assignment in the context.\n - UNUSED_ROLE: NHI has unused assignments permissions in the context.\n - EXTERNAL_CLIENT: If an NHI is externally used. This will automatically include AWS external NHIs and\nany NHI that is local but used by an external client."
    },
    "ServiceIdentityStatusMessageServiceIdentityStatus": {
      "type": "string",
      "enum": [
        "SERVICE_IDENTITY_STATUS_UNSPECIFIED",
        "ENABLED",
        "STALE"
      ],
      "default": "SERVICE_IDENTITY_STATUS_UNSPECIFIED",
      "description": " - ENABLED: Deprecated\nSTALE = 2;\n - STALE: If a service identity exists but it's not able to perform anything. For example, NHI of type EKS where EKS cluster is deleted."
    },
    "ServiceIdentityTypeMessageServiceIdentityType": {
      "type": "string",
      "enum": [
        "SERVICE_IDENTITY_TYPE_UNSPECIFIED",
        "AWS_IAM_USER",
        "AWS_SERVICE_LINKED_ROLE",
        "AWS_SERVICE_ROLE",
        "AWS_EXTERNAL",
        "SERVICE_IDENTITY_UNRESOLVED",
        "EKS_SERVICE_ACCOUNT",
        "OKTA_SERVICE_IDENTITY",
        "AWS_SAML_PROVIDER",
        "AWS_OIDC_PROVIDER",
        "COGNITO_IDENTITY",
        "AZURE_ENTERPRISE_APPLICATION",
        "AZURE_SYSTEM_MANAGED_IDENTITY",
        "AZURE_USER_MANAGED_IDENTITY",
        "MICROSOFT_APPLICATION",
        "SERVICE_PRINCIPAL",
        "AZURE_STORAGE_ACCOUNT",
        "GCP_SERVICE_ACCOUNT",
        "ENTRA_SERVICE_ACCOUNT",
        "GCP_API_KEY",
        "SALESFORCE_SERVICE_IDENTITY",
        "AWS_IDC_SERVICE_IDENTITY",
        "PINGONE_SERVICE_IDENTITY",
        "ACTIVE_DIRECTORY_SERVICE_IDENTITY",
        "PINGONE_WORKER_APP",
        "CUSTOM_APP_SERVICE_IDENTITY"
      ],
      "default": "SERVICE_IDENTITY_TYPE_UNSPECIFIED",
      "title": "- AWS_EXTERNAL: Deprecated\nAWS_INSTANCE_PROFILE = 4;\n - SERVICE_IDENTITY_UNRESOLVED: flag as exception"
    },
    "ServiceTypeMessageServiceType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "AWS_EC2",
        "AWS_S3",
        "AWS_RDS",
        "AWS_EKS",
        "AWS_IAM",
        "AWS_SECRETS_MANAGER",
        "GCP_IAM",
        "GCP_STORAGE",
        "AZURE_STORAGE"
      ],
      "default": "UNSPECIFIED",
      "title": "- AWS_EC2: AWS Services\n - GCP_IAM: GCP Services\n - AZURE_STORAGE: Azure Services"
    },
    "ShadowAppsServiceTriggerShadowAppsWorkflowBody": {
      "type": "object"
    },
    "SignificanceCategoryMessageSignificanceCategory": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "POSTURE",
        "ACTIVITY",
        "PRIVILEGE"
      ],
      "default": "UNSPECIFIED"
    },
    "StringTransformOpMessageStringTransformOp": {
      "type": "string",
      "enum": [
        "UNSPECFIIED",
        "LOWERCASE",
        "REGEX",
        "REPLACE",
        "MAP",
        "ASSIGN"
      ],
      "default": "UNSPECFIIED"
    },
    "SyslogProtocolEnumSyslogProtocol": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "UDP",
        "TCP",
        "TLS"
      ],
      "default": "UNSPECIFIED"
    },
    "TenantTypeMessageTenantType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "CHILD_TENANT",
        "SUPER_TENANT",
        "REGULAR_TENANT"
      ],
      "default": "UNSPECIFIED"
    },
    "TrustStatusMessageTrustStatus": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "VALID",
        "STALE"
      ],
      "default": "UNSPECIFIED",
      "description": " - VALID: The identities and the conditions for the trust are valid\n - STALE: The principal is not valid. This can happen when trust was created with valid principals but that principal could be deleted or deactivated."
    },
    "UserAttributeMessageUserAttributeMessageType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "NAME",
        "EMAIL",
        "HR_TYPE",
        "STATUS",
        "TITLE",
        "DEPARTMENT",
        "MANAGER_NAME",
        "MANAGER_ID",
        "PROVIDER_HR_TYPE",
        "MANAGER_RESOLUTION_ID",
        "LOCATION_ZIP_CODE",
        "LOCATION_COUNTRY",
        "LOCATION_STATE",
        "LOCATION_CITY",
        "LOCATION_STREET",
        "USERNAME",
        "FIRST_NAME",
        "LAST_NAME",
        "PROFILE_NAME",
        "EMPLOYEE_ID"
      ],
      "default": "UNSPECIFIED",
      "title": "- MANAGER_NAME: Manager Attributes\n - LOCATION_ZIP_CODE: Location Attributes. using location as prefix as\nstate conflicts with the existing identity state attribute\n - FIRST_NAME: currently supported only for HRMS User\nWill not be persisted into graph\nwill only be used to populate graph USER name field\n - PROFILE_NAME: below will NOT be persisted into graph\nnot supported for IDP user and HRMS user"
    },
    "WorkdayConfigModeMessageWorkdayConfigMode": {
      "type": "string",
      "enum": [
        "WORKDAY_MODE_UNSPECIFIED",
        "WORKDAY_MODE_CSV",
        "WORKDAY_MODE_API"
      ],
      "default": "WORKDAY_MODE_UNSPECIFIED"
    },
    "andromedaapiBehaviorModelRequest": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/andromedaapiModel"
          }
        }
      }
    },
    "andromedaapiEffectivePermissionsResponse": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dataPermissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "andromedaapiGetEffectivePermissionsRequest": {
      "type": "object",
      "properties": {
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "policyDocument": {
          "type": "string"
        }
      },
      "required": [
        "providerType",
        "policyDocument"
      ]
    },
    "andromedaapiModel": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/BehaviorModelMessageBehaviorModel"
        },
        "recompute": {
          "type": "boolean"
        },
        "tenants": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "andromedautilsLocation": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "latitude": {
          "type": "integer",
          "format": "int32"
        },
        "longitude": {
          "type": "integer",
          "format": "int32"
        },
        "accuracyRadius": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "andromedautilsTag": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "key",
        "value"
      ]
    },
    "apiAccessKeyResponse": {
      "type": "object",
      "properties": {
        "accessKey": {
          "type": "string",
          "description": "AccessKey is a short-lived access-key for the authenticated User."
        }
      },
      "description": "AccessKeyResponse is returned in response to the RequestAccessKey request by an\nauthenticated User."
    },
    "apiAccessReviewAndReason": {
      "type": "object",
      "properties": {
        "accessReviewId": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "apiAccessReviewAndReasonList": {
      "type": "object",
      "properties": {
        "reviews": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiAccessReviewAndReason"
          }
        }
      }
    },
    "apiActionCampaignInstancePayload": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/CampaignActionTypeMessageCampaignActionType"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "apiAdminRequestAccessKeyRequest": {
      "type": "object",
      "properties": {
        "tenantId": {
          "type": "string"
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "description": "Duration in seconds for the validity of the access request key.\nMinimum is set as 30 minutes or 1800 seconds.\nMaximum is set as 6 months or 15552000 seconds."
        },
        "email": {
          "type": "string",
          "description": "Email is the user on behalf of which the access key is being generated."
        }
      }
    },
    "apiBulkAccessReviewUpdateResponse": {
      "type": "object",
      "properties": {
        "reviews": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/campaignsCampaignSnapshotReview"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiBulkApproveAccessReviewsAiRecommendationPayload": {
      "type": "object",
      "properties": {
        "reviewerId": {
          "type": "string",
          "description": "To be used by tenant admin reviewer for review override."
        },
        "campaignId": {
          "type": "string"
        }
      }
    },
    "apiBulkUpdateAccessReviewReviewStatusPayload": {
      "type": "object",
      "properties": {
        "reviews": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiBulkUpdateReviewStatusReviewsPayload"
          }
        }
      }
    },
    "apiBulkUpdateReviewStatusReviewsPayload": {
      "type": "object",
      "properties": {
        "accessReviewId": {
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/AccessReviewActionTypeMessageReviewActionType"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "apiCampaignReportResponse": {
      "type": "object",
      "properties": {
        "url": {
          "$ref": "#/definitions/configUrlResponse"
        },
        "mimeType": {
          "type": "string"
        },
        "operationName": {
          "type": "string"
        },
        "operationCreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "urlCreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "urlExpiresAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiChannelLoginRequest": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/configThirdPartyChannelMessageChannelType"
        },
        "userId": {
          "type": "string",
          "description": "This is the channel User ID that is sent from the third party integration."
        },
        "organizationId": {
          "type": "string"
        },
        "conversationId": {
          "type": "string"
        }
      }
    },
    "apiChannelLoginResponse": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/configThirdPartyChannelMessageChannelType"
        }
      }
    },
    "apiCreateBrokerRequest": {
      "type": "object",
      "properties": {
        "broker": {
          "$ref": "#/definitions/configBroker"
        }
      },
      "required": [
        "broker"
      ]
    },
    "apiListAccountResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelsconfigAccount"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "nextPageCursor": {
          "type": "string"
        }
      }
    },
    "apiListBrokerResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configBroker"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "nextPageCursor": {
          "type": "string"
        }
      }
    },
    "apiListCampaignTemplatesResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelsconfigCampaignTemplate"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "nextPageCursor": {
          "type": "string"
        }
      }
    },
    "apiListEnvironmentMappingPolicyResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configEnvironmentMappingPolicy"
          }
        },
        "providerId": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "nextPageCursor": {
          "type": "string"
        }
      },
      "required": [
        "providerId"
      ]
    },
    "apiListEnvironmentResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configEnvironment"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "nextPageCursor": {
          "type": "string"
        }
      }
    },
    "apiListFileResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configFile"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "nextPageCursor": {
          "type": "string"
        }
      }
    },
    "apiListIntegrationResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelsconfigIntegration"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "nextPageCursor": {
          "type": "string"
        }
      }
    },
    "apiListJitPolicyProfileResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configJitPolicyProfile"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "nextPageCursor": {
          "type": "string"
        }
      }
    },
    "apiListOwnersMappingPolicyResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configOwnersMappingPolicy"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        }
      },
      "required": [
        "providerId"
      ]
    },
    "apiListProviderBrokerMapperResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configBrokerProviderMapper"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "nextPageCursor": {
          "type": "string"
        }
      }
    },
    "apiListProviderResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelsconfigProvider"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "nextPageCursor": {
          "type": "string"
        }
      }
    },
    "apiListProviderTierResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelsconfigProviderTier"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "nextPageCursor": {
          "type": "string"
        }
      }
    },
    "apiListScimPushGroupsResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configScimPushGroup"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "nextPageCursor": {
          "type": "string"
        }
      }
    },
    "apiListSensitivityMappingPolicyResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configSensitivityMappingPolicy"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        }
      },
      "required": [
        "providerId"
      ]
    },
    "apiListTenantResponse": {
      "type": "object",
      "properties": {
        "tenants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelsconfigTenant"
          }
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "nextPageCursor": {
          "type": "string"
        }
      }
    },
    "apiListUserResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelsconfigUser"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "nextPageCursor": {
          "type": "string"
        }
      }
    },
    "apiLoginRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email can either be of a SSO User, or a non-SSO User. The type of\nUser (SSO/non-SSO) is determined by checking the domain in the Email.\nA non-SSO User is logged in via an OTP to the Email.\nAn SSO User on the other hand is logged in by redirecting it to\nthe configured IdP."
        },
        "returnUrl": {
          "type": "string",
          "description": "ReturnURL is an optional setting for the API Client, that sets\nthe URL to which the User should return to after a successful\nSAML Login. This applies for when the Email is that of an SSO-User."
        }
      },
      "description": "LoginRequest is the main input payload that is provided by the User\non the login page."
    },
    "apiLoginScheme": {
      "type": "string",
      "enum": [
        "LOGIN_SCHEME_EMAIL_OTP",
        "LOGIN_SCHEME_SAML"
      ],
      "default": "LOGIN_SCHEME_EMAIL_OTP",
      "description": " - LOGIN_SCHEME_EMAIL_OTP: OTP is the default login scheme for non-SSO Users.\n - LOGIN_SCHEME_SAML: SAML is the login scheme for SSO Users."
    },
    "apiLoginVerificationRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email is the email of the User who wishes to access Andromeda resources.\nEmail is optional in AccessKeyLogin, and required in EmailLogin and SAMLLogin."
        },
        "code": {
          "type": "string",
          "description": "Code is determined by what authentication flow is being used.\nIf the Login is initiated via the OTP flow, the code is the OTP sent on mail.\nIf the Login is initiated via the SAML flow, the code is what the IdP provides\npost the redirects.\nIF the Login is via the Access key flow, the code is the generated access key."
        }
      },
      "description": "LoginVerificationRequest is the request payload that is provided by\nUsers while logging in."
    },
    "apiPartitionMapping": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "partitionId": {
          "type": "string"
        },
        "partitionDomain": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "partitionId",
        "partitionDomain"
      ]
    },
    "apiRequestAccessKeyRequest": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "integer",
          "format": "int64",
          "description": "Duration in seconds for the validity of the access request key.\nMinimum is set as 30 minutes or 1800 seconds.\nMaximum is set as 6 months or 15552000 seconds."
        }
      }
    },
    "apiRequestLoginResponse": {
      "type": "object",
      "properties": {
        "redirectUrl": {
          "type": "string",
          "description": "RedirectURL is set in case of IdP/SAML based login and tells the client\nabout the location of the IdP login page."
        },
        "scheme": {
          "$ref": "#/definitions/apiLoginScheme",
          "description": "Scheme is the login scheme that is being used to login the User. In case\nof an email OTP based login the redirect_url is empty."
        }
      },
      "description": "RequestLoginResponse defines the response payload that is sent when the User\ninitiates the Login process."
    },
    "apiReviewerActionPayload": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/AccessReviewActionTypeMessageReviewerActionType"
        },
        "reason": {
          "type": "string"
        },
        "reassignReview": {
          "$ref": "#/definitions/campaignsReassignReviewActionData"
        }
      }
    },
    "apiTenantPartitionsMappingResponse": {
      "type": "object",
      "properties": {
        "superTenantId": {
          "type": "string"
        },
        "partitionMappings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiPartitionMapping"
          }
        }
      },
      "required": [
        "superTenantId",
        "partitionMappings"
      ]
    },
    "apiUpdateJitPolicyReviewPayload": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/JitPolicyReviewStatusMessageReviewerReviewStatus"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "arielAnalysisStatusOutput": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "arielJitPolicyRequestForAnalysis": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "accountId": {
          "type": "string"
        },
        "accessRequestTransactionId": {
          "type": "string"
        },
        "createdById": {
          "type": "string"
        },
        "requesterUserId": {
          "type": "string"
        },
        "requesterGroupId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "requestedAt": {
          "type": "string",
          "format": "date-time"
        },
        "policyId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "duration": {
          "type": "integer",
          "format": "int64"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "$ref": "#/definitions/AccessRequestTypeMessageAccessRequestType"
        },
        "userActions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configJitPolicyRequestUserAction"
          }
        },
        "metadata": {
          "$ref": "#/definitions/configAccessRequestMetadata"
        }
      }
    },
    "arielModelBasedAnalyses": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "specification": {
          "$ref": "#/definitions/arielModelBasedAnalysesSpecification",
          "description": "Specification is the input to the model-based analyses."
        },
        "status": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/arielModelBasedAnalysisStatus"
          },
          "description": "Status is the output of the model-based analyses."
        }
      },
      "required": [
        "tenantId"
      ]
    },
    "arielModelBasedAnalysesSpecification": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configAnalysisModel"
          },
          "description": "Models are the Analysis models for which the analysis is to be performed."
        },
        "accessRequest": {
          "$ref": "#/definitions/arielJitPolicyRequestForAnalysis",
          "description": "AccessRequest for the analysis."
        }
      }
    },
    "arielModelBasedAnalysisStatus": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/configAnalysisModel"
        },
        "status": {
          "$ref": "#/definitions/arielModelBasedAnalysisStatusTypeStatus"
        },
        "output": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/arielAnalysisStatusOutput"
          }
        },
        "recommendation": {
          "$ref": "#/definitions/ModelBasedAnalysisRecommendationMessageRecommendation"
        },
        "summary": {
          "type": "string"
        }
      }
    },
    "arielModelBasedAnalysisStatusTypeStatus": {
      "type": "string",
      "enum": [
        "TRIGGERED",
        "IN_PROGRESS",
        "COMPLETED",
        "FAILED"
      ],
      "default": "TRIGGERED"
    },
    "awsAwsLsp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "awsAccountId": {
          "type": "string"
        },
        "awsUser": {
          "type": "string"
        },
        "awsPolicyJson": {
          "type": "string"
        },
        "ebiStatic": {
          "type": "number",
          "format": "float"
        },
        "actions": {
          "type": "string"
        },
        "services": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "* An AwsLspPermissionSet is a single computed LSP for an AWS account and user.\nebi_static is the entitlement blast index of this Permission Set."
    },
    "campaignsAccessReviewAiAnalysis": {
      "type": "object",
      "properties": {
        "aiReviewRecommendation": {
          "$ref": "#/definitions/AiAccessReviewRecommendationMessageAiAccessReviewRecommendation",
          "title": "Ai Recommendation of the access review"
        },
        "accessReviewSummary": {
          "type": "string",
          "title": "Ai Summary of the access review"
        },
        "checks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/campaignsAccessReviewAiAnalysisCheck"
          },
          "title": "Ai Analysis checks"
        }
      }
    },
    "campaignsAccessReviewAiAnalysisCheck": {
      "type": "object",
      "properties": {
        "analysisName": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/AccessReviewAnalysisStatusMessageAccessReviewAnalysisStatus"
        },
        "category": {
          "$ref": "#/definitions/SignificanceCategoryMessageSignificanceCategory",
          "title": "P1"
        },
        "checkType": {
          "$ref": "#/definitions/AccessReviewAnalysisCheckTypeMessageAccessReviewAnalysisCheckType"
        }
      }
    },
    "campaignsCampaignAction": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/CampaignActionTypeMessageCampaignActionType"
        },
        "reason": {
          "type": "string"
        },
        "triggeredAt": {
          "type": "string",
          "format": "date-time",
          "description": "Hack to add immutability check for nested timestamp fields."
        },
        "triggeredById": {
          "type": "string"
        },
        "processedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "campaignsCampaignInstance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "readOnly": true
        },
        "campaignTransactionId": {
          "type": "string",
          "readOnly": true
        },
        "campaignTemplateId": {
          "type": "string"
        },
        "instanceCreatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/campaignsCampaignAction"
          },
          "description": "All user actions done on the Campaign instance are stored here. This need not be\nreturned in the GET campaign instance API and PUT should not be allowed too.\nThese actions must be POSTed via the actions APIs.",
          "readOnly": true
        },
        "targetCompletionTime": {
          "type": "string",
          "format": "date-time",
          "description": "Target completion duration of the campaign.\nThe duration is after the campaign is ACTIVATED."
        },
        "template": {
          "$ref": "#/definitions/modelsconfigCampaignTemplate"
        },
        "ownerIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "bubbling up owner id field from template for gql filters",
          "readOnly": true
        },
        "scopeIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "instanceScheduledAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "description": "CampaignInstance is the main instance spun out of an existing CampaignTemplate."
    },
    "campaignsCampaignRoleBindingScope": {
      "type": "object",
      "properties": {
        "scopeType": {
          "$ref": "#/definitions/ScopeTypeEnumScopeType",
          "description": "Scope is the resource on which the binding is present.\nThis could be a resource group, subscription, etc."
        },
        "scopeId": {
          "type": "string",
          "description": "ScopeId is the unique identifier of the resource on which the binding is present."
        },
        "scopeName": {
          "type": "string",
          "description": "ScopeName is the name of the resource on which the binding is present."
        }
      }
    },
    "campaignsCampaignSnapshotReview": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Row UUID.",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "readOnly": true
        },
        "principalId": {
          "type": "string",
          "readOnly": true
        },
        "principalType": {
          "$ref": "#/definitions/configPrincipalTypeMessagePrincipalType",
          "readOnly": true
        },
        "roleId": {
          "type": "string",
          "readOnly": true
        },
        "campaignTransactionId": {
          "type": "string",
          "readOnly": true
        },
        "campaignInstanceId": {
          "type": "string",
          "readOnly": true
        },
        "reviewerId": {
          "type": "string",
          "description": "Deprecated.",
          "readOnly": true
        },
        "campaignSnapshotReviewerDetailsId": {
          "type": "string",
          "readOnly": true
        },
        "scope": {
          "$ref": "#/definitions/campaignsCampaignRoleBindingScope"
        },
        "data": {
          "$ref": "#/definitions/campaignsSnapshotData"
        },
        "accessAnalysis": {
          "$ref": "#/definitions/campaignsAccessReviewAiAnalysis"
        },
        "status": {
          "$ref": "#/definitions/campaignsCampaignSnapshotReviewStatus",
          "description": "Status captures the current status of the review."
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/campaignsCampaignSnapshotReviewAction"
          },
          "description": "Actions capture actions done via the API by various actors. Every action\nwill change the status of the review. The status could have been captured with the trail but\ncurrent status is kept up to date with every action for easy querying and brevity."
        },
        "trail": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/campaignsCampaignSnapshotReviewAction"
          }
        },
        "notes": {
          "type": "string",
          "description": "RBACed: Auditors don't see this in the report."
        },
        "scopeId": {
          "type": "string"
        },
        "providerId": {
          "type": "string",
          "title": "dont add foreign key references as we are moving databases later",
          "readOnly": true
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType",
          "readOnly": true
        },
        "principalIdentityId": {
          "type": "string",
          "readOnly": true
        },
        "principalUserName": {
          "type": "string",
          "readOnly": true
        },
        "accountId": {
          "type": "string",
          "readOnly": true
        },
        "roleName": {
          "type": "string",
          "readOnly": true
        },
        "revocationStatus": {
          "$ref": "#/definitions/campaignsRevocationStatus"
        },
        "hrType": {
          "$ref": "#/definitions/configHrType"
        },
        "providerName": {
          "type": "string"
        },
        "providerCategory": {
          "$ref": "#/definitions/utilsProviderCategoryType"
        }
      }
    },
    "campaignsCampaignSnapshotReviewAction": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/AccessReviewActionTypeMessageReviewActionType"
        },
        "reason": {
          "type": "string"
        },
        "triggeredAt": {
          "type": "string",
          "format": "date-time"
        },
        "triggeredById": {
          "type": "string"
        },
        "processedAt": {
          "type": "string",
          "format": "date-time"
        },
        "triggeredByEmail": {
          "type": "string"
        }
      }
    },
    "campaignsCampaignSnapshotReviewReviewerStatus": {
      "type": "object",
      "properties": {
        "reviewerStatus": {
          "$ref": "#/definitions/AccessReviewReviewerStatusMessageAccessReviewReviewerStatus",
          "description": "What is the reviewer's state related to the review. A reviewer may made a decision to\napprove or deny and then save it. Ultimately, the reviewer has to signoff\nall the reviews and campaign can end only when all the reviews are completed and signed off."
        },
        "reason": {
          "type": "string",
          "title": "Reason related to the review decision"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time when the reivew status was updated."
        },
        "updatedById": {
          "type": "string",
          "title": "Who is the final reviewer. It is possible that UAR admin or tenant admin\nmakes the review decision instead of the assigned reviewer"
        }
      }
    },
    "campaignsCampaignSnapshotReviewReviewerTrail": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/AccessReviewActionTypeMessageReviewerActionType",
          "description": "Action taken by the reviewer."
        },
        "reason": {
          "type": "string",
          "description": "Reason for the action."
        },
        "triggeredAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time when the action was taken."
        },
        "triggeredById": {
          "type": "string",
          "description": "Who took the action."
        },
        "processedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "campaignsCampaignSnapshotReviewStatus": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/AccessReviewStatusMessageAccessReviewStatus",
          "description": "Decision on the AccessReview whether it is pending, approved or denied.\nLater on skipped and exception can be added as additional states."
        },
        "reason": {
          "type": "string",
          "title": "Reason related to the review decision"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time when the reivew status was updated."
        },
        "updatedById": {
          "type": "string",
          "title": "Who is the final reviewer. It is possible that UAR admin or tenant admin\nmakes the review decision instead of the assigned reviewer"
        },
        "updatedByEmail": {
          "type": "string",
          "title": "used for display in gql for updated by identity name"
        }
      }
    },
    "campaignsCampaignSnapshotReviewerDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "readOnly": true
        },
        "reviewerId": {
          "type": "string",
          "description": "Assigned reviewer id.",
          "readOnly": true
        },
        "campaignInstanceId": {
          "type": "string",
          "readOnly": true
        },
        "campaignTransactionId": {
          "type": "string",
          "readOnly": true
        },
        "originalReviewerId": {
          "type": "string",
          "description": "Original reviewer id.",
          "readOnly": true
        },
        "reviewerStatus": {
          "$ref": "#/definitions/campaignsCampaignSnapshotReviewReviewerStatus"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/campaignsCampaignSnapshotReviewReviewerTrail"
          }
        },
        "trail": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/campaignsCampaignSnapshotReviewReviewerTrail"
          }
        },
        "reviewerName": {
          "type": "string",
          "readOnly": true
        },
        "reviewerEmail": {
          "type": "string",
          "readOnly": true
        },
        "revocationStatus": {
          "$ref": "#/definitions/campaignsRevocationStatus"
        },
        "originalReviewerName": {
          "type": "string",
          "readOnly": true
        },
        "originalReviewerAssignmentReason": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "campaignsReassignReviewActionData": {
      "type": "object",
      "properties": {
        "reassignedReviewerId": {
          "type": "string"
        }
      }
    },
    "campaignsRevocationStatus": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/AccessReviewRevocationStatusMessageAccessReviewRevocationStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "reason": {
          "type": "string"
        },
        "revocationAttempts": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "campaignsSnapshotData": {
      "type": "object",
      "properties": {
        "lastActivity": {
          "$ref": "#/definitions/protobufAny",
          "title": "ActivitySnapshot"
        },
        "assignmentConfigurationSnapshot": {
          "$ref": "#/definitions/protobufAny"
        },
        "accessReviewPolicySnapshot": {
          "$ref": "#/definitions/protobufAny"
        },
        "identityInsightsSnapshot": {
          "$ref": "#/definitions/protobufAny"
        },
        "identityRiskFactorsSnapshot": {
          "$ref": "#/definitions/protobufAny"
        },
        "identityPolicyInsightsSnapshot": {
          "$ref": "#/definitions/protobufAny"
        },
        "identityStatus": {
          "$ref": "#/definitions/configIdentityStatus"
        },
        "lastApprovalTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "conduitBrokerProviderConfig": {
      "type": "object",
      "properties": {
        "providerId": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "config": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    },
    "conduitBrokerTask": {
      "type": "object",
      "properties": {
        "taskId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "taskType": {
          "$ref": "#/definitions/ConduitTaskTypeMessageConduitTaskType"
        },
        "request": {
          "$ref": "#/definitions/protobufAny"
        },
        "priority": {
          "$ref": "#/definitions/PriorityMessagePriority"
        },
        "metadata": {
          "$ref": "#/definitions/conduitBrokerTaskMetadata"
        }
      }
    },
    "conduitBrokerTaskMetadata": {
      "type": "object",
      "properties": {
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "taskTimeoutMinutes": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "conduitBrokerTaskResultMessageBrokerTaskResult": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "SUCCESS",
        "FAILED",
        "TIMEOUT",
        "PENDING"
      ],
      "default": "UNSPECIFIED"
    },
    "conduitBrokerTaskResultMetadata": {
      "type": "object",
      "properties": {
        "pageNumber": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "conduitConduitTaskMetadata": {
      "type": "object",
      "properties": {
        "s3ObjectPrefix": {
          "type": "string"
        }
      }
    },
    "conduitCreateTaskResponse": {
      "type": "object",
      "properties": {
        "taskId": {
          "type": "string"
        }
      }
    },
    "conduitListBrokerTasksResponse": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/conduitBrokerTask"
          }
        }
      }
    },
    "conduitListProviderConfigurationsResponse": {
      "type": "object",
      "properties": {
        "providerConfigs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/conduitBrokerProviderConfig"
          }
        }
      }
    },
    "conduitProviderHealthStatus": {
      "type": "object",
      "properties": {
        "providerId": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "status": {
          "$ref": "#/definitions/BrokerProviderHealthStatusMessageBrokerProviderHealthStatus"
        },
        "errorCode": {
          "$ref": "#/definitions/BrokerErrorCodeEnumBrokerErrorCode"
        },
        "errorMessage": {
          "type": "string"
        },
        "lastCheckedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "conduitRegisterBrokerResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/BrokerRegistrationResultMessageBrokerRegistrationResult"
        },
        "sessionToken": {
          "type": "string"
        },
        "errorCode": {
          "$ref": "#/definitions/ConduitErrorCodeMessageConduitErrorCode"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "conduitTaskStatusResponse": {
      "type": "object",
      "properties": {
        "taskId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "taskType": {
          "$ref": "#/definitions/ConduitTaskTypeMessageConduitTaskType"
        },
        "status": {
          "$ref": "#/definitions/ConduitTaskStatusMessageConduitTaskStatus"
        },
        "response": {
          "$ref": "#/definitions/protobufAny"
        },
        "errorCode": {
          "$ref": "#/definitions/ConduitErrorCodeMessageConduitErrorCode"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "configADAuthConfig": {
      "type": "object",
      "properties": {
        "authMode": {
          "$ref": "#/definitions/configADAuthModeMode",
          "description": "The authentication mode for accessing Active Directory resources."
        },
        "staticCredentials": {
          "$ref": "#/definitions/configADStaticCredentials",
          "description": "Static credentials for accessing Active Directory resources."
        }
      },
      "required": [
        "authMode"
      ]
    },
    "configADAuthModeMode": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "AD_AUTHMODE_STATIC_CREDENTIALS"
      ],
      "default": "UNSPECIFIED"
    },
    "configADStaticCredentials": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "description": "Environment variable for the password."
        }
      },
      "required": [
        "password"
      ]
    },
    "configAWSAccountConfiguration": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "title": "AWS Account Id"
        },
        "isManagementAccount": {
          "type": "boolean"
        },
        "authConfig": {
          "$ref": "#/definitions/configAuthConfig",
          "title": "Auth configuration for accessing AWS resources"
        }
      },
      "required": [
        "accountId"
      ]
    },
    "configAWSAccountsConfiguration": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configAWSAccountConfiguration"
          },
          "title": "List of acounts to be configured"
        },
        "authConfig": {
          "$ref": "#/definitions/configAuthConfig",
          "description": "Default Auth configuration for all the accounts that are\nconfigured. This can be overridden by individual account config."
        }
      }
    },
    "configAWSAuthMode": {
      "type": "string",
      "enum": [
        "AWS_AUTHMODE_UNSPECIFIED",
        "AWS_AUTHMODE_ASSUME_ROLE",
        "AWS_AUTHMODE_STATIC_CREDENTIALS",
        "AWS_AUTHMODE_ASSUME_ROLE_WITH_CREDENTIALS",
        "AWS_AUTHMODE_ENVIRONMENT"
      ],
      "default": "AWS_AUTHMODE_UNSPECIFIED"
    },
    "configAWSIamSsoIntegration": {
      "type": "object",
      "properties": {
        "providerId": {
          "type": "string"
        }
      },
      "title": "TODO: We dont have a referential integrity check for",
      "required": [
        "providerId"
      ]
    },
    "configAWSLogsWorkflowConfiguration": {
      "type": "object",
      "properties": {
        "workflowIntervalMins": {
          "type": "integer",
          "format": "int32",
          "description": "The interval in minutes between realtime logs workflow subsequent runs."
        },
        "concurrentRegionsToProcessPerAccount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of concurrent regions to process per account in the CloudTrail fetch workflow."
        },
        "concurrentFileDownloadsPerRegion": {
          "type": "integer",
          "format": "int32",
          "description": "The number of concurrent file to downloads per region per account in\nthe CloudTrail fetch workflow."
        },
        "initialLogsFetchDays": {
          "type": "integer",
          "format": "int32",
          "description": "The number of days of CloudTrail logs to fetch initially."
        },
        "concurrentFileDownloadsPerAccount": {
          "type": "integer",
          "format": "int32",
          "title": "The number of concurrent file to download per account"
        },
        "concurrentFileDownloadsPerProvider": {
          "type": "integer",
          "format": "int32",
          "title": "The number of concurrent file to download per provider"
        },
        "downloadWindowTimeMins": {
          "type": "integer",
          "format": "int32",
          "title": "window time in minutes to download the logs"
        },
        "checkpointFilesCount": {
          "type": "integer",
          "format": "int32",
          "title": "number of files to download in at each checkpoint"
        }
      }
    },
    "configAWSProviderConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Uuid of the AWS Provider Configuration"
        },
        "providerId": {
          "type": "string",
          "title": "Provider Id of the AWS Provider Type"
        },
        "tenantId": {
          "type": "string"
        },
        "accountsConfig": {
          "$ref": "#/definitions/configAWSAccountsConfiguration",
          "description": "Configuration for the AWS Accounts which are not part of an AWS Organization."
        },
        "cloudtrailConfig": {
          "$ref": "#/definitions/configAWSTrailsConfiguration",
          "description": "Configuration for the CloudTrails which Andromeda can access."
        },
        "authConfig": {
          "$ref": "#/definitions/configAuthConfig",
          "description": "Default Auth configuration for all the accounts and cloud trails that are\nconfigured. This can be overridden by individual config."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "iamSsoIntegration": {
          "$ref": "#/definitions/configAWSIamSsoIntegration"
        },
        "deploymentModes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentModeMessageAWSDeploymentMode"
          },
          "description": "List of supported AWS deployment modes for the provider."
        },
        "userDataMappingProfile": {
          "$ref": "#/definitions/configUserDataMappingProfile"
        },
        "enableResourceInventory": {
          "type": "boolean"
        },
        "mode": {
          "$ref": "#/definitions/AndromedaModeMessageAndromedaMode",
          "description": "Andromeda mode for the provider."
        },
        "accessRequestProvisioningConfig": {
          "$ref": "#/definitions/configAccessRequestProvisioningConfig",
          "description": "When the Andromeda mode is enforcement then the access request provisioning config is required."
        },
        "defaultAccessRequestProfileId": {
          "type": "string",
          "description": "JitPolicyProfile binding with the provider."
        }
      },
      "title": "AWS Provider Configuration",
      "required": [
        "id",
        "providerId",
        "tenantId",
        "accountsConfig",
        "cloudtrailConfig"
      ]
    },
    "configAWSProviderInteralConfiguration": {
      "type": "object",
      "properties": {
        "cloudtrailConfig": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configCloudTrailConfig"
          },
          "title": "configuration to override the provider configuration"
        }
      }
    },
    "configAWSTrailConfiguration": {
      "type": "object",
      "properties": {
        "trailArn": {
          "type": "string",
          "title": "ARN of the CloudTrail"
        },
        "s3BucketAccountId": {
          "type": "string",
          "description": "Account ID of the S3 bucket which is configured in the CloudTrail.\nThis is required only if the S3 bucket is not part of the same\nAWS Account as the CloudTrail."
        },
        "authConfig": {
          "$ref": "#/definitions/configAuthConfig",
          "title": "Auth configuration for accessing CloudTrail event logs"
        }
      },
      "required": [
        "trailArn"
      ]
    },
    "configAWSTrailsConfiguration": {
      "type": "object",
      "properties": {
        "trails": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configAWSTrailConfiguration"
          },
          "title": "List of CloudTrails to be configured"
        },
        "authConfig": {
          "$ref": "#/definitions/configAuthConfig",
          "description": "Default Auth configuration for all the CloudTrails that are\nconfigured. This can be overridden by individual CloudTrail config."
        }
      }
    },
    "configAWSWorkflowConfiguration": {
      "type": "object",
      "properties": {
        "s3Sink": {
          "$ref": "#/definitions/configCloudTrailS3Sink",
          "title": "Andromeda S3 bucket configuration"
        },
        "kafkaSink": {
          "$ref": "#/definitions/configCloudTrailKafkaSink",
          "description": "Andromeda Kafka sink configuration\nDeprecated: Not supported anymore."
        },
        "concurrentFileDownloadsPerRegion": {
          "type": "integer",
          "format": "int32"
        },
        "initialCloudTrailFetchDays": {
          "type": "integer",
          "format": "int32",
          "description": "The number of days of CloudTrail logs to fetch initially.\nDeprecated: Use AWSLogWorkflowConfiguration.initial_logs_fetch_days instead."
        },
        "cloudTrailWorkflowIntervalMins": {
          "type": "integer",
          "format": "int32",
          "description": "The interval in minutes between CloudTrail fetch workflows.\nDeprecated: Use AWSLogWorkflowConfiguration.workflow_interval_mins instead."
        },
        "inventoryWorkflowIntervalMins": {
          "type": "integer",
          "format": "int32",
          "description": "The interval in minutes between inventory workflows."
        },
        "realtimeLogsWorkflowConfig": {
          "$ref": "#/definitions/configAWSLogsWorkflowConfiguration"
        },
        "historicalLogsWorkflowConfig": {
          "$ref": "#/definitions/configAWSLogsWorkflowConfiguration"
        },
        "realtimeLogsStartTimeDeltaDays": {
          "type": "integer",
          "format": "int32",
          "title": "The number of days of CloudTrail logs to fetch initially.\nIf value is set the the real time logs will start from\ntime.Now() - realtime_logs_start_time_delta_days"
        },
        "fullInventoryRefreshIntervalMins": {
          "type": "integer",
          "format": "int32",
          "title": "If non-zero, this value will override the pod config"
        }
      }
    },
    "configAcceptedRisk": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "This id is not used for CRUD operations"
        },
        "tenantId": {
          "type": "string"
        },
        "identityId": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "tenantId",
        "identityId",
        "accountId",
        "userId",
        "updatedAt"
      ]
    },
    "configAccessLevel": {
      "type": "string",
      "enum": [
        "ACCESS_LEVEL_UNSPECIFIED",
        "ACCESS_LEVEL_LIST",
        "ACCESS_LEVEL_WRITE_TAG",
        "ACCESS_LEVEL_DELETE_TAG",
        "ACCESS_LEVEL_READ_METADATA",
        "ACCESS_LEVEL_READ_DATA",
        "ACCESS_LEVEL_WRITE_METADATA",
        "ACCESS_LEVEL_CREATE",
        "ACCESS_LEVEL_WRITE_DATA",
        "ACCESS_LEVEL_DELETE_DATA",
        "ACCESS_LEVEL_DELETE",
        "ACCESS_LEVEL_PERMISSIONS_MANAGEMENT"
      ],
      "default": "ACCESS_LEVEL_UNSPECIFIED"
    },
    "configAccessRequestAnalaysisModelConfiguration": {
      "type": "object",
      "properties": {
        "policyUsageBehaviour": {
          "$ref": "#/definitions/configEwmaModelConfiguration"
        },
        "authFailureBehaviour": {
          "$ref": "#/definitions/configEwmaModelConfiguration"
        },
        "devicePattern": {
          "$ref": "#/definitions/configDevicePatternConfiguration"
        },
        "geoLocationPattern": {
          "$ref": "#/definitions/configGeoLocationPatternConfiguration"
        },
        "geoLocationBehavior": {
          "$ref": "#/definitions/configChiSquareTestConfiguration"
        },
        "deviceBehavior": {
          "$ref": "#/definitions/configChiSquareTestConfiguration"
        },
        "policyUsageBehaviorSeasonal": {
          "$ref": "#/definitions/configPolicyUsageBehaviorSeasonalModelConfiguration"
        }
      }
    },
    "configAccessRequestAnalysisRule": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "When set to false the match targets are stored but not applied."
        },
        "action": {
          "$ref": "#/definitions/JitPolicyAndromedaReviewRuleActionMessageRuleAction",
          "description": "Action to take if the rules' criteria is met. The default action for any\nunmatched condition is to ask for review."
        },
        "when": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configRequestAnalysisMatchWhenTarget"
          },
          "description": "Filters are used to further narrow down the conditions that must be met for\nan action to be taken. Filters are optional.\nWhen conditionals in these repeated entries are ANDed for this rule.\nSample:\n     when: [\n       {\n         match_provider_type: {\n           value_match_criteria: EQUALS,\n           string_value: \"AWS\"\n         },\n       },\n       {\n         match_provider_tag: {\n           value_match_criteria: EQUALS,\n           string_value: \"prod\"\n         }\n       }\n     ]\nWhen empty, the rule is applied to all requests."
        },
        "category": {
          "$ref": "#/definitions/RequestAnalysisConditionCategoryMessageRequestAnalysisConditionCategory"
        },
        "conditionPolicyRisk": {
          "$ref": "#/definitions/configMatchOrConditionCriteria",
          "description": "Supports only LESS_THAN, GREATER_THAN, EQUALS for Integer values."
        },
        "conditionIdentityDisabled": {
          "$ref": "#/definitions/configMatchOrConditionCriteria",
          "description": "Supports only EQUALS for Boolean values."
        },
        "conditionIdentityTerminationDaysLeft": {
          "$ref": "#/definitions/configMatchOrConditionCriteria",
          "description": "Supports only LESS_THAN, GREATER_THAN for Integer values."
        },
        "conditionPolicyName": {
          "$ref": "#/definitions/configMatchOrConditionCriteria",
          "description": "Supports only EQUALS, CONTAINS for String values."
        },
        "conditionIdentityRisk": {
          "$ref": "#/definitions/configMatchOrConditionCriteria",
          "description": "Supports only LESS_THAN, GREATER_THAN, EQUALS for Integer values."
        },
        "conditionPolicyUsageBehaviourModel": {
          "$ref": "#/definitions/configMatchOrConditionCriteria",
          "description": "Supports only EQUALS for Boolean values."
        },
        "conditionGeolocationAnomalyModel": {
          "$ref": "#/definitions/configMatchOrConditionCriteria",
          "description": "Supports only EQUALS for Boolean values."
        },
        "conditionMfaEnabled": {
          "$ref": "#/definitions/configMatchOrConditionCriteria",
          "title": "Supports only EQUALS for Boolean Values"
        },
        "conditionDevicePatternAnomalyModel": {
          "$ref": "#/definitions/configMatchOrConditionCriteria",
          "description": "Supports only EQUALS for Boolean values."
        },
        "conditionAuthenticationAnomalyModel": {
          "$ref": "#/definitions/configMatchOrConditionCriteria",
          "description": "Supports only lesser than for Float values."
        },
        "conditionPolicySeasonalBehaviourModel": {
          "$ref": "#/definitions/configMatchOrConditionCriteria",
          "description": "Supports only EQUALS for Boolean values."
        }
      },
      "title": "AccessRequestAnalysisRule is a set of rules and conditions that must be met for\nan action to be taken by Andromeda intelligence while reviewing an access request.\nThe rules is analysed in the engine like so:\n   aggregates = []\n   if when(provider.type == AWS \u0026\u0026 provider.type == Azure) \u0026\u0026 condition(policy.risk \u003c 50) {\n\t    aggregates.append(auto_approve)\n   }\n   if when(provider.environment == prod) \u0026\u0026 condition(policy.risk \u003c 20) {\n\t    aggregates.append(auto_approve)\n   }\n   if when(provider.type == GCP) \u0026\u0026 condition(request.duration \u003c \"30min\") {\n\t    aggregates.append(auto_approve)\n   }\n   if when(provider.type == AWS) \u0026\u0026 condition(identity.termination_date within 30 days) {\n\t    aggregates.append(ask_for_review)\n   }\n   analysis.ai_review = compute(aggregates)"
    },
    "configAccessRequestAssignReviewerConfig": {
      "type": "object",
      "properties": {
        "assignReviewersTemplate": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configAccessRequestAssignReviewersTemplate"
          },
          "description": "AssignReviewersTemplate represents the chain of approvers in the intender order,\nwith the first set of reviewers assigned from the first index and so on.\nIt'll allow the reviewer configuration to look something like this:\nassign_reviewers_template: [\n  {persona: IDENTITY, persona_values: [\"user1\", \"user2\", \"user3\"], required_approvals: 2},\n  {persona: GROUP_MEMBER, persona_values: [\"group1\"], assignable_reviewers: 3, required_approvals: 1},\n  {persona: MANAGER, required_approvals: 1},\n  {persona: MANAGER, required_approvals: 1},\n  {persona: ACCOUNT_OWNER, assignable_reviewers: 2, required_approvals: 1},\n]\nManager has a special handling which is when a manager follows a manager, it is\nintended to go to the manager of the previous manager.\nDEPERECATED."
        },
        "reviewerAssignmentScheme": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configReviewerAssignmentScheme"
          },
          "description": "ReviewerAssignmentScheme represents the chain of approvers in the intended order,\nEach scheme will have a list of personas and their corresponding templates and\nthe number of approvals required from these personas for the AccessRequest to be\nmarked as APPROVED. Multiple schemes can be defined for reviewer chaining."
        },
        "aiApprovalEnabled": {
          "type": "boolean",
          "description": "AndromedaAIApprovalEnabled determines whether the AccessRequest can be auto-approved\nby the AI system or not."
        },
        "selfReviewEnabled": {
          "type": "boolean",
          "description": "If SelfReviewEnabled is set to true, the user can approve their own\naccess requests regardless of whether the Identity is admin or not."
        }
      }
    },
    "configAccessRequestAssignReviewersTemplate": {
      "type": "object",
      "properties": {
        "persona": {
          "$ref": "#/definitions/JitPolicyAssignReviewerPersonaTypeMessagePersonaType",
          "description": "AssignReviewerConfigType determines whom to ask for review.\nIf no Users are able to be assigned then fail assignment."
        },
        "personaValues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "PersonaValues are the Andromeda UUIDs of the persona.\nThis is only applicable when the personas are IDENTITY or GROUP_MEMBER."
        },
        "assignableReviewers": {
          "type": "integer",
          "format": "int64",
          "description": "AssignableReviewers are the number of reviewers that must be assigned to the\nAccessRequests corresponding to this persona.\nThis is not applicable when persona type is IDENTITY."
        },
        "requiredApprovals": {
          "type": "integer",
          "format": "int64",
          "description": "RequiredApprovals is the number of approvals required for the AccessRequest to be\napproved by this persona. Once approved, the chain proceeds to the next persona.\nThe request is marked APPROVED once it has traversed through all personas."
        }
      }
    },
    "configAccessRequestExtensionConfig": {
      "type": "object",
      "properties": {
        "maxExtensionRequestCount": {
          "type": "integer",
          "format": "int64",
          "title": "The user is able to make at most “N” extension requests.\nN is configured in the JIT profile; default value = 2"
        },
        "maxExtensionDuration": {
          "type": "integer",
          "format": "int64",
          "title": "The requested extension duration is less than or equal to “Y” time\nY is configured in the JIT profile; default value = 1 hour (3600 seconds)"
        },
        "enabled": {
          "type": "boolean",
          "title": "Admin can disable “automatic extension” feature in JIT profile"
        },
        "defaultExtensionDuration": {
          "type": "integer",
          "format": "int64",
          "title": "Default value is 3600 seconds (1 hour)"
        }
      },
      "description": "The user can request for extension of the access duration for a policy."
    },
    "configAccessRequestItsmData": {
      "type": "object",
      "properties": {
        "ticketId": {
          "type": "string",
          "title": "ITSM Ticket ID is the ID of the ITSM ticket that is created for the JIT request.\nThis is required if the Itsm valid_itsm_ticket_check_enabled flag is set to true in the\nJIT Profile. If the URL of the ITSM ticket is provided, the ITSM Ticket ID is auto derived"
        },
        "url": {
          "type": "string",
          "description": "Url is auto-filled based on the ITSM base URL and the ticket ID."
        }
      }
    },
    "configAccessRequestItsmSettings": {
      "type": "object",
      "properties": {
        "validItsmTicketCheckEnabled": {
          "type": "boolean",
          "description": "Check whether the ITSM ticket is valid."
        },
        "accessRequesterItsmTicketCheckEnabled": {
          "type": "boolean",
          "description": "Check whether requestor is either reporter or assignee of the ITSM ticket."
        },
        "itsmResolutionStatusBasedDeprovisioningEnabled": {
          "type": "boolean",
          "description": "ItsmResolutionStatusBasedDeprovisioningEnabled if enabled, auto closes the access request\nif the ITSM ticket status is in the list of valid resolution statuses (under tenant settings)."
        },
        "validItsmTicketStatusCheckEnabled": {
          "type": "boolean",
          "description": "ValidItsmTicketStatusCheckEnabled if enabled, validates the ITSM ticket status against \nthe list of valid ticket statuses (under tenant settings). This validation happens during\naccess request creation."
        }
      }
    },
    "configAccessRequestMetadata": {
      "type": "object",
      "properties": {
        "clientIpAddress": {
          "type": "string"
        },
        "geoLocation": {
          "$ref": "#/definitions/nonpublicstaticGeolocation"
        },
        "userAgent": {
          "type": "string"
        }
      }
    },
    "configAccessRequestNotificationSettings": {
      "type": "object",
      "properties": {
        "slack": {
          "$ref": "#/definitions/configNotificationSettingSlack"
        },
        "microsoftTeams": {
          "$ref": "#/definitions/configNotificationSettingMicrosoftTeams"
        },
        "emails": {
          "$ref": "#/definitions/configNotificationSettingEmail"
        }
      }
    },
    "configAccessRequestProfileOverrideRule": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "matches": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configOverrideRulesMatchWhenTarget"
          },
          "description": "Matches are ANDed together."
        },
        "assignReviewerConfigOverride": {
          "$ref": "#/definitions/configAccessRequestAssignReviewerConfig"
        }
      }
    },
    "configAccessRequestProvisioningConfig": {
      "type": "object",
      "properties": {
        "provisioningPolicy": {
          "$ref": "#/definitions/AccessRequestProvisioningPolicyProvisioningPolicy"
        },
        "managedProvisioningGroupConfig": {
          "$ref": "#/definitions/configManagedProvisioningGroupConfig",
          "description": "ManagedProvisioningGroupConfig helps Andromeda JIT identify the Group to\nwhich Group to select for IDENTITY_ACCESS_VIA_GROUP_BINDING provisioning.\nIf set to nil, Andromeda creates and maintains the Groups in the Providers."
        }
      }
    },
    "configAccessRequestProvisioningDetails": {
      "type": "object",
      "properties": {
        "provisioningPolicy": {
          "$ref": "#/definitions/AccessRequestProvisioningPolicyProvisioningPolicy",
          "description": "Provisioning Policy that was used while provisioning the Access request."
        },
        "externalBindingId": {
          "type": "string",
          "description": "ExternalBindingId is generally the id of the entity that is created in the Provider\nor Application where the assignment is happening. This will be the AccountAssignment ID (AWS IDC),\nRole Assignment (Azure) etc."
        },
        "provisioningGroup": {
          "$ref": "#/definitions/configAccessRequestProvisioningGroup"
        },
        "provisionedAt": {
          "type": "string",
          "format": "date-time",
          "description": "ProvisionedAt is the time when the provisioning was completed."
        },
        "deprovisionedAt": {
          "type": "string",
          "format": "date-time",
          "description": "DeprovisionedAt is the time when the deprovisioning was completed."
        },
        "provisioningConditions": {
          "$ref": "#/definitions/configPolicyProvisioningConditionsData",
          "title": "provisioning condition used during provisioning"
        },
        "provisioningRole": {
          "$ref": "#/definitions/configAccessRequestProvisioningRole"
        }
      }
    },
    "configAccessRequestProvisioningGroup": {
      "type": "object",
      "properties": {
        "andromedaId": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "externalResourceType": {
          "$ref": "#/definitions/configExternalResourceType"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "configAccessRequestProvisioningRole": {
      "type": "object",
      "properties": {
        "roleExternalId": {
          "type": "string"
        },
        "awsResourcePermissionSet": {
          "$ref": "#/definitions/configAwsResourcePermissionSetData",
          "title": "Provisioning data for AWS resource permission set. Used only for AWS"
        }
      }
    },
    "configAccessRequestResourceRoleData": {
      "type": "object",
      "properties": {
        "serviceType": {
          "$ref": "#/definitions/ServiceTypeMessageServiceType"
        },
        "allResources": {
          "type": "boolean"
        },
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Andromeda UUIDs of the resources"
        },
        "externalRoleIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Andromeda UUIDs of the roles\nList of roles that are related to the service type allowed in the\naccess request."
        }
      }
    },
    "configAccessRequestResourceSetData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "List of the AWS Policies that would be used in Role Resource Set.\n\npopulated only when the eligibility type is RESOURCE_SET_ASSIGNMENT"
        },
        "resourceRoleData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configAccessRequestResourceRoleData"
          }
        }
      }
    },
    "configAccessRequestReviewLevelDetails": {
      "type": "object",
      "properties": {
        "currentReviewLevel": {
          "type": "integer",
          "format": "int64"
        },
        "totalReviewLevels": {
          "type": "integer",
          "format": "int64"
        },
        "requiredApprovalsDetails": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configRequiredApprovalsDetails"
          }
        }
      }
    },
    "configAccessRequestReviewReviewerTypeType": {
      "type": "string",
      "enum": [
        "ASSIGNED_REVIEWER",
        "ADMIN_OVERRIDE"
      ],
      "default": "ASSIGNED_REVIEWER",
      "description": " - ASSIGNED_REVIEWER: When the request is reviewed by the assigned reviewer.\n - ADMIN_OVERRIDE: When the request is reviewed by an ADMIN. The ADMIN is determined by the AS-Admin role."
    },
    "configAccessRequestScope": {
      "type": "object",
      "properties": {
        "scopeType": {
          "$ref": "#/definitions/ScopeTypeEnumScopeType",
          "description": "Scope is the resource on which the JIT request is made.\nThis could be a resource group, subscription, etc."
        },
        "scopeId": {
          "type": "string",
          "description": "ScopeId is the unique identifier of the resource on which the JIT request is made."
        },
        "scopeName": {
          "type": "string",
          "description": "ScopeName is the name of the resource on which the JIT request is made."
        }
      }
    },
    "configAccessRequestSessionSummaryConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Access request session summarization feature is enabled by default."
        }
      }
    },
    "configAccessRequestValidationConfig": {
      "type": "object",
      "properties": {
        "minDuration": {
          "type": "integer",
          "format": "int64",
          "description": "MinDuration for the AccessRequest in seconds."
        },
        "maxDuration": {
          "type": "integer",
          "format": "int64",
          "description": "MaxDuration for the AccessRequest in seconds.\nThe valid max duration enforced by Andromeda is 2 weeks."
        },
        "allowedRequestTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccessRequestTypeMessageAccessRequestType"
          },
          "title": "AllowedRequestTypes are the types of AccessRequests that are allowed for the Policy.\nThis could be [STANDING], [JIT], [STANDING,JIT]"
        },
        "maxScheduledRequestsCount": {
          "type": "integer",
          "format": "int64",
          "description": "The max number of active scheduled requests that can be created for a policy."
        },
        "eligibilityBasedRevocationStrategy": {
          "$ref": "#/definitions/EligibilityRevocationBehaviourTypeMessageBehaviourType",
          "title": "EligibilityBasedRevocationStrategy defines the behavior of handling of active\nsession once eligibility has been revoked"
        },
        "requestExpirationDays": {
          "type": "integer",
          "format": "int64",
          "title": "Access Request will timeout after this many days\nDefault value is 7 days and Max value is 30 days"
        }
      }
    },
    "configAccessReviewAnalysisCheck": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/AccessReviewAnalysisActionMessageAccessReviewAnalysisAction"
        },
        "when": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configAccessReviewRuleCondition"
          }
        },
        "checkType": {
          "$ref": "#/definitions/AccessReviewAnalysisCheckTypeMessageAccessReviewAnalysisCheckType",
          "title": "Matches when the rule is applicable"
        },
        "roleBlastRiskCheck": {
          "$ref": "#/definitions/configAccessReviewRoleBlastRiskCheck"
        },
        "recentlyApprovedCheck": {
          "$ref": "#/definitions/configAccessReviewRecentlyApprovedCheck"
        },
        "identityStatusCheck": {
          "$ref": "#/definitions/configAccessReviewIdentityStatusCheck"
        },
        "policyLastUsageCheck": {
          "$ref": "#/definitions/configAccessReviewPolicyLastUsageCheck",
          "title": "P1: For later\nAccessReviewRoleNameCheck role_name_check = 11;"
        }
      }
    },
    "configAccessReviewAnalysisPolicy": {
      "type": "object",
      "properties": {
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configAccessReviewAnalysisCheck"
          },
          "description": "It has list of the rules and settings related to the access review analysis."
        }
      }
    },
    "configAccessReviewIdentityStatusCheck": {
      "type": "object",
      "properties": {
        "matchCriteria": {
          "$ref": "#/definitions/EnumsMatchCriteriaMessageEnumsMatchCriteria",
          "description": "Matches any of the identity status."
        },
        "identityStatus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configIdentityStatus"
          }
        }
      }
    },
    "configAccessReviewPolicyLastUsageCheck": {
      "type": "object",
      "properties": {
        "policyLastUsageThresholdSecs": {
          "type": "integer",
          "format": "int64",
          "title": "Supports only LESS_THAN for Integer values.\ngoogle.protobuf.Duration policy_last_usage_threshold_secs = 2;"
        }
      }
    },
    "configAccessReviewRecentlyApprovedCheck": {
      "type": "object",
      "properties": {
        "lastApprovalThresholdSeconds": {
          "type": "integer",
          "format": "int64",
          "title": "Supprots only LESS_THAN for Integer values.\nDefault = 90 days\ngoogle.protobuf.Duration last_approval_threshold_secs = 2;"
        }
      }
    },
    "configAccessReviewRoleBlastRiskCheck": {
      "type": "object",
      "properties": {
        "matchCriteria": {
          "$ref": "#/definitions/configMatchCriteria"
        },
        "blastRiskThreshold": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "configAccessReviewRuleCondition": {
      "type": "object",
      "properties": {
        "matchProviderType": {
          "$ref": "#/definitions/configProviderTypeMatch",
          "description": "Supports only EQUALS for String values."
        }
      }
    },
    "configAccessReviewerIdentityTemplate": {
      "type": "object",
      "properties": {
        "identityId": {
          "type": "string",
          "description": "IdentityId is the Andromeda UUID of the identity objects."
        }
      }
    },
    "configAccountExclusionRule": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "matchTarget": {
          "$ref": "#/definitions/configMatchTarget"
        }
      }
    },
    "configAccountMode": {
      "type": "string",
      "enum": [
        "ACCOUNT_MODE_OBSERVATION",
        "ACCOUNT_MODE_ENFORCEMENT",
        "ACCOUNT_MODE_UNSPECIFIED"
      ],
      "default": "ACCOUNT_MODE_OBSERVATION",
      "description": "Mode of the account whether Andromeda is setup in observation or enforcement mode.enum\nIn the observer mode, Andromeda will only observe the resources and will not enforce any policies.\nIn the enforcement mode, Andromeda will enforce the privilege management policies including\nper identity Least Standing Privilege and Just In Time Privilege."
    },
    "configActiveDirectoryConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Uuid of the Active Directory Configuration"
        },
        "providerId": {
          "type": "string",
          "title": "Provider Id of the Base Active Directory Provider Type"
        },
        "tenantId": {
          "type": "string"
        },
        "ldapFilters": {
          "$ref": "#/definitions/configLDAPFilters",
          "title": "LDAP Filters that needs to be applied when fetching data from Active Directory(LDAP)"
        },
        "brokers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "authConfig": {
          "$ref": "#/definitions/configADAuthConfig"
        },
        "activeDirectoryEndpoint": {
          "type": "string"
        },
        "baseDn": {
          "type": "string"
        },
        "bindDn": {
          "type": "string"
        },
        "userDataMappingProfile": {
          "$ref": "#/definitions/configUserDataMappingProfile"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "id",
        "providerId",
        "tenantId"
      ]
    },
    "configActivityLogWorkflowConfiguration": {
      "type": "object",
      "properties": {
        "workflowIntervalMins": {
          "type": "integer",
          "format": "int32",
          "title": "Interval in minutes for the workflow to run"
        },
        "publishToKafka": {
          "type": "boolean",
          "title": "Enable or disable publishing logs to Kafka"
        },
        "initialLogsFetchDays": {
          "type": "integer",
          "format": "int32",
          "description": "The number of days of historical logs to fetch initially."
        },
        "concurrentFileDownloadsPerProvider": {
          "type": "integer",
          "format": "int32",
          "title": "The number of concurrent file to download per provider"
        },
        "windowTimeMins": {
          "type": "integer",
          "format": "int32",
          "title": "Sliding Window Interval of log processor"
        },
        "eventHubMessageReceiveIdleTimeoutSecs": {
          "type": "integer",
          "format": "int32",
          "title": "Timeout for receiving messages from the Event Hub in seconds"
        },
        "eventHubBatchSize": {
          "type": "integer",
          "format": "int32",
          "title": "Batch size of messages to be pulled from Event Hub"
        },
        "maxConcurrentOperations": {
          "type": "integer",
          "format": "int32",
          "title": "Maximum number of coroutines to run concurrently"
        },
        "s3ReplayConfig": {
          "$ref": "#/definitions/configS3ReplayConfig",
          "description": "Replay logs from S3. Only used for historical logs."
        }
      }
    },
    "configAdditionalLicenseActions": {
      "type": "object",
      "properties": {
        "permissionSetLicense": {
          "type": "boolean",
          "title": "Whether to add/revoke permission set licenses along with PSG"
        },
        "managedPackageLicense": {
          "type": "boolean",
          "title": "Whether to add/revoke managed package licenses along with PSG"
        }
      }
    },
    "configAdpProviderConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "pemCertificate": {
          "type": "string",
          "title": "validation"
        },
        "pemKey": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "apiEndpoint": {
          "type": "string",
          "title": "optional"
        },
        "providerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "id",
        "tenantId"
      ]
    },
    "configAnalysisModel": {
      "type": "string",
      "enum": [
        "MODEL_UNSPECIFIED",
        "POLICY_USAGE_BEHAVIOR",
        "GEO_LOCATION_PATTERN",
        "DEVICE_PATTERN",
        "AUTH_FAILURE_BEHAVIOUR",
        "GEO_LOCATION_BEHAVIOR",
        "DEVICE_BEHAVIOR",
        "POLICY_USAGE_BEHAVIOR_SEASONAL"
      ],
      "default": "MODEL_UNSPECIFIED",
      "title": "import \"andromeda/nonpublic/static/ariel/ariel.proto\";"
    },
    "configApplicationSettings": {
      "type": "object",
      "properties": {
        "accessKeyRotationDays": {
          "type": "integer",
          "format": "int64",
          "description": "Access Key rotation properties. If value is not set (0), then the default is set to 30 days."
        },
        "accessKeyInactivityDays": {
          "type": "integer",
          "format": "int64"
        },
        "overprovisionedPermissionsThreshold": {
          "type": "integer",
          "format": "int64",
          "description": "If the unused permissions is above this threshold then role is marked\noverprovisioned in that context.\nFor NHI this would be the considered the permissions nhi has vs using it\nin that account. Default: 20%. Zero means Andromeda default of 20%."
        }
      }
    },
    "configAssumeRole": {
      "type": "object",
      "properties": {
        "roleName": {
          "type": "string",
          "description": "The Name of the AWS IAM Role that will be assumed to access into\nthe target AWS account. The role allows the entity assuming the role\nto access resources in the target account based on the role's permissions."
        },
        "roleAccountId": {
          "type": "string",
          "description": "The AWS Account Id of the AWS IAM Role that will be assumed to access into\nthe target AWS Account."
        },
        "externalId": {
          "type": "string",
          "description": "An optional external Id that can be provided as an additional\nsecurity measure when assuming the role. The external ID is used to\nfurther restrict the entities that are allowed to assume the role.\nWhen present, the external ID must match the value expected by the\ntrusted AWS account that owns the role, as defined in the trust policy."
        }
      }
    },
    "configAssumeRoleWithCredentials": {
      "type": "object",
      "properties": {
        "accessKeyId": {
          "type": "string",
          "description": "AWS access key Id associated with the IAM service account."
        },
        "secretAccessKey": {
          "type": "string",
          "description": "AWS secret access key associated with the IAM service account."
        },
        "roleName": {
          "type": "string",
          "description": "The Name of the AWS IAM Role that will be assumed for access into\nthe target AWS account. The role allows the entity assuming the role\nto access resources in the target account based on the role's permissions."
        },
        "roleAccountId": {
          "type": "string",
          "description": "The AWS Account Id of the AWS IAM Role that will be assumed to access into\nthe target AWS Account."
        },
        "externalId": {
          "type": "string",
          "description": "An optional external Id that can be provided as an additional\nsecurity measure when assuming the role. The external ID is used to\nfurther restrict the entities that are allowed to assume the role.\nWhen present, the external ID must match the value expected by the\ntrusted AWS account that owns the role, as defined in the trust policy."
        }
      }
    },
    "configAtlasApiKey": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string"
        },
        "privateKey": {
          "type": "string"
        }
      }
    },
    "configAtlasAuthConfig": {
      "type": "object",
      "properties": {
        "authMode": {
          "$ref": "#/definitions/configAtlasAuthModeMode"
        },
        "apiKey": {
          "$ref": "#/definitions/configAtlasApiKey"
        }
      }
    },
    "configAtlasAuthModeMode": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "API_KEY"
      ],
      "default": "UNSPECIFIED"
    },
    "configAtlasDatabaseAuthConfig": {
      "type": "object",
      "properties": {
        "authMode": {
          "$ref": "#/definitions/configAtlasDatabaseAuthModeMode"
        },
        "passwordAuth": {
          "$ref": "#/definitions/configAtlasDatabasePasswordAuth"
        }
      }
    },
    "configAtlasDatabaseAuthModeMode": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "PASSWORD_AUTH"
      ],
      "default": "UNSPECIFIED"
    },
    "configAtlasDatabasePasswordAuth": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "configAtlasProviderConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "atlasAuthConfig": {
          "$ref": "#/definitions/configAtlasAuthConfig",
          "title": "Auth configuration for accessing Atlas Database"
        },
        "organizationId": {
          "type": "string"
        },
        "atlasDatabaseAuthConfig": {
          "$ref": "#/definitions/configAtlasDatabaseAuthConfig",
          "title": "Auth configuration for accessing Atlas Database"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "id",
        "providerId",
        "tenantId",
        "organizationId"
      ]
    },
    "configAtlassianAuth": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "The organization ID of the Atlassian instance."
        },
        "adminApiToken": {
          "type": "string",
          "description": "The API token of the Atlassian admin."
        }
      }
    },
    "configAttrNameMatch": {
      "type": "object",
      "properties": {
        "attrName": {
          "type": "string"
        }
      }
    },
    "configAuditLoggingWorkflowConfiguration": {
      "type": "object",
      "properties": {
        "workflowIntervalMins": {
          "type": "integer",
          "format": "int32",
          "title": "The configuration for the PubSub logging sink.\nInterval in minutes for the workflow to run"
        },
        "publishToKafka": {
          "type": "boolean",
          "title": "Enable or disable publishing logs to Kafka"
        },
        "initialLogsFetchDays": {
          "type": "integer",
          "format": "int32",
          "description": "The number of days of historical logs to fetch initially."
        },
        "windowTimeMins": {
          "type": "integer",
          "format": "int32",
          "title": "Sliding Window Interval of log processor"
        },
        "messageReceiveIdleTimeoutSecs": {
          "type": "integer",
          "format": "int32",
          "title": "Timeout for receiving messages from the Pub Sub in seconds"
        },
        "pubSubBatchSize": {
          "type": "integer",
          "format": "int32",
          "title": "Batch size of messages to be pulled from Pub Sub"
        },
        "maxConcurrentOperations": {
          "type": "integer",
          "format": "int32",
          "title": "Maximum number of goroutines to run concurrently"
        },
        "maxRealtimeEndTimeHours": {
          "type": "integer",
          "format": "int32",
          "title": "Maximum end time from now for realtime logs in hours"
        },
        "s3ReplayConfig": {
          "$ref": "#/definitions/configS3ReplayConfig",
          "title": "S3 replay config"
        }
      },
      "title": "Internal Configurations"
    },
    "configAuthConfig": {
      "type": "object",
      "properties": {
        "authMode": {
          "$ref": "#/definitions/configAWSAuthMode",
          "description": "The authentication mode to be used for accessing AWS resources."
        },
        "assumeRole": {
          "$ref": "#/definitions/configAssumeRole",
          "description": "Information about assuming an AWS role for access."
        },
        "staticCredentials": {
          "$ref": "#/definitions/configStaticCredentials",
          "description": "Static AWS credentials for direct access."
        },
        "assumeRoleWithCredentials": {
          "$ref": "#/definitions/configAssumeRoleWithCredentials",
          "description": "Information about assuming an AWS role for access and\nusing static credentials for the assumed role."
        }
      }
    },
    "configAwsPolicyStatement": {
      "type": "object",
      "properties": {
        "sid": {
          "type": "string",
          "title": "Andromeda ID of the policy statement"
        },
        "effect": {
          "type": "string"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "conditionJson": {
          "type": "string"
        }
      },
      "title": "{\n \"Sid\": \"uuid-jit-request-id-123\",\n \"Effect\": \"Allow\",\n \"Action\": [\n   \"s3:ListAllMyBuckets\",\n   \"s3:GetBucketLocation\"\n ],\n \"Resource\": \"arn:aws:s3:::*\"\n},"
    },
    "configAwsResourcePermissionSetData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Andromeda ID of the permission set"
        },
        "name": {
          "type": "string",
          "description": "populated only when the eligibility type is RESOURCE_SET_ASSIGNMENT",
          "title": "Name of the permission set"
        },
        "policyStatements": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configAwsPolicyStatement"
          }
        }
      }
    },
    "configAzureAuthConfig": {
      "type": "object",
      "properties": {
        "authMode": {
          "$ref": "#/definitions/configAzureAuthMode"
        },
        "staticCredentials": {
          "$ref": "#/definitions/configAzureStaticCredentials"
        }
      }
    },
    "configAzureAuthMode": {
      "type": "string",
      "enum": [
        "AZURE_AUTHMODE_UNSPECIFIED",
        "AZURE_AUTHMODE_STATIC_CREDENTIALS"
      ],
      "default": "AZURE_AUTHMODE_UNSPECIFIED"
    },
    "configAzureBlobStorageConfiguration": {
      "type": "object",
      "properties": {
        "blobStorageConfigs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configBlobStorageConfiguration"
          },
          "title": "List of Blob Storage details to listen"
        },
        "authConfig": {
          "$ref": "#/definitions/configAzureAuthConfig",
          "title": "Default Auth configuration"
        }
      }
    },
    "configAzureConditions": {
      "type": "object",
      "properties": {
        "resolvedRawCode": {
          "type": "string",
          "title": "resolved_raw_code is an output only field created after processing data"
        },
        "rawCode": {
          "type": "string",
          "title": "raw_code is user input in azure role assignment condition code syntax\nhttps://learn.microsoft.com/en-us/azure/role-based-access-control/conditions-format"
        },
        "conditionsRules": {
          "$ref": "#/definitions/configAzureRoleAssignmentConditionsRules",
          "title": "condition_rules is a structured way for clients to represent raw code\nthis structure cannot represent azure condition expression groups"
        }
      }
    },
    "configAzureEventHubConfiguration": {
      "type": "object",
      "properties": {
        "eventHubConfigs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configEventHubConfiguration"
          },
          "title": "List of Event Hubs details to listen"
        },
        "authConfig": {
          "$ref": "#/definitions/configAzureAuthConfig",
          "title": "Default Auth configuration"
        }
      }
    },
    "configAzureLogAnalyticsWorkspaceConfgiruation": {
      "type": "object",
      "properties": {
        "workspaceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Workspace ID"
        },
        "authConfig": {
          "$ref": "#/definitions/configAzureAuthConfig",
          "title": "Auth configuration for accessing Log Analytics Workspace"
        }
      },
      "required": [
        "workspaceIds"
      ]
    },
    "configAzureLogsConfigurations": {
      "type": "object",
      "properties": {
        "eventHub": {
          "$ref": "#/definitions/configAzureEventHubConfiguration",
          "title": "RT"
        },
        "blobStorage": {
          "$ref": "#/definitions/configAzureBlobStorageConfiguration",
          "title": "RT and HT"
        },
        "logAnalyticsWorkspace": {
          "$ref": "#/definitions/configAzureLogAnalyticsWorkspaceConfgiruation",
          "title": "RT and HT"
        }
      }
    },
    "configAzureProviderConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "azureTenantId": {
          "type": "string"
        },
        "authConfig": {
          "$ref": "#/definitions/configAzureAuthConfig"
        },
        "logsConfig": {
          "$ref": "#/definitions/configAzureLogsConfigurations"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "enableResourceInventory": {
          "type": "boolean"
        },
        "mode": {
          "$ref": "#/definitions/AndromedaModeMessageAndromedaMode",
          "description": "Andromeda mode for the provider."
        },
        "accessRequestProvisioningConfig": {
          "$ref": "#/definitions/configAccessRequestProvisioningConfig",
          "description": "When the Andromeda mode is enforcement then the access request provisioning config is required."
        },
        "defaultAccessRequestProfileId": {
          "type": "string",
          "description": "JitPolicyProfile binding with the provider."
        }
      },
      "required": [
        "id",
        "providerId",
        "tenantId",
        "azureTenantId"
      ]
    },
    "configAzureResourceMatch": {
      "type": "object",
      "properties": {
        "resourceTagMatch": {
          "$ref": "#/definitions/configTagMatch",
          "title": "attribute_source = RESOURCE\nattribute = Tags"
        }
      }
    },
    "configAzureRoleAssignmentCondition": {
      "type": "object",
      "properties": {
        "matches": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configAzureRoleAssignmentMatchTarget"
          },
          "description": "repeated string actions = 1;\nExpressions are ANDed together."
        }
      }
    },
    "configAzureRoleAssignmentConditionsRules": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configAzureRoleAssignmentCondition"
          },
          "title": "supporting only one"
        }
      }
    },
    "configAzureRoleAssignmentMatchTarget": {
      "type": "object",
      "properties": {
        "resourceMatch": {
          "$ref": "#/definitions/configAzureResourceMatch",
          "description": "add oneof support for various attributes. This just supports resourceMatch for now."
        }
      }
    },
    "configAzureStaticCredentials": {
      "type": "object",
      "properties": {
        "applicationId": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        }
      }
    },
    "configAzureWorkflowConfiguration": {
      "type": "object",
      "properties": {
        "inventoryWorkflowIntervalMins": {
          "type": "integer",
          "format": "int32"
        },
        "s3Sink": {
          "$ref": "#/definitions/configCloudTrailS3Sink",
          "title": "Andromeda S3 bucket configuration"
        },
        "realtimeLogsWorkflowConfig": {
          "$ref": "#/definitions/configActivityLogWorkflowConfiguration"
        },
        "historicalLogsWorkflowConfig": {
          "$ref": "#/definitions/configActivityLogWorkflowConfiguration"
        },
        "fullInventoryRefreshIntervalMins": {
          "type": "integer",
          "format": "int32",
          "title": "If non-zero, this value will override the pod config"
        },
        "analyticsInventoryWorkflowIntervalMins": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "------ AzureWorkflowConfiguration -----\r\ntenant internal configuration for azure"
    },
    "configBasicAuth": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "username",
        "password"
      ]
    },
    "configBlobStorageConfiguration": {
      "type": "object",
      "properties": {
        "storageAccountName": {
          "type": "string",
          "title": "Storage account name"
        },
        "containerName": {
          "type": "string",
          "title": "Name of the container in the storage account"
        },
        "authConfig": {
          "$ref": "#/definitions/configAzureAuthConfig",
          "title": "Auth configuration for accessing Blob Storage"
        }
      },
      "required": [
        "storageAccountName",
        "containerName"
      ]
    },
    "configBroker": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        }
      }
    },
    "configBrokerAuthConfig": {
      "type": "object",
      "properties": {
        "hmac": {
          "$ref": "#/definitions/configHMACConfig",
          "title": "MTLSConfig for mutual TLS authentication\nMTLSConfig mtls = 1;"
        }
      }
    },
    "configBrokerAuthConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "readOnly": true
        },
        "brokerId": {
          "type": "string"
        },
        "authMode": {
          "$ref": "#/definitions/configBrokerAuthMode"
        },
        "brokerAuthConfig": {
          "$ref": "#/definitions/configBrokerAuthConfig"
        }
      }
    },
    "configBrokerAuthMode": {
      "type": "string",
      "enum": [
        "BROKER_AUTHMODE_UNSPECIFIED",
        "BROKER_AUTHMODE_HMAC"
      ],
      "default": "BROKER_AUTHMODE_UNSPECIFIED"
    },
    "configBrokerProviderMapper": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "readOnly": true
        },
        "brokerId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        }
      }
    },
    "configCampaignAccessRevocationPolicy": {
      "type": "object",
      "properties": {
        "accessRevocationCheckEnabled": {
          "type": "boolean"
        },
        "automatedAccessRevocationEnabled": {
          "type": "boolean"
        },
        "groupMembershipRevocationEnabled": {
          "type": "boolean",
          "title": "If assignment is via group membership. Currently valid only if automated_access_revocation_enabled set and PROVIDER campaign type\nbelow variable can be set only if automated_access_revocation_enabled is set to true.  add validations in proto"
        }
      }
    },
    "configCampaignNotificationsConfig": {
      "type": "object",
      "properties": {
        "reviewReminderIntervalDays": {
          "type": "integer",
          "format": "int32"
        },
        "dailyReminderThresholdDays": {
          "type": "integer",
          "format": "int32",
          "title": "reviewer_reminder_interval = 1;"
        }
      }
    },
    "configCampaignOwnersTemplate": {
      "type": "object",
      "properties": {
        "identityTemplate": {
          "$ref": "#/definitions/configIdentityPersonaCampaignOwnersTemplate",
          "title": "AccountAdminCampaignOwnersTemplate account_admin_template = 2;\n ProviderAdminCampaignOwnersTemplate provider_admin_template = 3;"
        }
      }
    },
    "configCampaignReviewerAssignmentScheme": {
      "type": "object",
      "properties": {
        "personaType": {
          "$ref": "#/definitions/CampaignReviewerPersonaTypeMessageCampaignReviewerPersonaType",
          "description": "ReviewerAssignmentTemplate is the persona and their corresponding templates\nwhich will be used to assign the reviewer to the AccessRequest."
        },
        "identityReviewerTemplate": {
          "$ref": "#/definitions/configAccessReviewerIdentityTemplate"
        }
      }
    },
    "configCampaignScheduleConfig": {
      "type": "object",
      "properties": {
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "The start date of the scheduled campaign."
        },
        "autoActivateCampaign": {
          "type": "boolean",
          "title": "By default the campaign will be created in ready state.\nIf true, the campaign will be activated automatically after the schedule is created.\nDefault is false"
        },
        "reccurence": {
          "$ref": "#/definitions/configReccurenceSettings",
          "description": "Optional. If not specified, the campaign will run only once.\nIf specified, the campaign will run according to the reccurence settings.\nAssumption is that the campaign will be scheduled to run at 00:00 UTC\nand kickoff on the start + interval*frequency day. Exact time is not configurable\nand the campaign will run for all the days in the interval.\nThe duration of the campaign is based on the duration_days in the reccurence settings.\nThe campaign completion date is the recurrence date + duration_days."
        },
        "campaignDuration": {
          "type": "string",
          "format": "int64",
          "title": "start_date + campaign_duration specifies the campaigns target completion time\ncampaign_duration is in seconds"
        }
      }
    },
    "configCelExpression": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "string"
        }
      }
    },
    "configChiSquareTestConfiguration": {
      "type": "object",
      "properties": {
        "chiSquareConfidence": {
          "type": "number",
          "format": "double",
          "description": "The confidence for this tenant. Usually 5%."
        },
        "dirichletDistributionMaxSamplesPerCategory": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of samples per category for prior dirichlet distribution. Any value beyond that will be capped."
        },
        "baselineMinSamples": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of samples in baseline data for the category subset that must be there for a analysis."
        },
        "baselineMinSamplesPerCategory": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of samples in baseline data per category for the category subset that must be there for a analysis."
        }
      },
      "required": [
        "chiSquareConfidence",
        "dirichletDistributionMaxSamplesPerCategory",
        "baselineMinSamples",
        "baselineMinSamplesPerCategory"
      ]
    },
    "configCloudTrailConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "true will override provider configuration"
        },
        "cloudtrailArn": {
          "type": "string",
          "title": "arn that needs to be overridden"
        },
        "cloudTrailOverrideDetails": {
          "$ref": "#/definitions/configCloudTrailOverrideDetails",
          "title": "details for the cloudtrail override"
        }
      }
    },
    "configCloudTrailKafkaSink": {
      "type": "object",
      "properties": {
        "topic": {
          "type": "string"
        }
      }
    },
    "configCloudTrailOverrideDetails": {
      "type": "object",
      "properties": {
        "s3BucketName": {
          "type": "string",
          "title": "s3 configuration of internal provider"
        },
        "s3BucketPrefix": {
          "type": "string"
        },
        "s3BucketRegion": {
          "type": "string"
        }
      }
    },
    "configCloudTrailS3Sink": {
      "type": "object",
      "properties": {
        "bucketName": {
          "type": "string"
        },
        "bucketRegion": {
          "type": "string"
        },
        "authConfig": {
          "$ref": "#/definitions/configAuthConfig",
          "title": "Andromeda S3 Bucket Auth details"
        }
      }
    },
    "configConfiguredSOTAction": {
      "type": "object"
    },
    "configCriticality": {
      "type": "string",
      "enum": [
        "CRITICALITY_UNSPECIFIED",
        "CRITICALITY_LOW",
        "CRITICALITY_MEDIUM",
        "CRITICALITY_HIGH",
        "CRITICALITY_CRITICAL"
      ],
      "default": "CRITICALITY_UNSPECIFIED"
    },
    "configCustomAppInternalConfiguration": {
      "type": "object",
      "properties": {
        "bucketName": {
          "type": "string"
        },
        "bucketRegion": {
          "type": "string"
        },
        "authConfig": {
          "$ref": "#/definitions/configAuthConfig",
          "title": "Andromeda S3 Bucket Auth details"
        }
      },
      "description": "TBD: should we keep common S3 buckets for all tenant file or create a new bucket for each use case?\nAt minimum we need to have a different folder for each tenant and each use case."
    },
    "configCustomAppProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Uuid of the Custom Provider Configuration"
        },
        "providerId": {
          "type": "string",
          "title": "Provider Id of the Base Custom Provider Type"
        },
        "tenantId": {
          "type": "string"
        },
        "inventoryFileId": {
          "type": "string"
        },
        "inventoryFileType": {
          "$ref": "#/definitions/configFileType"
        },
        "translatorFileId": {
          "type": "string"
        },
        "translatorFileType": {
          "$ref": "#/definitions/configFileType"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "The CSV file that is used for importing the custom applications data",
          "readOnly": true
        }
      },
      "title": "Custom Provider Configuration",
      "required": [
        "id",
        "providerId",
        "tenantId"
      ]
    },
    "configDevicePatternConfiguration": {
      "type": "object",
      "properties": {
        "numDaysRewind": {
          "type": "integer",
          "format": "int32"
        },
        "tooManyDevicesThreshold": {
          "type": "number",
          "format": "double"
        },
        "unknownDeviceThreshold": {
          "type": "number",
          "format": "double"
        },
        "deviceHistoryNumDays": {
          "type": "integer",
          "format": "int32"
        },
        "kDeviceCount": {
          "type": "number",
          "format": "double"
        },
        "k1UnknownDevice": {
          "type": "number",
          "format": "double"
        },
        "k2UnknownDevice": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "numDaysRewind",
        "tooManyDevicesThreshold",
        "unknownDeviceThreshold",
        "deviceHistoryNumDays",
        "kDeviceCount",
        "k1UnknownDevice",
        "k2UnknownDevice"
      ]
    },
    "configEligibilityConstraint": {
      "type": "object",
      "properties": {
        "scopeType": {
          "$ref": "#/definitions/ScopeTypeEnumScopeType"
        },
        "scopeTagConstraint": {
          "$ref": "#/definitions/configScopeTagConstraint"
        },
        "resourceGroupIdConstraint": {
          "$ref": "#/definitions/configResourceGroupIdConstraints"
        }
      }
    },
    "configEligibilityConstraintTagMatch": {
      "type": "object",
      "properties": {
        "tagKey": {
          "type": "string"
        },
        "matchCriteria": {
          "$ref": "#/definitions/configMatchCriteria",
          "description": "MatchCriteria only supports EQUALS only."
        },
        "tagValue": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configEntitlementTypeMessageEntitlementType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "ROLE_ASSIGNMENT",
        "USER_GROUP_ASSIGNMENT",
        "PROVIDER_ASSIGNMENT",
        "ACCOUNT_ASSIGNMENT"
      ],
      "default": "UNSPECIFIED",
      "title": "- ROLE_ASSIGNMENT: The entitlement is a role assignment in a provider.\nThe case of access to an application is also a role assignment as access to\nthe unit role in the application.\n - USER_GROUP_ASSIGNMENT: The entitlement is a user membership in a group\n - PROVIDER_ASSIGNMENT: The entitlement is a user access at provider level - cloud or application\n - ACCOUNT_ASSIGNMENT: The entitlement is a user access at account level within a provider"
    },
    "configEntraProviderConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "entraTenantId": {
          "type": "string"
        },
        "authConfig": {
          "$ref": "#/definitions/configAzureAuthConfig"
        },
        "logsConfig": {
          "$ref": "#/definitions/configAzureLogsConfigurations"
        },
        "useHrTypeForGuestUsers": {
          "$ref": "#/definitions/configHrType",
          "description": "If not hr_type is set to unspecified then the normal rules apply.\nAllows flexibility for the admins to change the HR_TYPE for the guest users.\nAndromeda UI and API will default to THIRD_PARTY for guest users."
        },
        "userDataMappingProfile": {
          "$ref": "#/definitions/configUserDataMappingProfile"
        },
        "defaultExcludeApps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "excludeEntraApps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enableApplicationProviderDiscovery": {
          "type": "boolean"
        },
        "enableShadowAppsDiscovery": {
          "type": "boolean"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "mode": {
          "$ref": "#/definitions/AndromedaModeMessageAndromedaMode",
          "description": "Andromeda mode for the provider."
        },
        "accessRequestProvisioningConfig": {
          "$ref": "#/definitions/configAccessRequestProvisioningConfig",
          "description": "When the Andromeda mode is enforcement then the access request provisioning config is required."
        },
        "defaultAccessRequestProfileId": {
          "type": "string",
          "description": "JitPolicyProfile binding with the provider."
        }
      },
      "required": [
        "id",
        "providerId",
        "tenantId",
        "entraTenantId"
      ]
    },
    "configEnvironment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "criticality": {
          "$ref": "#/definitions/configCriticality",
          "description": "This sets the criticality of the environment\nSetting this will automatically set the criticality value the account based\nwhich will impact the Risk computation for the members of the account."
        },
        "tenantId": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean",
          "title": "Ideally we should have a db constraint allowing this to be true for only one tenant, which we do not right now.\nfor now in the environment API we will NOT allow to\n - update this field for any row\n - delete a row where this field is set to true\n - will allow to create a env with is_default = true if and only if there is not other default env for this tenant"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "tenantId"
      ]
    },
    "configEnvironmentMappingPolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configEnvironmentMappingRule"
          }
        },
        "tenantId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "tenantId",
        "providerId"
      ]
    },
    "configEnvironmentMappingRule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "matchTarget": {
          "$ref": "#/definitions/configMatchTarget",
          "title": "Need to enhance it to list the allowed match types\nTo start with it is only matching the tags and name of the account"
        },
        "lookupTagValue": {
          "type": "boolean",
          "description": "Definition: It will take the first tag that matched this rule and extract the value from it.\nIn a situation when multiple tags can match then admins should use a full\ntag and value match option to avoid ambiguity."
        },
        "environmentId": {
          "type": "string"
        }
      },
      "title": "*\nThere are two use cases\n1. The Key Identifier and the value map it to the environment configured in Andromeda\n2. The Key, value to map to a specific environment in Andromeda",
      "required": [
        "name",
        "enabled"
      ]
    },
    "configEventHubConfiguration": {
      "type": "object",
      "properties": {
        "eventHubNamespace": {
          "type": "string",
          "title": "Full name of Event Hub Namespace (eg. myeventhubnamespace.servicebus.windows.net)"
        },
        "eventHubName": {
          "type": "string",
          "title": "Name of Event Hub to listen"
        },
        "consumerGroup": {
          "type": "string",
          "title": "Consumer Group in the Event Hub from which the events has to be consumed"
        },
        "authConfig": {
          "$ref": "#/definitions/configAzureAuthConfig",
          "title": "Auth configuration for accessing Event Hub"
        }
      },
      "required": [
        "eventHubNamespace",
        "eventHubName"
      ]
    },
    "configEwmaModelConfiguration": {
      "type": "object",
      "properties": {
        "alpha": {
          "type": "number",
          "format": "double",
          "title": "The alpha value for the model"
        },
        "threshold": {
          "type": "number",
          "format": "double",
          "title": "The threshold for the model"
        },
        "minRetentionPeriod": {
          "type": "integer",
          "format": "int32",
          "title": "The minimum retention period for the model"
        },
        "backlogDays": {
          "type": "integer",
          "format": "int32",
          "title": "The backlog period for the model"
        },
        "peerPercentile": {
          "type": "number",
          "format": "float",
          "title": "The percentile of the peer group used to measure peer usage"
        }
      },
      "required": [
        "alpha",
        "threshold",
        "minRetentionPeriod",
        "backlogDays",
        "peerPercentile"
      ]
    },
    "configExternalNhiInsightAction": {
      "type": "object",
      "properties": {
        "operation": {
          "$ref": "#/definitions/ExternalNhiInsightOperationTypeMessageExternalNhiInsightOperationType"
        }
      },
      "title": "Adds or removes action for significance for the NHIs matching the pattern.\nThere are two scenarios for the classification\n1. ADD - Adds the significance to the NHIs matching the pattern like service principals in Azure.\n     {\n       \"operation\": \"ADD\",\n     }\n2. REMOVE - Removes the significance from the NHIs matching the pattern for AWS External clients in AWS.\n     {\n       \"operation\": \"REMOVE\",\n     }"
    },
    "configExternalResourceType": {
      "type": "string",
      "enum": [
        "RESOURCE_TYPE_UNKNOWN",
        "RESOURCE_TYPE_AWS_ACCOUNT",
        "RESOURCE_TYPE_AWS_PERMISSIONSET",
        "RESOURCE_TYPE_IAM_ROLE",
        "RESOURCE_TYPE_AWS_IAM_USER",
        "RESOURCE_TYPE_IAM_INSTANCE_PROFILE",
        "RESOURCE_TYPE_AWS_IDENTITY_CENTER_GROUP",
        "RESOURCE_TYPE_AWS_IAM_GROUP",
        "RESOURCE_TYPE_AWS_IDENTITY_CENTER_USER",
        "RESOURCE_TYPE_HR_USER",
        "RESOURCE_TYPE_IDP_USER",
        "RESOURCE_TYPE_PROVIDER_USER",
        "RESOURCE_TYPE_AWS_USER_POLICY",
        "RESOURCE_TYPE_AWS_GROUP_POLICY",
        "RESOURCE_TYPE_SLACK_USER",
        "RESOURCE_TYPE_AWS_SERVICE",
        "RESOURCE_TYPE_IDENTITY_PROVIDER",
        "RESOURCE_TYPE_EKS",
        "RESOURCE_TYPE_IDP_GROUP",
        "RESOURCE_TYPE_OIDC_URL",
        "RESOURCE_TYPE_IDP_APPLICATION",
        "RESOURCE_TYPE_IAM_OKTA_CONNECTOR",
        "RESOURCE_TYPE_IDP_APPLICATION_PROVIDER",
        "RESOURCE_TYPE_OKTA_UNIT_POLICY",
        "RESOURCE_TYPE_OKTA_SCIM_PUSH_GROUP_ROLE",
        "RESOURCE_TYPE_PROVIDER",
        "RESOURCE_TYPE_ENTRA_UNIT_POLICY",
        "RESOURCE_TYPE_ENTRA_APPLICATION_ROLE",
        "RESOURCE_TYPE_ENTRA_DEFAULT_ACCESS_POLICY",
        "RESOURCE_TYPE_AZURE_SUBSCRIPTION",
        "RESOURCE_TYPE_AZURE_ENTRA_USER",
        "RESOURCE_TYPE_AZURE_ENTRA_GROUP",
        "RESOURCE_TYPE_AZURE_ROLE",
        "RESOURCE_TYPE_AZURE_RESOURCE_GROUP",
        "RESOURCE_TYPE_AZURE_MANAGEMENT_GROUP",
        "RESOURCE_TYPE_AZURE_SERVICE_PRINCIPAL",
        "RESOURCE_TYPE_AZURE_STORAGE_ACCOUNT",
        "RESOURCE_TYPE_AZURE_SERVICE_INSTANCE",
        "RESOURCE_TYPE_AZURE_ENTRA_UPN",
        "RESOURCE_TYPE_CUSTOM_APPLICATION_USER",
        "RESOURCE_TYPE_CUSTOM_APPLICATION_PROVIDER",
        "RESOURCE_TYPE_CUSTOM_APPLICATION_ROLE",
        "RESOURCE_TYPE_ENTRA_TENANT",
        "RESOURCE_TYPE_ENTRA_ROLE",
        "RESOURCE_TYPE_WORKSPACE_USER",
        "RESOURCE_TYPE_WORKSPACE_GROUP",
        "RESOURCE_TYPE_GCP_PROJECT",
        "RESOURCE_TYPE_GCP_SERVICE_ACCOUNT",
        "RESOURCE_TYPE_GCP_FOLDER",
        "RESOURCE_TYPE_GCP_ROLE",
        "RESOURCE_TYPE_GCP_ORGANIZATION",
        "RESOURCE_TYPE_GCP_API_KEY",
        "RESOURCE_TYPE_WORKSPACE_ROLE",
        "RESOURCE_TYPE_GCP_STORAGE_BUCKET",
        "RESOURCE_TYPE_GCP_GKE_CLUSTER",
        "RESOURCE_TYPE_GCP_COMPUTE_INSTANCE",
        "RESOURCE_TYPE_SFDC_USER",
        "RESOURCE_TYPE_SFDC_GROUP",
        "RESOURCE_TYPE_SFDC_PERMISSION_SET",
        "RESOURCE_TYPE_SFDC_PERMISSION_SET_GROUP",
        "RESOURCE_TYPE_SFDC_PROFILE",
        "RESOURCE_TYPE_ACTIVE_DIRECTORY_USER",
        "RESOURCE_TYPE_ACTIVE_DIRECTORY_GROUP",
        "RESOURCE_TYPE_PINGONE_USER",
        "RESOURCE_TYPE_PINGONE_GROUP",
        "RESOURCE_TYPE_PINGONE_ROLE",
        "RESOURCE_TYPE_PINGONE_ENVIRONMENT",
        "RESOURCE_TYPE_PINGONE_ORGANIZATION",
        "RESOURCE_TYPE_PINGONE_POPULATION",
        "RESOURCE_TYPE_PINGONE_APPLICATION_ROLE",
        "RESOURCE_TYPE_AWS_EC2_INSTANCE",
        "RESOURCE_TYPE_AWS_S3_BUCKET",
        "RESOURCE_TYPE_AWS_RDS_INSTANCE",
        "RESOURCE_TYPE_AWS_SECRETS_MANAGER_SECRET",
        "RESOURCE_TYPE_AZURE_BLOB_CONTAINER",
        "RESOURCE_TYPE_ATLAS_PROJECT",
        "RESOURCE_TYPE_ATLAS_ORGANIZATION",
        "RESOURCE_TYPE_ATLAS_MANAGEMENT_USER",
        "RESOURCE_TYPE_ATLAS_MANAGEMENT_BUILTIN_ROLE",
        "RESOURCE_TYPE_ATLAS_MANAGEMENT_TEAM",
        "RESOURCE_TYPE_ATLAS_DATABASE_USER",
        "RESOURCE_TYPE_ATLAS_DATABASE_BUILTIN_ROLE",
        "RESOURCE_TYPE_ATLAS_DATABASE_CUSTOM_ROLE",
        "RESOURCE_TYPE_ATLAS_DATABASE_CLUSTER",
        "RESOURCE_TYPE_ATLAS_DATABASE_DB",
        "RESOURCE_TYPE_ATLAS_DATABASE_COLLECTION"
      ],
      "default": "RESOURCE_TYPE_UNKNOWN",
      "title": "- RESOURCE_TYPE_AZURE_SUBSCRIPTION: Azure resources 200 - 249\n - RESOURCE_TYPE_CUSTOM_APPLICATION_USER: Custom Applicaton resources 259 - 299\n - RESOURCE_TYPE_WORKSPACE_USER: GCP/Google Workspace\n - RESOURCE_TYPE_SFDC_USER: Salesforce\n - RESOURCE_TYPE_ACTIVE_DIRECTORY_USER: Active Directory\n - RESOURCE_TYPE_PINGONE_USER: PingOne\n - RESOURCE_TYPE_AWS_EC2_INSTANCE: Provider Resources\n - RESOURCE_TYPE_ATLAS_PROJECT: Atlas"
    },
    "configExternalUserStatusMatch": {
      "type": "object",
      "properties": {
        "matchCriteria": {
          "$ref": "#/definitions/EnumsMatchCriteriaMessageEnumsMatchCriteria"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalUserStatusMessageExternalUserStatus"
          }
        }
      }
    },
    "configFetchCondensedLogsActivityConfiguration": {
      "type": "object",
      "properties": {
        "initialInterval": {
          "type": "integer",
          "format": "int32"
        },
        "maximumAttempts": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "initialInterval",
        "maximumAttempts"
      ]
    },
    "configFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/configFileType"
        },
        "fileStorageType": {
          "$ref": "#/definitions/configFileStorageType"
        },
        "s3MetaData": {
          "$ref": "#/definitions/configS3Meta"
        },
        "localMeta": {
          "$ref": "#/definitions/configLocalMeta"
        },
        "providerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string",
          "title": "Currently not supported by our code-gen. This field is helpful in assigning tags to objects.\n map\u003cstring, int32\u003e metatags = 111;"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "size",
        "providerId",
        "tenantId"
      ]
    },
    "configFileStorageType": {
      "type": "string",
      "enum": [
        "LOCAL",
        "S3"
      ],
      "default": "LOCAL"
    },
    "configFileType": {
      "type": "string",
      "enum": [
        "WORKDAY_CSV",
        "ANDROMEDA_INVENTORY_JSON",
        "CUSTOM_TYPE1_INVENTORY_CSV",
        "INVENTORY_TRANSLATOR_FILE_PYTHON"
      ],
      "default": "WORKDAY_CSV",
      "title": "- CUSTOM_TYPE1_INVENTORY_CSV: The file is a JSON file"
    },
    "configGCPAuditLogsConfiguration": {
      "type": "object",
      "properties": {
        "pubsubLoggingConfig": {
          "$ref": "#/definitions/configGCPPubSubLoggingConfiguration"
        },
        "gcsStorage": {
          "$ref": "#/definitions/configGoogleCloudStorageLogsConfiguration"
        },
        "logsStorage": {
          "$ref": "#/definitions/configLogStorageConfiguration"
        }
      }
    },
    "configGCPProviderConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Uuid of the GCP Provider Configuration"
        },
        "organizationId": {
          "type": "string",
          "description": "Organization ID of the organization."
        },
        "authConfig": {
          "$ref": "#/definitions/configGoogleAuthConfig",
          "description": "The authentication configuration for accessing GCP resources."
        },
        "auditLogsConfig": {
          "$ref": "#/definitions/configGCPAuditLogsConfiguration",
          "description": "The Audit trail configuration for the organization."
        },
        "mode": {
          "$ref": "#/definitions/AndromedaModeMessageAndromedaMode",
          "description": "Andromeda mode for the provider."
        },
        "accessRequestProvisioningConfig": {
          "$ref": "#/definitions/configAccessRequestProvisioningConfig",
          "description": "When the Andromeda mode is enforcement then the access request provisioning config is required."
        },
        "defaultAccessRequestProfileId": {
          "type": "string",
          "description": "JitPolicyProfile binding with the provider."
        },
        "providerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "enableResourceInventory": {
          "type": "boolean"
        }
      },
      "title": "GCP Provider Configuration",
      "required": [
        "id",
        "organizationId",
        "providerId",
        "tenantId"
      ]
    },
    "configGCPPubSubLoggingConfiguration": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "description": "Project ID of the GCP project where the PubSub topic is created."
        },
        "subscriptionId": {
          "type": "string",
          "description": "The name of the PubSub Subscription for Andromeda to consume\nAudit log events."
        }
      },
      "required": [
        "projectId",
        "subscriptionId"
      ]
    },
    "configGCPServiceAccount": {
      "type": "object",
      "properties": {
        "keyJson": {
          "type": "string",
          "description": "JSON key of the service account."
        }
      }
    },
    "configGCPWorkflowConfiguration": {
      "type": "object",
      "properties": {
        "auditLoggingConfig": {
          "$ref": "#/definitions/configAuditLoggingWorkflowConfiguration",
          "description": "The configuration for the audit logging workflow."
        },
        "historicalAuditLoggingConfig": {
          "$ref": "#/definitions/configAuditLoggingWorkflowConfiguration"
        },
        "inventoryWorkflowIntervalMins": {
          "type": "integer",
          "format": "int32",
          "description": "The interval in minutes between inventory workflows."
        },
        "fullInventoryRefreshIntervalMins": {
          "type": "integer",
          "format": "int32"
        },
        "s3Sink": {
          "$ref": "#/definitions/configCloudTrailS3Sink",
          "title": "Andromeda S3 bucket configuration"
        }
      }
    },
    "configGeoLocationPatternConfiguration": {
      "type": "object",
      "properties": {
        "numDaysRewind": {
          "type": "integer",
          "format": "int32",
          "description": "This is for debugging, if we have x here, it will assume the JIT request aws\nmade X days back instead of now, helps us take suitable context window for testing."
        },
        "orgHistoryNumDays": {
          "type": "integer",
          "format": "int32",
          "title": "Number of days to go back to get org history"
        },
        "userHistoryNumDays": {
          "type": "integer",
          "format": "int32",
          "title": "Number of days to go back to get user history"
        },
        "maxTravelTimeDays": {
          "type": "integer",
          "format": "int32",
          "title": "Enough to check last n days to get most recent geo for impossible travel"
        }
      },
      "required": [
        "numDaysRewind",
        "orgHistoryNumDays",
        "userHistoryNumDays",
        "maxTravelTimeDays"
      ]
    },
    "configGoogleAuthConfig": {
      "type": "object",
      "properties": {
        "authMode": {
          "$ref": "#/definitions/configGoogleAuthModeMode",
          "description": "The authentication mode to be used for accessing GCP resources."
        },
        "serviceAccount": {
          "$ref": "#/definitions/configGCPServiceAccount"
        }
      }
    },
    "configGoogleAuthModeMode": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "SERVICE_ACCOUNT"
      ],
      "default": "UNSPECIFIED"
    },
    "configGoogleCloudStorageLogsConfiguration": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string"
        },
        "authConfig": {
          "$ref": "#/definitions/configGoogleAuthConfig",
          "title": "optional auth_config. will use the parent as fallback"
        }
      },
      "title": "GCS config"
    },
    "configGoogleWorkspaceProviderConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "adminEmail": {
          "type": "string",
          "title": "The service account need to impersonate the following user to access the resources"
        },
        "authConfig": {
          "$ref": "#/definitions/configGoogleAuthConfig"
        },
        "auditLogsConfig": {
          "$ref": "#/definitions/configGCPAuditLogsConfiguration",
          "description": "By default we will use reports API to get the audit logs.\nIn future this can be used to support audit logs using GCS or some other method."
        },
        "defaultExcludeApps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "excludeGoogleWorkspaceApps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enableApplicationProviderDiscovery": {
          "type": "boolean"
        },
        "enableShadowAppsDiscovery": {
          "type": "boolean"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "id",
        "providerId",
        "tenantId",
        "domain",
        "adminEmail",
        "authConfig"
      ]
    },
    "configGroupConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "groupId": {
          "type": "string",
          "readOnly": true
        },
        "providerId": {
          "type": "string",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "readOnly": true
        },
        "ownerIdentityIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/andromedautilsTag"
          },
          "title": "configured tags"
        }
      },
      "required": [
        "id"
      ]
    },
    "configGroupMatch": {
      "type": "object",
      "properties": {
        "matchCriteria": {
          "$ref": "#/definitions/IdMatchCriteriaMessageIdMatchCriteria",
          "title": "Supports only EQUALS for String values.\nin or not in supported"
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configGroupNameMatch": {
      "type": "object",
      "properties": {
        "matchNameValue": {
          "type": "string",
          "description": "In case the template variable does not correspond to a valid value in the JIT context,\nFor instance if JIT is at an Account level but the template provides a resourceGroup variable,\nThe resourceGroup variable will be replaced with an empty string.\n\nExample usage:\nmy-prefix-{{accountName}}-{{policyName}}--{{resourceGroupId}}\nIn this example, if accountName is \"exampleAccount\", policyName is \"examplePolicy\", and\nresourceGroupId is \"rg-12345\", the resolved string would be:\nmy-prefix-exampleAccount-examplePolicy--rg-12345\nThis is the group that will be used to provision an access request for\nPolcy `examplePolicy` at a ResourceGroup `rg-12345``, in Account `exampleAccount`.",
          "title": "MatchNameValue used to specify a string template that allows dynamic insertion of\nvarious parameters related to accounts, policies, and resource groups.\nThis field accepts a templated string format where specific variables will be\nsubstituted with their corresponding values at runtime - while provisioning / deprovisioning.\nSupported template variables are:\n{{accountId}}, {{accountName}}\n{{policyId}}, {{policyName}} and\n{{resourceGroupId}}, {{resourceGroupName}}"
        }
      }
    },
    "configGroupReviewerPersonaTemplate": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "if enabled the persona is considered when assigning reviewers."
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "GroupIds are the Andromeda UUIDs of the group objects."
        },
        "maxAssignableReviewerCount": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum number of reviewers that can be assigned to review this access request."
        }
      }
    },
    "configHMACAlgorithm": {
      "type": "string",
      "enum": [
        "HMAC_ALGORITHM_UNSPECIFIED",
        "HMAC_ALGORITHM_SHA256"
      ],
      "default": "HMAC_ALGORITHM_UNSPECIFIED"
    },
    "configHMACConfig": {
      "type": "object",
      "properties": {
        "hmacSecret": {
          "type": "string",
          "title": "Stored securely (e.g., env var, vault)"
        },
        "algorithm": {
          "$ref": "#/definitions/configHMACAlgorithm",
          "title": "e.g., \"HMAC-SHA256\""
        }
      },
      "title": "MTLS is a secure auth method that uses mutual TLS to authenticate messages\nSome customers may not want to use MTLS, so we'll need to support other auth methods.\nmessage MTLSConfig {\n  string client_cert_path = 1;\n  string client_key_path = 2;\n  string ca_cert_path = 3;\n}"
    },
    "configHrType": {
      "type": "string",
      "enum": [
        "HR_TYPE_UNSPECIFIED",
        "EMPLOYEE",
        "CONTINGENT_WORKER",
        "THIRD_PARTY"
      ],
      "default": "HR_TYPE_UNSPECIFIED"
    },
    "configHrTypeKeyValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/configHrType"
        }
      }
    },
    "configHrTypeMatch": {
      "type": "object",
      "properties": {
        "matchCriteria": {
          "$ref": "#/definitions/EnumsMatchCriteriaMessageEnumsMatchCriteria"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configHrType"
          }
        }
      }
    },
    "configHrisProviderConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "fileId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "title": "generic hris configuration on csv upload",
      "required": [
        "name"
      ]
    },
    "configIdentityDetails": {
      "type": "object",
      "properties": {
        "identityId": {
          "type": "string"
        },
        "identityName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiRoleEnumApiRole"
          }
        },
        "tenantName": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "superTenantId": {
          "type": "string"
        },
        "tenantType": {
          "$ref": "#/definitions/TenantTypeMessageTenantType"
        }
      }
    },
    "configIdentityMappingMatchAction": {
      "type": "object",
      "properties": {
        "merge": {
          "$ref": "#/definitions/configUserMergeAction",
          "description": "Action to merge identities when a match is found."
        },
        "classify": {
          "$ref": "#/definitions/configUserClassificationAction",
          "description": "Action to classify the user when a match is found."
        },
        "externalNhiInsight": {
          "$ref": "#/definitions/configExternalNhiInsightAction",
          "description": "When this action is set then the identity matching this rule will be marked\nas an external nhi."
        },
        "privilegedUserClassification": {
          "$ref": "#/definitions/configPrivilegedUserClassificationAction",
          "description": "Action to classify the user when a match is found."
        },
        "identifyPrimaryUserForMerge": {
          "$ref": "#/definitions/configMarkSourceOfTruthUserAction"
        }
      },
      "description": "IdentityMappingMatchAction defines the possible actions to take upon\na successful match. It uses a oneof to allow only one action at a time."
    },
    "configIdentityMappingMatchTarget": {
      "type": "object",
      "properties": {
        "username": {
          "$ref": "#/definitions/configStringPatternMatch",
          "description": "Match based on the username attribute."
        },
        "hrType": {
          "$ref": "#/definitions/configHrTypeMatch"
        },
        "title": {
          "$ref": "#/definitions/configTitleMatch"
        },
        "manager": {
          "$ref": "#/definitions/configManagerMatch"
        },
        "celExpression": {
          "$ref": "#/definitions/configCelExpression"
        }
      },
      "description": "IdentityMappingMatchTarget specifies the target attributes to match against."
    },
    "configIdentityMappingPolicy": {
      "type": "object",
      "properties": {
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configIdentityMappingRule"
          },
          "description": "list of rules defining how to match and merge identities."
        }
      },
      "description": "{\n  \"rules\": [\n    {\n      \"name\": \"Merge with Matching Suffix Rule\",\n      \"description\": \"Merge with Matching Suffix Rule\",\n      \"enabled\": true,\n      \"priority\": 1,\n      \"matchTarget\": {\n        \"username\": {\n          \"matchCriteria\": \"SUFFIX\",\n          \"value\": \"_123\"\n        }\n      },\n      \"action\": {\n        \"merge\": {}\n      }\n    }\n  ]\n}",
      "title": "JSON API Example -"
    },
    "configIdentityMappingRule": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the rule for identification purposes."
        },
        "description": {
          "type": "string",
          "description": "Description of the rule detailing its purpose and functionality."
        },
        "enabled": {
          "type": "boolean",
          "description": "Indicates whether the rule is currently enabled or disabled."
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "Priority of the rule, determining the order of evaluation.\nLower numbers indicate higher priority."
        },
        "matchTarget": {
          "$ref": "#/definitions/configIdentityMappingMatchTarget",
          "description": "The target attribute of the user (e.g., username, email) that should be matched\nagainst the pattern defined in this rule."
        },
        "action": {
          "$ref": "#/definitions/configIdentityMappingMatchAction",
          "description": "Action to take when a match is found. For example, merge the user with another user."
        }
      },
      "description": "IdentityMappingRule defines the rule for a pattern match."
    },
    "configIdentityMatch": {
      "type": "object",
      "properties": {
        "matchCriteria": {
          "$ref": "#/definitions/IdMatchCriteriaMessageIdMatchCriteria",
          "title": "criteria"
        },
        "identityIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configIdentityPersonaCampaignOwnersTemplate": {
      "type": "object",
      "properties": {
        "identityIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Andromeda UUIDs of the identity"
        }
      }
    },
    "configIdentityReviewerPersonaTemplate": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "if enabled the persona is considered when assigning reviewers."
        },
        "identityIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "IdentityIds are the Andromeda UUIDs of the identity objects."
        },
        "maxAssignableReviewerCount": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum number of reviewers that can be assigned to review this access request."
        }
      }
    },
    "configIdentityStatus": {
      "type": "string",
      "enum": [
        "IDENTITY_STATUS_UNRESOLVED",
        "ENABLED",
        "STALE",
        "SUSPENDED",
        "DEACTIVATED",
        "NON_COMPLIANT"
      ],
      "default": "IDENTITY_STATUS_UNRESOLVED",
      "title": "Status for the identity"
    },
    "configIdentityType": {
      "type": "string",
      "enum": [
        "IDENTITY_TYPE_UNSPECIFIED",
        "HUMAN",
        "SERVICE"
      ],
      "default": "IDENTITY_TYPE_UNSPECIFIED"
    },
    "configIdentityUsernameMatch": {
      "type": "object",
      "properties": {
        "matchCriteria": {
          "$ref": "#/definitions/IdentityUsernameMatchCriteriaMessageIdentityUsernameMatchCriteria",
          "title": "Supports only EQUALS for String values.\nin or not in supported"
        },
        "usernames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configIdpApplicationConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "scimPushGroupEnabled": {
          "type": "boolean",
          "title": "TODO(P0) AS-3963\nThis is to indicate the this application is using scim push group feature.\nIn such a scenario admins will have **option** to configure list of the\npush groups which is mapped internally to andromeda policy of type\nSCIM_PUSH_GROUP_ROLE for every group.\nRead only - @skywalkercodes check if this can be learnt"
        },
        "mode": {
          "$ref": "#/definitions/AndromedaModeMessageAndromedaMode",
          "description": "Andromeda mode for the provider."
        },
        "accessRequestProvisioningConfig": {
          "$ref": "#/definitions/configAccessRequestProvisioningConfig",
          "description": "When the Andromeda mode is enforcement then the access request provisioning config is required."
        },
        "defaultAccessRequestProfileId": {
          "type": "string",
          "description": "JitPolicyProfile binding with the provider."
        },
        "providerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "id",
        "name",
        "tenantId"
      ]
    },
    "configIdpAttributeConfiguration": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string",
          "description": "Group signifies what the user attribute that maps a User to an Idp Group is called.\nThe group attribute name is used to fetch Idp Group information and is used\nto fetch valid `IdpGroupToRoleMapping.Group` values."
        }
      },
      "description": "IdpAttributeConfiguration allows Tenant owners to configure how the IdP user attributes\nmap to Descope understandable attributes. These mappings are done based on\nthe SAML payload of the user.\nRight now only the \"group\" attribute is supported."
    },
    "configIdpConfiguration": {
      "type": "object",
      "properties": {
        "idpMetadataUrl": {
          "type": "string",
          "description": "IdpMetadataUrl is a public Idp endpoint that has information about\nhow to connect to the IdP for Login/Logout, refreshin tokens etc."
        },
        "idpUrl": {
          "type": "string",
          "description": "IdpUrl/IdpCertificate/IdpEntityId provide an alternate way to IdPMetadataUrl,\nbut essentially provide the same information."
        },
        "idpCertificate": {
          "type": "string"
        },
        "idpEntityId": {
          "type": "string"
        },
        "groupMappings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configIdpGroupToRoleMapping"
          },
          "description": "IdpGroupToRoleMapping stores how the IdP groups map to Andromeda personas.\nThis is an IdP group specific setting which will be different for different\nTenants / Tenant IdPs."
        },
        "attributeConfiguration": {
          "$ref": "#/definitions/configIdpAttributeConfiguration",
          "description": "AttributeMapping stores how IdP user attributes map to Descope attributes."
        },
        "serviceProviderSetting": {
          "$ref": "#/definitions/configServiceProviderSetting",
          "description": "ServiceProviderSettings holds the information that is returned by descope\nwhich is to be further used by the Tenant owner to configure a SAML App\nin their IdP like Okta/PingIdentity etc.",
          "readOnly": true
        }
      },
      "description": "IdPConfiguration requires as input, either the IdpMetadataUrl, or\na combination of IdpUrl, IdpCertificate and IdpEntityId so that descope\ncan connect to the Idp. This information is generally present in the\nIdP settings when the owner tries to configure a SAML application."
    },
    "configIdpGroupToRoleMapping": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Groups represents the set of Groups being considered in this mapping."
        },
        "role": {
          "type": "string",
          "description": "Deprecated. Use andromeda_role instead."
        },
        "andromedaRole": {
          "$ref": "#/definitions/ApiRoleEnumApiRole",
          "description": "Role is the Andromeda role/persona that the above mentioned Groups map to."
        }
      },
      "description": "GroupMapping allows Tenant owners to configure a set of IdP groups that will\nbe mapped to a singular Andromeda role/persona. These mappings are done based on\nthe SAML payload of the user.",
      "required": [
        "groups",
        "andromedaRole"
      ]
    },
    "configImageVersion": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        }
      },
      "required": [
        "version"
      ]
    },
    "configIntegrationsType": {
      "type": "string",
      "enum": [
        "INTEGRATION_TYPE_UNSPECIFIED",
        "INTEGRATION_TYPE_HRMS",
        "INTEGRATION_TYPE_IDP"
      ],
      "default": "INTEGRATION_TYPE_UNSPECIFIED",
      "title": "deprecated"
    },
    "configInternalConfiguration": {
      "type": "object",
      "properties": {
        "awsProviderInternalConfiguration": {
          "$ref": "#/definitions/configAWSProviderInteralConfiguration"
        },
        "providerLogConfiguration": {
          "$ref": "#/definitions/configProviderLogConfiguration"
        }
      }
    },
    "configItsmJiraConfig": {
      "type": "object",
      "properties": {
        "baseUrl": {
          "type": "string",
          "description": "The base URL of the Jira instance."
        },
        "jiraAuth": {
          "$ref": "#/definitions/configJiraAuth",
          "description": "The authentication details for the Jira instance."
        },
        "atlassianAuth": {
          "$ref": "#/definitions/configAtlassianAuth",
          "description": "The authentication details for the Atlassian instance."
        }
      }
    },
    "configItsmSettings": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/ItsmTypeMessageItsmType",
          "description": "The type of ITSM integration that is being used."
        },
        "jiraConfig": {
          "$ref": "#/definitions/configItsmJiraConfig"
        },
        "itsmResolutionStatuses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "ItsmResolutionStatuses are the statuses that are considered for auto-deprovisioning,\nif the jit profile check itsm_resolution_status_based_deprovisioning_enabled is enabled."
        },
        "itsmValidTicketStatuses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "ItsmValidTicketStatuses are the statuses that are considered for auto-deprovisioning,\nif the jit profile check valid_itsm_ticket_status_check_enabled is enabled."
        }
      }
    },
    "configJITConfiguration": {
      "type": "object",
      "properties": {
        "jitMigrationConfig": {
          "$ref": "#/definitions/configJITMigrationConfig"
        },
        "existingBindingCheckEnabled": {
          "type": "boolean",
          "description": "Default set to true. If enabled, we check whether the user is bound to the policy before creating the access request."
        }
      }
    },
    "configJITMigrationConfig": {
      "type": "object",
      "properties": {
        "eligibilityCreationEnabled": {
          "type": "boolean"
        },
        "accessRequestCreationEnabled": {
          "type": "boolean"
        }
      }
    },
    "configJiraAuth": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The username of the Jira user."
        },
        "apiToken": {
          "type": "string",
          "description": "The API token of the Jira user."
        }
      }
    },
    "configJitPolicyProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "tenantId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "requestValidationConfig": {
          "$ref": "#/definitions/configAccessRequestValidationConfig",
          "description": "RequestValidationConfig checks for the validity of AccessRequests for\nthe Policy. This is used when the AccessRequest is raised and acts as a\nvalidator of the request."
        },
        "aiRequestAnalysisPolicy": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configAccessRequestAnalysisRule"
          },
          "description": "AccessRequestAnalysisRule is a set of rules and conditions that must be met\nfor an action to be taken by Andromeda intelligence while reviewing an\naccess request."
        },
        "assignReviewerConfig": {
          "$ref": "#/definitions/configAccessRequestAssignReviewerConfig",
          "description": "AssignReviewerConfig is used to determine the reviewers that are to be\nauto-assigned to a AccessRequest, once a valid request is raised."
        },
        "sessionSummaryConfig": {
          "$ref": "#/definitions/configAccessRequestSessionSummaryConfig",
          "description": "SessionSummaryConfig determines the overall configuration for session\nsummarization after the access request is Deprovisioned."
        },
        "extensionConfig": {
          "$ref": "#/definitions/configAccessRequestExtensionConfig",
          "description": "AccessRequestExtensionConfig determines the configuration for\nrequest extension of already approved requests."
        },
        "itsmSettings": {
          "$ref": "#/definitions/configAccessRequestItsmSettings",
          "description": "Settings related to the ITSM integration."
        },
        "overrideRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configAccessRequestProfileOverrideRule"
          },
          "description": "OverrideRules are a set of rules, that when satisfied, overrides the\nconfigurations at the JIT Profile level.\nAction from the first match in the rules is applied."
        }
      },
      "description": "JitPolicyProfile is a configuration object that determines the behaviour\nof JIT Request handling, review workflow, Andromeda analysis etc.\nThe JitPolicyProfile object can be associated with a Tenant, Provider or\nAccount, and maintains heirarchical propagation based on the propagation\nstrategy."
    },
    "configJitPolicyRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "tenantId": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "accessRequestTransactionId": {
          "type": "string",
          "readOnly": true
        },
        "createdById": {
          "type": "string",
          "description": "User who created the JitPolicyRequest.\nThis could be an admin or the requesters themselves.",
          "readOnly": true
        },
        "requesterUserId": {
          "type": "string",
          "description": "User for whom the access request is created."
        },
        "requesterIdentityId": {
          "type": "string",
          "title": "RequesterIdentityId is computed internally"
        },
        "requesterGroupId": {
          "type": "string",
          "description": "Group for whom the access request is created."
        },
        "providerId": {
          "type": "string",
          "readOnly": true
        },
        "requestedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy for which the JitPolicyRequest is created. This will be\none of the eligible Policies for JIT for the User in the Account.\nThis is equivalent to the Permission Set in AWS or Role in GCP."
        },
        "description": {
          "type": "string",
          "description": "Short reason/description for creating the JitPolicyRequest.\nA maximum of 256 characters is supported."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "StartTime is the time when the JitPolicyRequest is supposed to get active."
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "description": "Duration of the requested JIT Session in seconds. A valid duration window\n(min/max) is determined by the JIT Profile settings. Duration is set to 0\nif the access request is STANDING."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags are keywords that store information like JIRA IDs,\ngithub issues. A maximum of 5 keywords are supported."
        },
        "type": {
          "$ref": "#/definitions/AccessRequestTypeMessageAccessRequestType",
          "description": "An access request can either be STANDING or JIT. A STANDING access request's\nduration is infinite, and is never scheduled for provisioning. These requests\nare also not summarized at the end of the session."
        },
        "userActions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configJitPolicyRequestUserAction"
          },
          "description": "UserActionStatus is a requester/admin level setting. The users/admins\ncan choose to close, manually provision-deprovision the request based on the intent.\nThis strictly captures the intent of the access request. The real-time status\nstill resides in the access request Transaction."
        },
        "metadata": {
          "$ref": "#/definitions/configAccessRequestMetadata",
          "description": "AccessRequestMetadata holds the data that is auto-populated by the system during\nthe creation of the access_request table row."
        },
        "requestScope": {
          "$ref": "#/definitions/configAccessRequestScope",
          "description": "RequestedPolicyScope is the scope of the JIT request."
        },
        "itsmData": {
          "$ref": "#/definitions/configAccessRequestItsmData",
          "description": "ITSM details that can be attached to the JIT request."
        },
        "assignmentType": {
          "$ref": "#/definitions/AccessRequestAssignmentTypeMessageAccessRequestAssignmentType",
          "title": "Assignment type"
        },
        "resourceSetData": {
          "$ref": "#/definitions/configAccessRequestResourceSetData",
          "description": "Resource role set data\nIf eligibility type is RESOURCE_ASSIGNMENT then this field will be populated."
        }
      },
      "description": "JitPolicyRequest is created for a Policy by a User in an Account."
    },
    "configJitPolicyRequestAnalysis": {
      "type": "object",
      "properties": {
        "aiReviewRecommendation": {
          "$ref": "#/definitions/JitPolicyAndromedaReviewStatusMessageAndromedaReviewStatus",
          "description": "Review from Andromeda AI for this JIT Session request. This is\na decisive binary, i.e. the request is recommended to be either\napproved or marked as additional review required by the AI system."
        },
        "policyRiskScore": {
          "type": "integer",
          "format": "int64"
        },
        "checks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configJitPolicyRequestAnalysisCheck"
          },
          "description": "Checks on the JIT Session request are computed by the Andromeda System\nacross identity risk, behavior, privelege analysis and compliance."
        }
      }
    },
    "configJitPolicyRequestAnalysisCheck": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/RequestAnalysisConditionCategoryMessageRequestAnalysisConditionCategory",
          "description": "Category of the check."
        },
        "summary": {
          "type": "string",
          "description": "Summary of the check, as computed by the Andromeda System. In case of a\npassed check, this elaborates on WHAT check was performed. In case of a\nfailed check, this elaborates on WHAT the check was and WHY it failed."
        },
        "status": {
          "$ref": "#/definitions/JitPolicyRequestAnalysisCheckStatusMessageRequestAnalysisCheckStatus",
          "description": "Status of the check, whether it passed or failed."
        }
      }
    },
    "configJitPolicyRequestUserAction": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/JitPolicyRequestUserActionTypeMessageActionType",
          "description": "Type of action to be taken by the user/admin."
        },
        "triggeredById": {
          "type": "string",
          "description": "User who triggered the intended action."
        },
        "requestExtension": {
          "$ref": "#/definitions/configRequestExtensionUserActionData"
        },
        "triggeredAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the action was triggered."
        }
      }
    },
    "configJitPolicyReview": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "readOnly": true
        },
        "accountId": {
          "type": "string",
          "readOnly": true
        },
        "accessRequestTransactionId": {
          "type": "string",
          "readOnly": true
        },
        "accessRequestId": {
          "type": "string",
          "readOnly": true
        },
        "reviewerId": {
          "type": "string",
          "description": "ReviewerId is the User who acts on this Review for a JIT Session request.",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "providerId": {
          "type": "string",
          "readOnly": true
        },
        "status": {
          "$ref": "#/definitions/JitPolicyReviewStatusMessageReviewerReviewStatus",
          "description": "Status is the action taken by the reviewer on the JIT Session request."
        },
        "reason": {
          "type": "string",
          "description": "Reason for transitioning the status."
        },
        "reviewerType": {
          "$ref": "#/definitions/configAccessRequestReviewReviewerTypeType"
        },
        "reviewLevel": {
          "type": "integer",
          "format": "int64",
          "description": "ReviewLevel is the index of the review in the chain."
        }
      },
      "description": "JitPolicyReview objects are maintained by the reviewers for the JitPolicyRequests."
    },
    "configJitPolicyTransactionStatus": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/JitPolicyTransactionStatusTypeMessageAccessRequestStatus"
        },
        "reason": {
          "type": "string"
        },
        "transitionedAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastStatus": {
          "$ref": "#/definitions/JitPolicyTransactionStatusTypeMessageAccessRequestStatus"
        }
      }
    },
    "configJitSessionAnalysis": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "integer",
          "format": "int32",
          "description": "Duration of the Session in seconds."
        },
        "summary": {
          "type": "string",
          "description": "Summary of the JIT Session around what actions were performed, which\nresources were accessed, what configurations were changed, etc."
        },
        "reason": {
          "type": "string",
          "title": "Reason for failure of jit session"
        }
      }
    },
    "configKeyValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "configKvTagMatch": {
      "type": "object",
      "properties": {
        "keyMatchCriteria": {
          "$ref": "#/definitions/configSimpleStringMatchCriteriaCriteria"
        },
        "key": {
          "type": "string",
          "description": "The tag key to match."
        },
        "valueMatchCriteria": {
          "$ref": "#/definitions/configSimpleStringMatchCriteriaCriteria",
          "description": "The tag value to match."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Match any of the values."
        }
      },
      "title": "Matches a key and any of the values"
    },
    "configLDAPFilters": {
      "type": "object",
      "properties": {
        "userFilter": {
          "type": "string",
          "title": "Filter to fetch users from Active Directory(LDAP). Example: \"(objectClass=user)\""
        },
        "groupFilter": {
          "type": "string",
          "title": "Filter to fetch groups from Active Directory(LDAP). Example: \"(objectClass=group)\""
        }
      }
    },
    "configLocalMeta": {
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string"
        },
        "localDirectory": {
          "type": "string"
        }
      }
    },
    "configLogStorageConfiguration": {
      "type": "object",
      "properties": {
        "scope": {
          "type": "string",
          "title": "scope is `projects/project_id` or `organizations/organization_id`"
        },
        "bucketId": {
          "type": "string"
        },
        "region": {
          "type": "string",
          "title": "optional, defaults to `Global`"
        },
        "view": {
          "type": "string",
          "title": "optional, defaults to `_AllLogs`"
        },
        "authConfig": {
          "$ref": "#/definitions/configGoogleAuthConfig"
        }
      },
      "title": "logs storage (logging buckets)"
    },
    "configManagedProvisioningGroupConfig": {
      "type": "object",
      "properties": {
        "matchType": {
          "$ref": "#/definitions/AccessRequestProvisioningGroupMatchMessageAccessRequestProvisioningGroupMatchType",
          "description": "Specifies how to determine the provisioning group for the access request. If the match_type is PATTERN_MATCH,\nthe group name is a pattern that will be matched against the group name match criteria of the account.\nIf the match_type is ROLE_BASED_PROVISIONING_GROUP, the group is picked up from the per role, account Provisioning Group."
        },
        "groupNameMatchCriteria": {
          "$ref": "#/definitions/configGroupNameMatch",
          "description": "GroupNameMatchCriteria if set, helps Andromeda identify the customer managed\nGroup based on the matching criteria. If more than one matches are found during\nProvisioning, the access request provisioning fails."
        },
        "createEnabled": {
          "type": "boolean",
          "description": "Creation of the provisioning group by Andromeda is disabled by default."
        },
        "deleteEnabled": {
          "type": "boolean",
          "description": "Deletion of the provisioning group by Andromeda is disabled by default. This happens when there are no active\naccess requests for the group."
        }
      }
    },
    "configManagerMatch": {
      "type": "object",
      "properties": {
        "matchCriteria": {
          "$ref": "#/definitions/configSimpleStringMatchCriteria"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configManagerReviewerPersonaTemplate": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "if enabled the persona is considered when assigning reviewers."
        }
      }
    },
    "configMapUserAttrAction": {
      "type": "object",
      "properties": {
        "attr": {
          "$ref": "#/definitions/UserAttributeMessageUserAttributeMessageType",
          "title": "Andromeda Attribute Type"
        }
      },
      "title": "For use when source's attr is Mgr -\u003e manager\nThe value is kept as-is"
    },
    "configMarkSourceOfTruthUserAction": {
      "type": "object",
      "properties": {
        "providerIdOverride": {
          "type": "string"
        }
      }
    },
    "configMatchCriteria": {
      "type": "string",
      "enum": [
        "MATCH_CRITERIA_UNSPECIFIED",
        "EXACT",
        "CONTAINS",
        "STARTS_WITH",
        "ENDS_WITH",
        "REGEX",
        "EQUALS",
        "GREATER_THAN",
        "GREATER_THAN_OR_EQUAL",
        "LESS_THAN",
        "LESS_THAN_OR_EQUAL",
        "EXACT_IGNORE_CASE"
      ],
      "default": "MATCH_CRITERIA_UNSPECIFIED",
      "description": " - EXACT: String exact match.\n - CONTAINS: String contains match.\n - STARTS_WITH: String prefix match.\n - ENDS_WITH: String suffix match.\n - REGEX: String regex match.\n - EQUALS: Integer equals match. Boolean equals match.\n - GREATER_THAN: Integer greater than match.\n - GREATER_THAN_OR_EQUAL: Integer greater than or equal match.\n - LESS_THAN: Integer less than match.\n - LESS_THAN_OR_EQUAL: Integer less than or equal match.\n - EXACT_IGNORE_CASE: Case insensitive string exact match."
    },
    "configMatchOrConditionCriteria": {
      "type": "object",
      "properties": {
        "valueMatchCriteria": {
          "$ref": "#/definitions/configMatchCriteria"
        },
        "stringValue": {
          "type": "string"
        },
        "intValue": {
          "type": "string",
          "format": "uint64"
        },
        "floatValue": {
          "type": "number",
          "format": "float"
        },
        "boolValue": {
          "type": "boolean",
          "title": "google.protobuf.Timestamp timestamp_value = 6;"
        }
      }
    },
    "configMatchTarget": {
      "type": "object",
      "properties": {
        "tagMatch": {
          "$ref": "#/definitions/configTagMatch"
        },
        "nameMatch": {
          "$ref": "#/definitions/configNameMatch",
          "title": "AND"
        },
        "principalMatch": {
          "$ref": "#/definitions/configPrincipalMatch",
          "title": "Matches specific principal like Group"
        }
      }
    },
    "configMatchUserAttrTarget": {
      "type": "object",
      "properties": {
        "nameMatch": {
          "$ref": "#/definitions/configAttrNameMatch",
          "title": "Use with simple attr name to attr value match"
        },
        "advancedNameMatch": {
          "$ref": "#/definitions/configNameMatch",
          "title": "For use with situations like hr type where more advanced matching is needed"
        },
        "attributeMatch": {
          "$ref": "#/definitions/configUserAttributeMatch",
          "title": "for well known Andromeda attributes"
        }
      }
    },
    "configMatchUserTarget": {
      "type": "object",
      "properties": {
        "attributeMatch": {
          "$ref": "#/definitions/configUserAttributeMatch",
          "title": "Use with simple attr name to attr value match"
        },
        "principalMatch": {
          "$ref": "#/definitions/configPrincipalMatch",
          "title": "If any rule is specific to an incarnation like uuid. Eg. nhis\nthat needs to be classified as external"
        }
      }
    },
    "configNameMatch": {
      "type": "object",
      "properties": {
        "matchNameCriteria": {
          "$ref": "#/definitions/configMatchCriteria"
        },
        "matchNameStr": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configNhiClassificationData": {
      "type": "object",
      "properties": {
        "nhiType": {
          "$ref": "#/definitions/ServiceIdentityTypeMessageServiceIdentityType",
          "description": "ServiceIdentityMetadata metadata = 2;",
          "title": "The subtype"
        }
      }
    },
    "configNotificationSettingEmail": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "configNotificationSettingMicrosoftTeams": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "configNotificationSettingSlack": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "configNotificationSettings": {
      "type": "object",
      "properties": {
        "accessRequest": {
          "$ref": "#/definitions/configAccessRequestNotificationSettings"
        },
        "uar": {
          "$ref": "#/definitions/configUarNotificationSettings"
        }
      }
    },
    "configOktaConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "apiEndpoint": {
          "type": "string"
        },
        "accessToken": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "defaultExcludeApps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "excludeOktaApps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userDataMappingProfile": {
          "$ref": "#/definitions/configUserDataMappingProfile"
        },
        "enableApplicationProviderDiscovery": {
          "type": "boolean",
          "title": "If this flag is set, then providers will be created from applications discovered in Okta"
        },
        "integrationId": {
          "type": "string",
          "title": "deprecated"
        },
        "providerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "id",
        "tenantId"
      ]
    },
    "configOktaLogsConfig": {
      "type": "object",
      "properties": {
        "logsWfIntervalMins": {
          "type": "integer",
          "format": "int32"
        },
        "maxConcurrentOperations": {
          "type": "integer",
          "format": "int32"
        },
        "initialFetchIntervalMins": {
          "type": "integer",
          "format": "int32",
          "title": "Use initial_logs_fetch_days instead"
        },
        "historicalLogsWfIntervalMins": {
          "type": "integer",
          "format": "int32",
          "title": "CloudTrailS3Sink s3_replay = 5; // deprecated"
        },
        "s3ReplayConfig": {
          "$ref": "#/definitions/configS3ReplayConfig"
        },
        "initialLogsFetchDays": {
          "type": "integer",
          "format": "int32",
          "description": "The number of days of historical logs to fetch initially."
        }
      }
    },
    "configOktaWorkflowConfiguration": {
      "type": "object",
      "properties": {
        "inventoryWfIntervalMins": {
          "type": "integer",
          "format": "int32"
        },
        "logsConfiguration": {
          "$ref": "#/definitions/configOktaLogsConfig"
        },
        "inventoryInactiveApplications": {
          "type": "boolean"
        },
        "inventoryAllUsers": {
          "type": "boolean"
        },
        "fullInventoryRefreshIntervalMins": {
          "type": "integer",
          "format": "int32"
        },
        "analyticsInventoryWfIntervalMins": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "configOverrideRulesMatchWhenTarget": {
      "type": "object",
      "properties": {
        "matchProviderId": {
          "$ref": "#/definitions/configMatchOrConditionCriteria",
          "description": "Deprecated\nSupports only EQUALS for String values."
        },
        "matchRoleId": {
          "$ref": "#/definitions/configMatchOrConditionCriteria",
          "description": "Deprecated\nSupports only EQUALS for String values."
        },
        "matchAccountId": {
          "$ref": "#/definitions/configMatchOrConditionCriteria",
          "description": "Deprecated\nSupports only EQUALS for String values."
        },
        "matchResourceGroupId": {
          "$ref": "#/definitions/configMatchOrConditionCriteria",
          "description": "Deprecated\nSupports only EQUALS for String values."
        },
        "providerMatch": {
          "$ref": "#/definitions/configProviderMatch"
        },
        "providerAccountMatch": {
          "$ref": "#/definitions/configProviderAccountMatch"
        },
        "roleMatch": {
          "$ref": "#/definitions/configRolesMatch"
        },
        "resourceGroupMatch": {
          "$ref": "#/definitions/configResourceGroupMatch",
          "description": "resource group tags, provider/scope types etc."
        }
      }
    },
    "configOwnersMappingPolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configOwnersMappingRule"
          }
        },
        "tenantId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "tenantId",
        "providerId"
      ]
    },
    "configOwnersMappingRule": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "matchTarget": {
          "$ref": "#/definitions/configMatchTarget"
        },
        "lookupTagValue": {
          "type": "boolean"
        },
        "ownerIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "name",
        "enabled"
      ]
    },
    "configPSGMetadata": {
      "type": "object",
      "properties": {
        "additionalLicenseActions": {
          "$ref": "#/definitions/configAdditionalLicenseActions"
        },
        "customMedatadataObjectName": {
          "type": "string"
        }
      }
    },
    "configPatternMatchCriteriaMessageCriteria": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "SUFFIX",
        "PREFIX",
        "EXACT",
        "REGEX"
      ],
      "default": "UNSPECIFIED",
      "description": "Enum to specify the type of matching criteria.\n\n - UNSPECIFIED: Default value indicating no specific criteria set. This will be treated as an error.\n - SUFFIX: Matches if the target ends with the specified value.\n - PREFIX: Matches if the target starts with the specified value.\n - EXACT: Matches if the target is an exact match with the specified value.\n - REGEX: For example, the normal user is kamal.murali@andromedasecurity.com and the privileged user is\n“su-kamal.murali@andromedasecurity.com”. In this case after you remove the prefix, the username\nis an exact match to the HI username. The normal user is kamal.murali@andromedasecurity.com and\nthe privileged user is “su-kmurali@andromedasecurity.com” . Now we need to form the privileged\nuser username using first letter of first name appended with last name with a prefix of “su-”"
    },
    "configPingOneAuthConfig": {
      "type": "object",
      "properties": {
        "authMode": {
          "$ref": "#/definitions/configPingOneAuthMode"
        },
        "staticCredentials": {
          "$ref": "#/definitions/configPingOneStaticCredentials"
        }
      },
      "required": [
        "authMode"
      ]
    },
    "configPingOneAuthMode": {
      "type": "string",
      "enum": [
        "PINGONE_AUTHMODE_UNSPECIFIED",
        "PINGONE_AUTHMODE_STATIC_CREDENTIALS"
      ],
      "default": "PINGONE_AUTHMODE_UNSPECIFIED"
    },
    "configPingOneProviderConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "environmentId": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "authConfig": {
          "$ref": "#/definitions/configPingOneAuthConfig"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "enableApplicationProviderDiscovery": {
          "type": "boolean"
        },
        "defaultExcludeApps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "PingOneProviderConfiguration represents the configuration for PingOne authentication\nThis will be stored in the ProviderConfiguration.config field",
      "required": [
        "id",
        "providerId",
        "tenantId",
        "environmentId",
        "region",
        "authConfig"
      ]
    },
    "configPingOneStaticCredentials": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        }
      },
      "required": [
        "clientId",
        "clientSecret"
      ]
    },
    "configPolicyConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "readOnly": true
        },
        "providerId": {
          "type": "string",
          "readOnly": true
        },
        "scopeId": {
          "type": "string",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "readOnly": true
        },
        "ownerIdentityIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/andromedautilsTag"
          }
        },
        "accessRequestProvisioningGroupName": {
          "type": "string",
          "description": "AccessRequestProvisioningGroup is the group that will be used to provision an access request for the policy.\nThis is used when the Provider and Scope are in the Enforcement mode\nwith the AccessRequestProvisioningGroupType as ROLE_BASED_PROVISIONING_GROUP.\nNote: This Provisioning Group cannot be configured as another Provisioning Group anywhere else (including Provider or tenant)\nMultiple eligibilities can use the same Provisioning Group but no other role can use the same Provisioning Group.\nDuring the eligibility creation Andromeda will validate that the group with this name exists in the cloud provider."
        }
      },
      "required": [
        "id"
      ]
    },
    "configPolicyElgibilityMappingStatusStatus": {
      "type": "string",
      "enum": [
        "ACTIVE",
        "REVOCATION_IN_PROGRESS",
        "INVALID",
        "REVOKED"
      ],
      "default": "ACTIVE"
    },
    "configPolicyProvisioningConditionsData": {
      "type": "object",
      "properties": {
        "azureConditions": {
          "$ref": "#/definitions/configAzureConditions"
        }
      }
    },
    "configPolicyTypeMessagePolicyType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "AWS_PERMISSION_SET",
        "AWS_IAM_ROLE",
        "AWS_USER_PERMISSIONS",
        "AWS_GROUP_PERMISSIONS",
        "GCP_ROLE",
        "WORKSPACE_ROLE",
        "AZURE_ROLE",
        "SCIM_PUSH_GROUP_ROLE",
        "UNIT_POLICY",
        "CUSTOM_APP_ROLE",
        "CUSTOM_APP_USER_ROLE",
        "ENTRA_ROLE",
        "ENTRA_APPLICATION_ROLE",
        "ENTRA_DEFAULT_ACCESS_POLICY",
        "SFDC_PERMISSIONSET",
        "SFDC_PERMISSIONSET_GROUP",
        "SFDC_PROFILE",
        "PINGONE_ROLE",
        "AWS_POLICY",
        "ATLAS_DATABASE_CUSTOM_ROLE",
        "ATLAS_DATABASE_BUILTIN_ROLE",
        "ATLAS_MANAGEMENT_BUILTIN_ROLE"
      ],
      "default": "UNSPECIFIED",
      "title": "- AWS_PERMISSION_SET: AWS Permission Set in AWS Identity Center\n - AWS_IAM_ROLE: AWS Role in IAM\n - AWS_USER_PERMISSIONS: AWS User-level permission policies\n - AWS_GROUP_PERMISSIONS: AWS Group-level permission policies\n - GCP_ROLE: GCP Role\n - WORKSPACE_ROLE: Workspace role\n - AZURE_ROLE: Azure role\n - SCIM_PUSH_GROUP_ROLE: these are roles created from the scim push groups that are synced\nfrom the IDP to the provider. (shadow of a push group in app-bound provider)\n - UNIT_POLICY: Unit policy means \"has access\". This and corresponding binding objects should not be shown in UI.\n - CUSTOM_APP_ROLE: Role in Custom App\n - CUSTOM_APP_USER_ROLE: User role in Custom App. This is used when andromeda creates a user specific role\nthat cannot be mapped directly to an Application role\n - ENTRA_ROLE: Roles from Entra\n - ATLAS_DATABASE_CUSTOM_ROLE: Roles from Atlas"
    },
    "configPolicyUsageBehaviorSeasonalModelConfiguration": {
      "type": "object",
      "properties": {
        "alpha": {
          "type": "number",
          "format": "double"
        },
        "beta": {
          "type": "number",
          "format": "double"
        },
        "gamma": {
          "type": "number",
          "format": "double"
        },
        "confidenceLevel": {
          "type": "number",
          "format": "double"
        },
        "seasonalityPeriod": {
          "type": "integer",
          "format": "int32"
        },
        "anomalyCheckDays": {
          "type": "integer",
          "format": "int32"
        },
        "daysSinceFirstAction": {
          "type": "integer",
          "format": "int32"
        },
        "backlogDays": {
          "type": "integer",
          "format": "int32"
        },
        "unusualThreshold": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "alpha",
        "beta",
        "gamma",
        "confidenceLevel",
        "seasonalityPeriod",
        "anomalyCheckDays",
        "daysSinceFirstAction",
        "backlogDays",
        "unusualThreshold"
      ]
    },
    "configPrincipalMatch": {
      "type": "object",
      "properties": {
        "principalType": {
          "$ref": "#/definitions/configPrincipalTypeMessagePrincipalType"
        },
        "principalId": {
          "type": "string"
        }
      },
      "title": "{\n  prinncipal_type: \"GROUP\",\n  principal_id: \"Andromeda Group UUID\"\n}"
    },
    "configPrincipalTypeMessagePrincipalType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "HUMAN",
        "SERVICE_IDENTITY",
        "POLICY",
        "GROUP",
        "UNKNOWN"
      ],
      "default": "UNSPECIFIED"
    },
    "configPrivilegedUserClassificationAction": {
      "type": "object",
      "properties": {
        "isPrivilegedUser": {
          "type": "boolean",
          "description": "Mark the user as privileged user which matched the pattern.\nThis will result in the significance set for the merged user as PRIVILEGED_USER.\nIf it is set to false, then the user will be classified as normal user even if\npattners for privileged user are matched."
        }
      }
    },
    "configProviderAccountMatch": {
      "type": "object",
      "properties": {
        "matchCriteria": {
          "$ref": "#/definitions/IdMatchCriteriaMessageIdMatchCriteria"
        },
        "accountIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configProviderAuthType": {
      "type": "string",
      "enum": [
        "AUTH_TYPE_UNSPECIFIED",
        "AUTH_TYPE_IDENTITY_CENTER",
        "AUTH_TYPE_IAM"
      ],
      "default": "AUTH_TYPE_UNSPECIFIED"
    },
    "configProviderCategoryMatch": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/utilsProviderCategoryType"
          },
          "description": "Default rule is\ncategories: [CLOUD, APPLICATION, IDP]\nSupports only EQUALS for String values."
        }
      }
    },
    "configProviderInternalConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "config": {
          "$ref": "#/definitions/configInternalConfiguration",
          "title": "provider internal configuration"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "id",
        "tenantId",
        "providerId"
      ]
    },
    "configProviderLogConfiguration": {
      "type": "object",
      "properties": {
        "enableHistoricalLogs": {
          "type": "boolean",
          "title": "enable historical logs\ndefault is false"
        },
        "historicalLogsIngestionWindowHours": {
          "type": "integer",
          "format": "int64",
          "title": "historical logs ingestion window in hours"
        }
      }
    },
    "configProviderMatch": {
      "type": "object",
      "properties": {
        "matchCriteria": {
          "$ref": "#/definitions/IdMatchCriteriaMessageIdMatchCriteria",
          "title": "Supports only EQUALS for String values.\nin or not in supported"
        },
        "providerIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configProviderTypeMatch": {
      "type": "object",
      "properties": {
        "providerTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelsconfigProviderType"
          },
          "description": "Supports only EQUALS for String values."
        }
      }
    },
    "configReccurenceSettings": {
      "type": "object",
      "properties": {
        "frequency": {
          "$ref": "#/definitions/FrequencyMessageFrequency",
          "title": "The frequency unit of the reccurence. BY DEFAULT it is Monthly"
        },
        "interval": {
          "type": "integer",
          "format": "int64",
          "description": "The interval between the campaign runs. It is the multiplier for the frequency unit.\nDefault is 1."
        },
        "until": {
          "type": "string",
          "format": "date-time",
          "description": "The number of times the campaign will run.\nThe end date of the reccurence.\nOptional. If not specified, the campaign will run forever till stopped by the admin."
        }
      },
      "title": "Aligned to the https://datatracker.ietf.org/doc/html/rfc5545\nThe following is a subset of the RFC 5545. It only supports the following:\n- FREQ\n- INTERVAL\n- UNTIL"
    },
    "configRecommendationConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "tenantId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "identityId": {
          "type": "string",
          "description": "ScopeTypeEnum.ScopeType scope_type = 5 [\n(google.api.field_behavior) = IMMUTABLE\n];",
          "title": "string scope_id = 4 [\n(google.api.field_behavior) = IMMUTABLE\n];"
        },
        "recommendationType": {
          "$ref": "#/definitions/RecommendationTypeMessageRecommendationType"
        },
        "state": {
          "$ref": "#/definitions/RecommendationStateMessageRecommendationState"
        },
        "snoozedUntil": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "title": "This is how we store computed recommendations and also keep the enabled/ignored/snoozed state as per user input"
    },
    "configRecommendationTypeConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "tenantId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "recommendationType": {
          "$ref": "#/definitions/RecommendationTypeMessageRecommendationType"
        },
        "state": {
          "$ref": "#/definitions/RecommendationTypeStateMessageRecommendationTypeState"
        },
        "canBeEnabled": {
          "type": "boolean",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "configRemediation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "remediationType": {
          "$ref": "#/definitions/RemediationTypeMessageRemediationType"
        },
        "context": {
          "type": "object"
        },
        "providerId": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "accountId": {
          "type": "string"
        },
        "andromedaIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fileName": {
          "type": "string",
          "readOnly": true
        },
        "returnRedirect": {
          "type": "boolean",
          "description": "If true, the server will return a 302 redirect.\nIf false, the server will include the URL in the response instead of redirecting."
        },
        "tenantId": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "remediationType"
      ]
    },
    "configRequestAnalysisMatchWhenTarget": {
      "type": "object",
      "properties": {
        "matchProviderType": {
          "$ref": "#/definitions/configMatchOrConditionCriteria",
          "description": "Supports only EQUALS for String values."
        },
        "matchIntegrationType": {
          "$ref": "#/definitions/configMatchOrConditionCriteria",
          "title": "Supports only EQUALS for String values.\ndeprecated"
        }
      }
    },
    "configRequestExtensionUserActionData": {
      "type": "object",
      "properties": {
        "extendedDuration": {
          "type": "integer",
          "format": "int64",
          "description": "Duration of the extension in seconds."
        },
        "comment": {
          "type": "string",
          "description": "Comment/Reason for the extension."
        }
      }
    },
    "configRequiredApprovalsDetails": {
      "type": "object",
      "properties": {
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "minimumRequiredApprovals": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "configResourceGroupIdConstraints": {
      "type": "object",
      "properties": {
        "resourceGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configResourceGroupMatch": {
      "type": "object",
      "properties": {
        "matchCriteria": {
          "$ref": "#/definitions/IdMatchCriteriaMessageIdMatchCriteria"
        },
        "resourceGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configReviewerAssignmentScheme": {
      "type": "object",
      "properties": {
        "minRequiredApprovalCount": {
          "type": "integer",
          "format": "int64",
          "title": "MinRequiredApprovalCount is the minimum number of approvals required\nfor the AccessRequest to be marked as APPROVED"
        },
        "reviewerAssignmentTemplate": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configReviewerAssignmentTemplate"
          },
          "description": "ReviewerAssignmentTemplate is the list of personas and their corresponding templates\nwhich will be used to assign reviewers to the AccessRequest."
        }
      }
    },
    "configReviewerAssignmentTemplate": {
      "type": "object",
      "properties": {
        "identityReviewerTemplate": {
          "$ref": "#/definitions/configIdentityReviewerPersonaTemplate"
        },
        "groupReviewerTemplate": {
          "$ref": "#/definitions/configGroupReviewerPersonaTemplate"
        },
        "managerReviewerTemplate": {
          "$ref": "#/definitions/configManagerReviewerPersonaTemplate"
        },
        "scopeOwnerReviewerTemplate": {
          "$ref": "#/definitions/configScopeOwnerPersonaTemplate"
        }
      }
    },
    "configRiskCategory": {
      "type": "string",
      "enum": [
        "RISK_CATEGORY_UNSPECIFIED",
        "POSTURE",
        "PRIVILEGE",
        "BEHAVIOR"
      ],
      "default": "RISK_CATEGORY_UNSPECIFIED"
    },
    "configRiskFactor": {
      "type": "string",
      "enum": [
        "RISK_FACTOR_UNSPECIFIED",
        "RISK_FACTOR_STALE",
        "RISK_FACTOR_NO_MFA",
        "RISK_FACTOR_WEAK_MFA",
        "RISK_FACTOR_UNUSUAL_TRAVEL",
        "RISK_FACTOR_ANOMALOUS_CLOUD_ACTIVITY",
        "RISK_FACTOR_ANOMALOUS_APP_ACTIVITY",
        "RISK_FACTOR_ANOMALOUS_LOGIN_ACTIVITY",
        "RISK_FACTOR_HIGH_BLAST_RISK",
        "RISK_FACTOR_NO_HUMAN_OWNER",
        "RISK_FACTOR_CONSOLE_ACCESS",
        "RISK_FACTOR_SHARED_ACROSS_APPS",
        "RISK_FACTOR_ACCESSED_FROM_OUTSIDE_OF_CLOUD",
        "RISK_FACTOR_PASSWORD_HYGIENE",
        "RISK_FACTOR_KEY_HYGIENE",
        "RISK_FACTOR_INVALID_OWNER",
        "RISK_FACTOR_ACCESS_KEY_ROTATION_PAST_DUE_DATE"
      ],
      "default": "RISK_FACTOR_UNSPECIFIED",
      "title": "- RISK_FACTOR_STALE: Human\n - RISK_FACTOR_NO_MFA: Human\n - RISK_FACTOR_WEAK_MFA: Human\n - RISK_FACTOR_UNUSUAL_TRAVEL: Human\n - RISK_FACTOR_ANOMALOUS_CLOUD_ACTIVITY: Human and non-human\n - RISK_FACTOR_ANOMALOUS_APP_ACTIVITY: Human and non-human\n - RISK_FACTOR_ANOMALOUS_LOGIN_ACTIVITY: Human\n - RISK_FACTOR_HIGH_BLAST_RISK: Human and non-human\n - RISK_FACTOR_NO_HUMAN_OWNER: Non-human\n - RISK_FACTOR_CONSOLE_ACCESS: Non-human\n - RISK_FACTOR_SHARED_ACROSS_APPS: Non-human\n - RISK_FACTOR_ACCESSED_FROM_OUTSIDE_OF_CLOUD: Non-human\n - RISK_FACTOR_PASSWORD_HYGIENE: Human and Non-human\n - RISK_FACTOR_KEY_HYGIENE: Human and Non-human\n - RISK_FACTOR_INVALID_OWNER: Non-Human. Service Identities who have stale or deactived owners (not active owners).\n - RISK_FACTOR_ACCESS_KEY_ROTATION_PAST_DUE_DATE: If any Access Key of any incarnation is rotation past due: Deprecated"
    },
    "configRolesMatch": {
      "type": "object",
      "properties": {
        "matchCriteria": {
          "$ref": "#/definitions/IdMatchCriteriaMessageIdMatchCriteria",
          "title": "Supports only EQUALS for String values.\nin or not in supported"
        },
        "roleIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configS3Meta": {
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string"
        },
        "s3BucketName": {
          "type": "string"
        }
      }
    },
    "configS3ReplayConfig": {
      "type": "object",
      "properties": {
        "s3Config": {
          "$ref": "#/definitions/configCloudTrailS3Sink"
        },
        "prefix": {
          "type": "string"
        },
        "originalEventSource": {
          "$ref": "#/definitions/OriginalEventSourceEnumOriginalEventSource"
        }
      }
    },
    "configSalesforceAuthConfig": {
      "type": "object",
      "properties": {
        "authMode": {
          "$ref": "#/definitions/SalesforceAuthModeMessageSalesforceAuthMode"
        },
        "refreshCodeAuth": {
          "$ref": "#/definitions/configSalesforceRefreshCodeAuth"
        },
        "usernamePasswordAuth": {
          "$ref": "#/definitions/configSalesforceUsernamePassword"
        }
      },
      "title": "Salesforce Authentication Configuration"
    },
    "configSalesforceProviderConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "apiEndpoint": {
          "type": "string"
        },
        "authConfig": {
          "$ref": "#/definitions/configSalesforceAuthConfig",
          "title": "Auth configuration for accessing Salesforce"
        },
        "userDataMappingProfile": {
          "$ref": "#/definitions/configUserDataMappingProfile"
        },
        "providerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "psgMetadata": {
          "$ref": "#/definitions/configPSGMetadata"
        }
      },
      "required": [
        "id"
      ]
    },
    "configSalesforceRefreshCodeAuth": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "refreshCode": {
          "type": "string",
          "title": "refresh_token auth flow"
        }
      },
      "title": "Configuration for Refresh Code authentication mode"
    },
    "configSalesforceUsernamePassword": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "title": "Configuration for access token auth mode"
    },
    "configScimPushGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "policyId": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "idpGroupId": {
          "type": "string",
          "title": "One entry per idp_grup_id"
        },
        "providerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "id",
        "tenantId"
      ]
    },
    "configScopeMatch": {
      "type": "object",
      "properties": {
        "matchCriteria": {
          "$ref": "#/definitions/IdMatchCriteriaMessageIdMatchCriteria",
          "title": "Implicit criteria is IN\nin or not in supported"
        },
        "scopeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configScopeOwnerPersonaTemplate": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "if enabled the persona is considered when assigning reviewers."
        }
      }
    },
    "configScopeTagConstraint": {
      "type": "object",
      "properties": {
        "tagMatch": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configEligibilityConstraintTagMatch"
          },
          "description": "Multiple tag matches are ANDed together.\nFor an Identity if the eligibility is resolved by multiple eligibility\nconstraints, the constraints are ORed together."
        }
      }
    },
    "configSensitivityMappingPolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configSensitivityMappingRule"
          }
        },
        "tenantId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "tenantId",
        "providerId"
      ]
    },
    "configSensitivityMappingRule": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "matchTarget": {
          "$ref": "#/definitions/configMatchTarget"
        },
        "sensitive": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "enabled",
        "sensitive"
      ]
    },
    "configServiceProviderSetting": {
      "type": "object",
      "properties": {
        "entityId": {
          "type": "string"
        },
        "acsUrl": {
          "type": "string"
        },
        "certificate": {
          "type": "string"
        }
      },
      "description": "ServiceProviderSetting configurations are provided by descope, to be\nfurther configured while setting up SAML Application in the Tenant Idp.\nThese are all output only fields and no input should be allowed."
    },
    "configSessionSummaryModelConfiguration": {
      "type": "object",
      "properties": {
        "fetchCondensedLogsActivityConfiguration": {
          "$ref": "#/definitions/configFetchCondensedLogsActivityConfiguration"
        }
      }
    },
    "configSimpleStringMatchCriteria": {
      "type": "object"
    },
    "configSimpleStringMatchCriteriaCriteria": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "SUFFIX",
        "PREFIX",
        "EXACT",
        "IS_NULL",
        "IS_NOT_NULL"
      ],
      "default": "UNSPECIFIED",
      "description": "Enum to specify the type of matching criteria.\n\n - UNSPECIFIED: Default value indicating no specific criteria set. This will be treated as an error.\n - SUFFIX: Matches if the target ends with the specified value.\n - PREFIX: Matches if the target starts with the specified value.\n - EXACT: Matches if the target is an exact match with the specified value."
    },
    "configSinkConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "syslogServerConfig": {
          "$ref": "#/definitions/configSyslogServerConfig"
        }
      },
      "required": [
        "id",
        "tenantId"
      ]
    },
    "configStaticCredentials": {
      "type": "object",
      "properties": {
        "accessKeyId": {
          "type": "string",
          "description": "AWS access key Id associated with the IAM service account."
        },
        "secretAccessKey": {
          "type": "string",
          "description": "AWS secret access key associated with the IAM service account."
        },
        "sessionToken": {
          "type": "string",
          "description": "Optional session token associated with the IAM service account."
        }
      }
    },
    "configStringPatternMatch": {
      "type": "object",
      "properties": {
        "matchCriteria": {
          "$ref": "#/definitions/configPatternMatchCriteriaMessageCriteria",
          "description": "The criteria to use for matching the string (e.g., SUFFIX, PREFIX)."
        },
        "value": {
          "type": "string",
          "description": "The value to match against the target attribute.\nDeprecated. Use repeated values instead."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "StringPatternMatch defines the pattern matching criteria for a string."
    },
    "configSyslogServerConfig": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "$ref": "#/definitions/SyslogProtocolEnumSyslogProtocol"
        }
      }
    },
    "configSystemConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "defaultTenantSystemConfiguration": {
          "$ref": "#/definitions/configTenantInternalConfiguration"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "id"
      ]
    },
    "configTagMatch": {
      "type": "object",
      "properties": {
        "matchKeyCriteria": {
          "$ref": "#/definitions/configMatchCriteria"
        },
        "matchKeyStr": {
          "type": "string",
          "title": "or"
        },
        "matchValueCriteria": {
          "$ref": "#/definitions/configMatchCriteria",
          "title": "Optional Value match. If not specified, only key is matched.\nAND"
        },
        "matchValueStr": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "or",
          "title": "Optional Value match any of the strings"
        }
      },
      "title": "Should support following permutations, with default successful match for missing criterion -\n- Both criterion present\n- Key criterion missing\n- Value criterion missing"
    },
    "configTenantInternalConfigMetadata": {
      "type": "object",
      "properties": {
        "version": {
          "$ref": "#/definitions/FeatureVersionMessageFeatureVersion"
        }
      },
      "required": [
        "version"
      ]
    },
    "configTenantInternalConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "awsWorkflowConfig": {
          "$ref": "#/definitions/configAWSWorkflowConfiguration",
          "description": "AWS configuration for the tenant."
        },
        "gcpWorkflowConfig": {
          "$ref": "#/definitions/configGCPWorkflowConfiguration",
          "description": "GCP configuration for the tenant."
        },
        "workdayInternalConfig": {
          "$ref": "#/definitions/configWorkdayInternalConfiguration",
          "description": "Workday Configuration for the tenant. Right now it's per tenant based, but it won't stay this way as\nthis will move to system settings."
        },
        "oktaWorkflowConfig": {
          "$ref": "#/definitions/configOktaWorkflowConfiguration"
        },
        "azureWorkflowConfig": {
          "$ref": "#/definitions/configAzureWorkflowConfiguration",
          "title": "TODO(entra): do we need a separate entra config?"
        },
        "workflowConfigurations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configWorkflowConfiguration"
          }
        },
        "metadata": {
          "$ref": "#/definitions/configTenantInternalConfigMetadata"
        },
        "accessRequestAnalysisBehaviourModelConfig": {
          "$ref": "#/definitions/configAccessRequestAnalaysisModelConfiguration"
        },
        "sessionSummaryModelConfig": {
          "$ref": "#/definitions/configSessionSummaryModelConfiguration"
        },
        "featuresData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelsconfigTenantFeatureData"
          }
        },
        "customappInternalConfig": {
          "$ref": "#/definitions/configCustomAppInternalConfiguration"
        },
        "jitConfig": {
          "$ref": "#/definitions/configJITConfiguration"
        },
        "uarConfig": {
          "$ref": "#/definitions/configUARConfiguration"
        },
        "status": {
          "$ref": "#/definitions/configTenantStatusMessageTenantStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "description": "TenantInternalConfiguration stores the Andromeda internal\nconfiguration for a tenant.",
      "required": [
        "id",
        "tenantId"
      ]
    },
    "configTenantStatusMessageTenantStatus": {
      "type": "string",
      "enum": [
        "ENABLED",
        "SUSPENDED",
        "DEACTIVATED"
      ],
      "default": "ENABLED",
      "description": " - ENABLED: Default is enabled."
    },
    "configThirdPartyChannelMessageChannelType": {
      "type": "string",
      "enum": [
        "ANDROMEDA",
        "SLACK",
        "TEAMS"
      ],
      "default": "ANDROMEDA"
    },
    "configTitleMatch": {
      "type": "object",
      "properties": {
        "matchCriteria": {
          "$ref": "#/definitions/configSimpleStringMatchCriteria"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configTransformAttrAction": {
      "type": "object",
      "properties": {
        "attrType": {
          "$ref": "#/definitions/UserAttributeMessageUserAttributeMessageType",
          "title": "There is no matching in the transform. Only ability to specify the\nattribute type"
        },
        "attrValueOp": {
          "$ref": "#/definitions/StringTransformOpMessageStringTransformOp",
          "title": "PB only supports string or integers in the maps\nWhen specified it is preserves the value or uses a map\nas key, value"
        },
        "kvList": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configKeyValue"
          },
          "title": "Use with MAP\nmap\u003cstring, string\u003e value_map = 10;"
        },
        "replaceValue": {
          "type": "string",
          "title": "Use with Replace"
        },
        "regex": {
          "type": "string",
          "title": "Use with RegEx"
        }
      },
      "title": "TODO: Need to modify this to use the union construct rather than the current\nway to different fields for different operations type"
    },
    "configTransformHrTypeAction": {
      "type": "object",
      "properties": {
        "attrValueOp": {
          "$ref": "#/definitions/StringTransformOpMessageStringTransformOp",
          "title": "PB only supports string or integers in the maps\nWhen specified it is preserves the value or uses a map\nas key, value"
        },
        "kvList": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configHrTypeKeyValue"
          },
          "title": "Use with MAP\nmap\u003cstring, string\u003e value_map = 10;"
        },
        "assignValue": {
          "$ref": "#/definitions/configHrType"
        },
        "defaultValue": {
          "$ref": "#/definitions/configHrType",
          "title": "default_value when kv_is not matched\nDefault = THIRD_PARTY"
        }
      },
      "title": "TODO: Need to modify this to use the union construct rather than the current\nway to different fields for different operations type"
    },
    "configUARConfiguration": {
      "type": "object",
      "properties": {
        "revocationValidationConfig": {
          "$ref": "#/definitions/configUARRevocationValidationConfiguration"
        }
      }
    },
    "configUARGenericWorkflowConfiguration": {
      "type": "object",
      "properties": {
        "retryIntervalMinutes": {
          "type": "integer",
          "format": "int64"
        },
        "retryMaximumAttempts": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "configUARRevocationValidationConfiguration": {
      "type": "object",
      "properties": {
        "activityConfig": {
          "$ref": "#/definitions/configUARGenericWorkflowConfiguration"
        }
      }
    },
    "configUarNotificationSettings": {
      "type": "object",
      "properties": {
        "emails": {
          "$ref": "#/definitions/configNotificationSettingEmail",
          "title": "NotificationSettingSlack slack = 1;\nNotificationSettingMicrosoftTeams microsoft_teams = 2;"
        }
      }
    },
    "configUrlResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "configUserAttributeMatch": {
      "type": "object",
      "properties": {
        "userAttribute": {
          "$ref": "#/definitions/UserAttributeMessageUserAttributeMessageType",
          "title": "Which Andromeda user attribute to match. These are well known attributes which are allowed to be matched"
        },
        "matchCriteria": {
          "$ref": "#/definitions/configSimpleStringMatchCriteriaCriteria",
          "title": "How to match the value of the attribute"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The values used during the match"
        },
        "applyNotOperation": {
          "type": "boolean"
        }
      }
    },
    "configUserClassificationAction": {
      "type": "object",
      "properties": {
        "userType": {
          "$ref": "#/definitions/configIdentityType",
          "description": "The classification to assign to the user."
        }
      },
      "title": "UserClassificationAction defines the action to take when a user is classified.\nEx. Rule\n{\n  \"name\": \"Set User Type\",\n  \"description\": \"Set the user type to privileged user\",\n  \"enabled\": true,\n  \"priority\": 1,\n  \"matchTarget\": {\n    \"hr_type\": {\n      \"matchCriteria\": \"EXACT\",\n      \"values\": [\"UNSPECIFED\"]\n    },\n    \"title\": {\n      \"matchCriteria\": \"IS_NULL\",\n    },\n   \"manager\": {\n      \"matchCriteria\": \"IS_NULL\",\n    }\n  },\n  \"action\": {\n    \"classify\": {\n      \"user_type\": \"NHI\"\n    }\n },"
    },
    "configUserDataMappingProfile": {
      "type": "object",
      "properties": {
        "sourceDataMappingRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configUserSourceDataMappingRule"
          },
          "description": "These rules are invoked on every attribute of the user when\ninterpreting from the source. These rules are executed during the\nprocess of creation of the user incarnatio in Andromeda."
        },
        "dataRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configUserDataRule"
          },
          "description": "These rules are invoked when the user is created in Andromeda and further\nprocessing like classification are required. These rules are\nalso invoked when admins do any overrides on the classification\nfor a user. In future, expect to expand this to include actions like\naccept risk for a user incarnation etc."
        }
      }
    },
    "configUserDataRule": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "matches": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configMatchUserTarget"
          }
        },
        "identityTypeClassificationAction": {
          "$ref": "#/definitions/configUserTypeClassificationAction"
        },
        "privilegedUserClassificationAction": {
          "$ref": "#/definitions/configPrivilegedUserClassificationAction"
        },
        "externalNhiInsightAction": {
          "$ref": "#/definitions/configExternalNhiInsightAction"
        },
        "configuredSotAction": {
          "$ref": "#/definitions/configConfiguredSOTAction"
        }
      }
    },
    "configUserId": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        }
      }
    },
    "configUserMergeAction": {
      "type": "object",
      "properties": {
        "mergeToUsername": {
          "type": "string",
          "description": "Mark the user as privileged user which matched the pattern.\nThis will result in the significance set for the merged user as PRIVILEGED_USER.\nIt only applies to the identities discovered from the IDP providers."
        },
        "useRegexOuputAsUsername": {
          "type": "boolean"
        },
        "isPrivilegedUser": {
          "type": "boolean",
          "description": "Deprecated. Use PrivilegedUserClassificationAction instead."
        }
      },
      "title": "UserMergeAction represents the action taken to merge users into an identity.\nThis can be expanded with additional fields as needed for merging logic.\nIf primary identity does not exist, create a new HI but this user entry is with source-of-truth=False\n{\n  \"name\": \"Set User Type\",\n  \"description\": \"Set the user type to privileged user\",\n  \"enabled\": true,\n  \"priority\": 1,\n  \"matchTarget\": {\n    \"username\": {\n      \"matchCriteria\": \"SUFFIX\",\n      \"value\": \"_123\"\n    },\n  \"action\": {\n    \"merge\": {\n      \"is_privileged_user\": \"true\",\n    }\n  }\n}\n{\n  \"name\": \"Set User Type\",\n  \"description\": \"Set the user type to privileged user\",\n  \"enabled\": true,\n  \"matchTarget\": {\n    \"username\": {\n      \"matchCriteria\": \"REGEX\",\n      \"value\": \"regex pattern\"\n    },\n  \"action\": {\n    \"merge\": {\n      \"use_regex_ouput_as_username\": True\n    }\n  }\n}\n{\n  \"name\": \"Mismatch UserNames\",\n  \"description\": \"Set the user type to privileged user\",\n  \"enabled\": true,\n  \"matchTarget\": {\n    \"username\": {\n      \"matchCriteria\": \"EXACT\",\n      \"value\": \"Foo\"\n    },\n  \"action\": {\n    \"merge\": {\n      \"merge_to_username\": \"Bar\"\n    }\n  }\n}"
    },
    "configUserSourceDataMappingRule": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "matches": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configMatchUserAttrTarget"
          },
          "title": "Matches"
        },
        "mapAttr": {
          "$ref": "#/definitions/configMapUserAttrAction"
        },
        "transformAttr": {
          "$ref": "#/definitions/configTransformAttrAction"
        },
        "transformHrAttr": {
          "$ref": "#/definitions/configTransformHrTypeAction",
          "title": "Alternatives not used to using rename attr\n SetManagerAction set_manager = 7;\n SetEmployeeTypeAction set_employee_type = 8;"
        }
      }
    },
    "configUserTypeClassificationAction": {
      "type": "object",
      "properties": {
        "userType": {
          "$ref": "#/definitions/configIdentityType",
          "title": "The classification of human or nhi"
        },
        "nhiData": {
          "$ref": "#/definitions/configNhiClassificationData",
          "title": "Additional metadata when the classification is NHI"
        }
      }
    },
    "configWorkdayAPIConfig": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "userIdAttributeName": {
          "type": "string"
        },
        "authConfig": {
          "$ref": "#/definitions/configWorkdayAuthConfig",
          "title": "Authentication configuration"
        }
      },
      "title": "API Configuration fields - only used when default_mode is WORKDAY_MODE_API",
      "required": [
        "url",
        "userIdAttributeName",
        "authConfig"
      ]
    },
    "configWorkdayAuthConfig": {
      "type": "object",
      "properties": {
        "authMode": {
          "$ref": "#/definitions/configWorkdayAuthMode"
        },
        "basicAuth": {
          "$ref": "#/definitions/configBasicAuth"
        }
      }
    },
    "configWorkdayAuthMode": {
      "type": "string",
      "enum": [
        "WORKDAY_AUTHMODE_UNSPECIFIED",
        "WORKDAY_AUTHMODE_BASIC_AUTH"
      ],
      "default": "WORKDAY_AUTHMODE_UNSPECIFIED"
    },
    "configWorkdayConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "defaultMode": {
          "$ref": "#/definitions/WorkdayConfigModeMessageWorkdayConfigMode",
          "description": "Default Andromeda mode for all WorkdayConfiguration objects."
        },
        "userDataMappingProfile": {
          "$ref": "#/definitions/configUserDataMappingProfile"
        },
        "integrationId": {
          "type": "string",
          "title": "TODO(IS): revert with UI"
        },
        "providerId": {
          "type": "string"
        },
        "fileId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "apiConfig": {
          "$ref": "#/definitions/configWorkdayAPIConfig"
        }
      },
      "required": [
        "name",
        "defaultMode",
        "tenantId"
      ]
    },
    "configWorkdayInternalConfiguration": {
      "type": "object",
      "properties": {
        "bucketName": {
          "type": "string"
        },
        "bucketRegion": {
          "type": "string"
        },
        "authConfig": {
          "$ref": "#/definitions/configAuthConfig",
          "title": "Andromeda S3 Bucket Auth details"
        }
      }
    },
    "configWorkflowConfiguration": {
      "type": "object",
      "properties": {
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "inventoryWfIntervalMins": {
          "type": "integer",
          "format": "int32"
        },
        "fullInventoryRefreshIntervalMins": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "googlelongrunningOperation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`."
        },
        "metadata": {
          "$ref": "#/definitions/protobufAny",
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any."
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable."
        },
        "error": {
          "$ref": "#/definitions/googlerpcStatus",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "response": {
          "$ref": "#/definitions/protobufAny",
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`."
        }
      },
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call."
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of\n[google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized\nby the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "graphAccessData": {
      "type": "object",
      "properties": {
        "identityId": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "accessKeyData": {
          "$ref": "#/definitions/graphAccessKeyDataConnection"
        },
        "consoleAccessData": {
          "$ref": "#/definitions/graphConsoleAccessData"
        }
      }
    },
    "graphAccessKeyData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "keyId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastUsed": {
          "type": "string",
          "format": "date-time"
        },
        "keyRotationPastDueDays": {
          "type": "integer",
          "format": "int64"
        },
        "keyOpsInsight": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphKeyOpsInsightData"
          }
        },
        "status": {
          "$ref": "#/definitions/AccessKeyStatusMessageAccessKeyStatus"
        },
        "keyRotationDueAt": {
          "type": "string",
          "format": "date-time"
        },
        "identityOriginType": {
          "$ref": "#/definitions/IdentityOriginTypeMessageIdentityOriginType"
        },
        "userData": {
          "$ref": "#/definitions/graphIdentityOriginData"
        },
        "keyRiskData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphKeyRiskData"
          }
        },
        "keyType": {
          "$ref": "#/definitions/KeyTypeMessageKeyType"
        },
        "scope": {
          "$ref": "#/definitions/nonpublicgraphScope"
        },
        "activities": {
          "$ref": "#/definitions/graphActivitiesConnection"
        }
      }
    },
    "graphAccessKeyDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphAccessKeysDataEdge"
          }
        },
        "accessKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphAccessKeySignificanceData": {
      "type": "object",
      "properties": {
        "accessKeyInactive365DaysPlus": {
          "type": "boolean",
          "title": "KEY TIME BUCKETS // problem with gqlgen for numeric fields @sooraj"
        },
        "accessKeyInactive180365Days": {
          "type": "boolean"
        },
        "accessKeyInactive90180Days": {
          "type": "boolean"
        },
        "accessKeyInactive3090Days": {
          "type": "boolean"
        },
        "accessKeyActive": {
          "type": "boolean"
        }
      }
    },
    "graphAccessKeysDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphAccessKeyData"
        }
      }
    },
    "graphAccessKeysSummary": {
      "type": "object",
      "properties": {
        "rotationPastDueCount": {
          "type": "integer",
          "format": "int64"
        },
        "accessKeysCount": {
          "type": "integer",
          "format": "int64"
        },
        "accessKeyInactive365DaysPlus": {
          "type": "integer",
          "format": "int64"
        },
        "accessKeyInactive180365Days": {
          "type": "integer",
          "format": "int64"
        },
        "accessKeyInactive90180Days": {
          "type": "integer",
          "format": "int64"
        },
        "accessKeyInactive3090Days": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "graphAccessReviewerCampaignEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/protobufAny"
        },
        "reviewerCampaignData": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    },
    "graphAccessReviewerCampaignsConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphAccessReviewerCampaignEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphAccessReviewerCampaignsGroupedByEntitlementType": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/configEntitlementTypeMessageEntitlementType"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "graphAccessReviewerCampaignsGroupedByStatus": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/AccessReviewReviewerStatusMessageAccessReviewReviewerStatus"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "graphAccessReviewerData": {
      "type": "object",
      "properties": {
        "reviewerCampaigns": {
          "$ref": "#/definitions/graphAccessReviewerCampaignsConnection"
        },
        "accessReviewerReviewsSummary": {
          "$ref": "#/definitions/graphAccessReviewerReviewsSummary"
        },
        "accessReviews": {
          "$ref": "#/definitions/protobufAny",
          "description": "All the access reviews for this identity as a reviewer."
        },
        "identityId": {
          "type": "string"
        }
      },
      "description": "List of campaigns for the identity."
    },
    "graphAccessReviewerReviewsSummary": {
      "type": "object",
      "properties": {
        "identityId": {
          "type": "string"
        },
        "campaignReviewerDataId": {
          "type": "string"
        },
        "reviewsGroupedByAiRecommendation": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphAccessReviewsGroupedByAiRecommendation"
          },
          "description": "Reviews grouped by ai recommendation."
        },
        "reviewsGroupedByStatus": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphAccessReviewsGroupedByStatus"
          },
          "description": "Reviews grouped by status."
        },
        "reviewsGroupedByStatusNRecommendation": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphAccessReviewsGroupedByStatusAndAiRecommendation"
          },
          "description": "Reviews grouped by status and ai recommendation."
        },
        "reviewsGroupedByScope": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphAccessReviewsGroupedByScope"
          },
          "description": "Summary of the reviews grouped by scope and status."
        },
        "campaignsGroupedByStatus": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphAccessReviewerCampaignsGroupedByStatus"
          }
        },
        "campaignsGroupedByEntitlementType": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphAccessReviewerCampaignsGroupedByEntitlementType"
          }
        }
      }
    },
    "graphAccessReviewsGroupedByAiRecommendation": {
      "type": "object",
      "properties": {
        "recommendation": {
          "$ref": "#/definitions/AiAccessReviewRecommendationMessageAiAccessReviewRecommendation"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "graphAccessReviewsGroupedByScope": {
      "type": "object",
      "properties": {
        "providerId": {
          "type": "string",
          "title": "Not sure if provider object is too heavy weight"
        },
        "provider": {
          "$ref": "#/definitions/protobufAny"
        },
        "scope": {
          "$ref": "#/definitions/nonpublicgraphScope"
        },
        "reviewStatus": {
          "$ref": "#/definitions/AccessReviewStatusMessageAccessReviewStatus"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "accountId": {
          "type": "string"
        },
        "account": {
          "$ref": "#/definitions/protobufAny"
        }
      },
      "title": "for each scope and review_status counts"
    },
    "graphAccessReviewsGroupedByStatus": {
      "type": "object",
      "properties": {
        "reviewStatus": {
          "$ref": "#/definitions/AccessReviewStatusMessageAccessReviewStatus"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "graphAccessReviewsGroupedByStatusAndAiRecommendation": {
      "type": "object",
      "properties": {
        "reviewStatus": {
          "$ref": "#/definitions/AccessReviewStatusMessageAccessReviewStatus"
        },
        "aiRecommendation": {
          "$ref": "#/definitions/AiAccessReviewRecommendationMessageAiAccessReviewRecommendation"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "graphAccountOverview": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32",
          "title": "BlockPlot risk_block_plot = 2;"
        }
      }
    },
    "graphAccountOwnershipSummary": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        }
      }
    },
    "graphAccountPolicyDetails": {
      "type": "object",
      "properties": {
        "externalId": {
          "type": "string",
          "title": "Eg. AWS ARN of the Policy"
        },
        "name": {
          "type": "string",
          "title": "Name of the Policy"
        },
        "type": {
          "$ref": "#/definitions/ProviderPolicyTypeMessageProviderPolicyType",
          "title": "AWS Policy Type\nAWS Policy Type eg. managed, inline, customer managed"
        },
        "jsonData": {
          "type": "string",
          "title": "JSON encoded string of the policy document in the provider"
        }
      },
      "description": "Per Provider Policy Details Eg. details of a AWS managed policy in AWS."
    },
    "graphAccountPolicyDetailsConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphAccountPolicyDetailsEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphAccountPolicyDetailsEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphAccountPolicyDetails"
        }
      }
    },
    "graphAccountRiskScore": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "riskScore": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "graphAccountScopeData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "isInherited": {
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/ScopeTypeEnumScopeType"
        },
        "parentScope": {
          "$ref": "#/definitions/nonpublicgraphScope"
        }
      }
    },
    "graphActivitiesConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphActivityEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphActivity": {
      "type": "object",
      "properties": {
        "providerId": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "providerLogoUrl": {
          "type": "string"
        },
        "providerCategory": {
          "$ref": "#/definitions/utilsProviderCategoryType"
        },
        "accountName": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "scopeId": {
          "type": "string"
        },
        "scopeType": {
          "$ref": "#/definitions/ScopeTypeEnumScopeType"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "action": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/andromedautilsLocation"
        },
        "device": {
          "$ref": "#/definitions/graphDevice"
        },
        "identityIncarnationId": {
          "type": "string",
          "description": "A human identity can have multiple incarnations like AWS IDC user and AWS IAM user. In such\ncases need to track which incarnation of this user this activity belong to."
        },
        "policyId": {
          "type": "string",
          "title": "policy id of the policy that is associated with this activity"
        },
        "policyName": {
          "type": "string"
        },
        "accessKeyData": {
          "$ref": "#/definitions/graphAccessKeyData",
          "title": "Details of the access key used in the activity (if applicable)"
        },
        "accessType": {
          "$ref": "#/definitions/AccessTypeMessageAccessType"
        }
      }
    },
    "graphActivityEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphActivity"
        }
      }
    },
    "graphAwsExternalId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID of a resource in AWs"
        },
        "issuer": {
          "type": "string",
          "title": "ID of the issuer issuing the External ID"
        }
      }
    },
    "graphAwsExternalServiceIdentity": {
      "type": "object",
      "properties": {
        "subType": {
          "$ref": "#/definitions/AwsExternalServiceIdentitySubTypeMessageAwsExternalServiceIdentitySubType"
        }
      }
    },
    "graphAzureServiceIdentity": {
      "type": "object",
      "properties": {
        "subType": {
          "$ref": "#/definitions/AzureServiceIdentitySubTypeMessageAzureServiceIdentitySubType"
        }
      }
    },
    "graphBucketOptions": {
      "type": "object",
      "properties": {
        "linearBuckets": {
          "$ref": "#/definitions/graphLinear",
          "description": "The linear bucket."
        },
        "exponentialBuckets": {
          "$ref": "#/definitions/graphExponential",
          "description": "The exponential buckets."
        },
        "explicitBuckets": {
          "$ref": "#/definitions/graphExplicit",
          "description": "The explicit buckets."
        }
      },
      "description": "`BucketOptions` describes the bucket boundaries used to create a histogram\nfor the distribution. The buckets can be in a linear sequence, an\nexponential sequence, or each bucket can be specified explicitly.\n`BucketOptions` does not include the number of values in each bucket.\n\nA bucket has an inclusive lower bound and exclusive upper bound for the\nvalues that are counted for that bucket. The upper bound of a bucket must\nbe strictly greater than the lower bound. The sequence of N buckets for a\ndistribution consists of an underflow bucket (number 0), zero or more\nfinite buckets (number 1 through N - 2) and an overflow bucket (number N -\n1). The buckets are contiguous: the lower bound of bucket i (i \u003e 0) is the\nsame as the upper bound of bucket i - 1. The buckets span the whole range\nof finite values: lower bound of the underflow bucket is -infinity and the\nupper bound of the overflow bucket is +infinity. The finite buckets are\nso-called because both bounds are finite."
    },
    "graphCampaignOwnersData": {
      "type": "object",
      "properties": {
        "campaigns": {
          "$ref": "#/definitions/protobufAny",
          "description": "List of campaigns for the identity."
        },
        "identityId": {
          "type": "string"
        },
        "availableCampaignTemplates": {
          "$ref": "#/definitions/protobufAny",
          "title": "List of templates available for this identity to create campaigns from\nIn general, this list is the templates where owners list includes\nthis identity"
        }
      }
    },
    "graphConsoleAccessData": {
      "type": "object",
      "properties": {
        "lastUsed": {
          "type": "string",
          "format": "date-time"
        },
        "consoleOpsInsights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphConsoleOpsInsight"
          },
          "title": "Console access significance"
        }
      }
    },
    "graphConsoleOpsInsight": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/ConsoleAccessSignificanceMessageConsoleAccessSignificance"
        },
        "category": {
          "$ref": "#/definitions/ServiceIdentitySignificanceCategoryMessageServiceIdentitySignificanceCategory"
        }
      }
    },
    "graphCrossAccountInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The account id on which this identity was defined.\nIn case of IAM User, the same user may be defined in multiple accounts.\nIt is possible that access to a given account may be via a direct\nbinding or it could be via a lateral role."
        },
        "name": {
          "type": "string",
          "title": "name of the account"
        }
      },
      "description": "[More complex case] user-A has PSet-1 in account-A and Pset-2 in account-B.\nSo it would show up as \"self\" in account-B's identity list.\nBut also has lateral access from account-A (role-abe in account-B has trust to PSet-A in account-A).\nDo we need to reflect both cases of \"Self\" and cross? It could have cross from multiple accounts.\nDo we need to reflect it? IdentityOriginAccountId should reflect [account-A, account-B]\nNo issue with Service-Role is it can only be in one account.\nChallenges with IAM user (which we classify as human and merge if username is same in multiple accounts).\niam-user foo exists in a-A + a-B + a-Z. In account C there are two roles - r-1 with trust to a-A/foo and r-2 with trust to a-B/foo.\nIn addition, (no trust for a-Z/foo for any role) in Account-C's human\nlist we must list foo as cross and origin-account needs to be repeated and list a-A, a-B",
      "title": "IAM user (or service role) in account-A has a direct trust to a role in Account-B Complex cases\nIdentity Center user-A has PSet-1 in account-A (and not pset binding for account-B).\nRole abc in Account-B has trust to PSet-A. So user-A has via lateral access to account-B.\nSo in Account-B's list of identities, we need to reflect user-A"
    },
    "graphDevice": {
      "type": "object",
      "properties": {
        "deviceInfo": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "engine": {
          "type": "string"
        },
        "architecture": {
          "type": "string"
        }
      }
    },
    "graphDistribution": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64",
          "description": "The range of the population values.\nThe number of values in the population. Must be non-negative. This value\nmust equal the sum of the values in `bucket_counts` if a histogram is\nprovided."
        },
        "bucketOptions": {
          "$ref": "#/definitions/graphBucketOptions",
          "description": "Defines the histogram bucket boundaries. If the distribution does not\ncontain a histogram, then omit this field."
        },
        "bucketCounts": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "description": "The number of values in each bucket of the histogram, as described in\n`bucket_options`. If the distribution does not have a histogram, then omit\nthis field. If there is a histogram, then the sum of the values in\n`bucket_counts` must equal the value in the `count` field of the\ndistribution.\n\nIf present, `bucket_counts` should contain N values, where N is the number\nof buckets specified in `bucket_options`. If you supply fewer than N\nvalues, the remaining values are assumed to be 0.\n\nThe order of the values in `bucket_counts` follows the bucket numbering\nschemes described for the three bucket types. The first value must be the\ncount for the underflow bucket (number 0). The next N-2 values are the\ncounts for the finite buckets (number 1 through N-2). The N'th value in\n`bucket_counts` is the count for the overflow bucket (number N-1)."
        }
      }
    },
    "graphEksClusterDetails": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "graphEligibleResourceGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "policyAccessRequestProfile": {
          "$ref": "#/definitions/graphPolicyAccessRequestProfile",
          "description": "policyAccessRequestProfile holds the effective access request profile details for this resource group.\nIt is highly advised to request for this field only for a single policy at a time,\nbecause gathering effective profiles for multiple policies at a time could be expensive."
        }
      }
    },
    "graphEligibleResourceGroupEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphEligibleResourceGroup"
        }
      }
    },
    "graphEligibleResourceGroupsConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphEligibleResourceGroupEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphEligibleUserIncarnation": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "identityOriginType": {
          "$ref": "#/definitions/IdentityOriginTypeMessageIdentityOriginType"
        }
      }
    },
    "graphEligibleUserIncarnationEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphEligibleUserIncarnation"
        }
      }
    },
    "graphEligibleUserIncarnationsConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphEligibleUserIncarnationEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphExplicit": {
      "type": "object",
      "properties": {
        "bounds": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          },
          "description": "The values must be monotonically increasing."
        }
      },
      "description": "Specifies a set of buckets with arbitrary widths.\n\nThere are `size(bounds) + 1` (= N) buckets. Bucket `i` has the following\nboundaries:\n\n   Upper bound (0 \u003c= i \u003c N-1):     bounds[i]\n   Lower bound (1 \u003c= i \u003c N);       bounds[i - 1]\n\nThe `bounds` field must contain at least one element. If `bounds` has\nonly one element, then there are no finite buckets, and that single\nelement is the common boundary of the overflow and underflow buckets."
    },
    "graphExponential": {
      "type": "object",
      "properties": {
        "numFiniteBuckets": {
          "type": "integer",
          "format": "int32",
          "description": "Must be greater than 0."
        },
        "growthFactor": {
          "type": "number",
          "format": "double",
          "description": "Must be greater than 1."
        },
        "scale": {
          "type": "number",
          "format": "double",
          "description": "Must be greater than 0."
        }
      },
      "description": "Specifies an exponential sequence of buckets that have a width that is\nproportional to the value of the lower bound. Each bucket represents a\nconstant relative uncertainty on a specific value in the bucket.\n\nThere are `num_finite_buckets + 2` (= N) buckets. Bucket `i` has the\nfollowing boundaries:\n\n   Upper bound (0 \u003c= i \u003c N-1):     scale * (growth_factor ^ i).\n\n   Lower bound (1 \u003c= i \u003c N):       scale * (growth_factor ^ (i - 1))."
    },
    "graphFilterCollection": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublicgraphFilter"
          }
        }
      }
    },
    "graphFilterExpression": {
      "type": "object",
      "properties": {
        "dnfFilter": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphFilterCollection"
          }
        }
      }
    },
    "graphFolderConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphFolderEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphFolderEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/nonpublicgraphFolder"
        }
      }
    },
    "graphFolderScopeData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "isInherited": {
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/ScopeTypeEnumScopeType"
        },
        "parentScope": {
          "$ref": "#/definitions/nonpublicgraphScope"
        }
      }
    },
    "graphGcpServiceIdentity": {
      "type": "object",
      "properties": {
        "subType": {
          "$ref": "#/definitions/GcpServiceIdentitySubTypeMessageGcpServiceIdentitySubType"
        }
      }
    },
    "graphGroupDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/nonpublicgraphGroup"
        }
      }
    },
    "graphGroupMembers": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "humanUsers": {
          "$ref": "#/definitions/graphIdentityOriginDataConnection",
          "title": "Contains all the direct human user incarnations of the group"
        },
        "serviceIdentities": {
          "$ref": "#/definitions/protobufAny",
          "description": "As of now, there is one to one mapping between non human user and service identity, hence directly attaching service identities connection here."
        },
        "groups": {
          "$ref": "#/definitions/graphGroupsConnection"
        }
      }
    },
    "graphGroupProviderAccountData": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "accountId": {
          "type": "string"
        },
        "providerConfiguredAssignments": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    },
    "graphGroupProviderAccountDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphGroupProviderAccountDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphGroupProviderAccountDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/protobufAny",
          "description": "Account this group has access to."
        },
        "groupAccountData": {
          "$ref": "#/definitions/graphGroupProviderAccountData"
        }
      }
    },
    "graphGroupProviderData": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "providerConfiguredAssignments": {
          "$ref": "#/definitions/protobufAny",
          "title": "Needed when it is an application provider where there are no accounts"
        },
        "groupProviderAccountData": {
          "$ref": "#/definitions/graphGroupProviderAccountDataConnection",
          "title": "only present when it is cloud provider where account is mandatory"
        }
      }
    },
    "graphGroupProviderEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/protobufAny",
          "description": "Provider that this group has access to."
        },
        "groupProviderData": {
          "$ref": "#/definitions/graphGroupProviderData",
          "description": "Details of Group's Provider specific data."
        }
      }
    },
    "graphGroupProvidersConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphGroupProviderEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphGroupScopeData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "isInherited": {
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/ScopeTypeEnumScopeType"
        },
        "group": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    },
    "graphGroupsConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphGroupDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphHrIdentityInfo": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "hrType": {
          "$ref": "#/definitions/configHrType"
        },
        "hireDate": {
          "type": "string",
          "format": "date-time"
        },
        "terminationDate": {
          "type": "string",
          "format": "date-time"
        },
        "orgName": {
          "type": "string"
        },
        "managerName": {
          "type": "string"
        },
        "managerId": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "locationState": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "lastMoved": {
          "type": "string"
        },
        "positionTitle": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "department": {
          "type": "string"
        }
      }
    },
    "graphIdentitiesConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityEdge"
          }
        },
        "identityIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphIdentityAccessRequestData": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        },
        "policyType": {
          "$ref": "#/definitions/configPolicyTypeMessagePolicyType"
        },
        "accountId": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "requester": {
          "$ref": "#/definitions/graphIdentityAccessRequestRequesterData",
          "description": "Requester can be Identity or Group."
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "description": "Access request duration in seconds."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/AccessRequestTypeMessageAccessRequestType"
        },
        "requestScope": {
          "$ref": "#/definitions/configAccessRequestScope"
        },
        "requesterUser": {
          "$ref": "#/definitions/graphIdentityAccessRequestRequesterUserData",
          "description": "User incarnation details."
        },
        "expiresIn": {
          "type": "integer",
          "format": "int64",
          "description": "ExpiresIn is the time that remains before deprovisioning is triggered. This is perpetually\nset to 0 for STANDING access requests."
        },
        "createdBy": {
          "$ref": "#/definitions/graphIdentityAccessRequestRequesterData"
        },
        "reviews": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityAccessRequestReviewData"
          }
        },
        "status": {
          "$ref": "#/definitions/configJitPolicyTransactionStatus"
        },
        "requestAnalysis": {
          "$ref": "#/definitions/configJitPolicyRequestAnalysis"
        },
        "sessionAnalysis": {
          "$ref": "#/definitions/configJitSessionAnalysis"
        },
        "accountMode": {
          "$ref": "#/definitions/configAccountMode"
        },
        "provisioningDetails": {
          "$ref": "#/definitions/configAccessRequestProvisioningDetails"
        },
        "userActions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configJitPolicyRequestUserAction"
          }
        },
        "providerDetailsData": {
          "$ref": "#/definitions/graphProviderDetailsData"
        },
        "itsmData": {
          "$ref": "#/definitions/configAccessRequestItsmData"
        },
        "reviewLevelDetails": {
          "$ref": "#/definitions/configAccessRequestReviewLevelDetails"
        },
        "resourceSetData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        },
        "assignmentType": {
          "$ref": "#/definitions/AccessRequestAssignmentTypeMessageAccessRequestAssignmentType"
        }
      }
    },
    "graphIdentityAccessRequestDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityAccessRequestDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphIdentityAccessRequestDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphIdentityAccessRequestData"
        }
      }
    },
    "graphIdentityAccessRequestRequesterData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/configPrincipalTypeMessagePrincipalType"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "graphIdentityAccessRequestRequesterUserData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "identityOriginType": {
          "$ref": "#/definitions/IdentityOriginTypeMessageIdentityOriginType"
        }
      }
    },
    "graphIdentityAccessRequestReviewData": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/JitPolicyReviewStatusMessageReviewerReviewStatus"
        },
        "reason": {
          "type": "string"
        },
        "reviewerId": {
          "type": "string"
        },
        "reviewerType": {
          "$ref": "#/definitions/configAccessRequestReviewReviewerTypeType"
        },
        "reviewLevel": {
          "type": "integer",
          "format": "int64"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "graphIdentityAccessRequestSummaryByType": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/AccessRequestTypeMessageAccessRequestType"
        },
        "completedCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "graphIdentityAccessRequestSummaryData": {
      "type": "object",
      "properties": {
        "activeRequests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityActiveAccessRequestSummaryData"
          }
        },
        "accessRequestSummaryByType": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityAccessRequestSummaryByType"
          }
        }
      }
    },
    "graphIdentityAccountData": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "isOwner": {
          "type": "boolean"
        },
        "activities": {
          "$ref": "#/definitions/graphActivitiesConnection"
        },
        "blastRisk": {
          "type": "integer",
          "format": "int64"
        },
        "blastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "isBlastRiskComputed": {
          "type": "boolean"
        },
        "highRiskFrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskInfrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskUnusedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskFrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskInfrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskUnusedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "untrackedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "totalPermissions": {
          "type": "integer",
          "format": "int64"
        },
        "excessivePrivilegeScore": {
          "type": "integer",
          "format": "int64"
        },
        "unusedPermissionsPercentage": {
          "type": "integer",
          "format": "int64"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "isRiskAccepted": {
          "type": "boolean"
        },
        "servicesUsed": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identityId": {
          "type": "string"
        },
        "policiesData": {
          "$ref": "#/definitions/graphIdentityPoliciesDataConnection"
        },
        "policiesSummary": {
          "$ref": "#/definitions/graphPoliciesSummary",
          "title": "Summary of policies inside a given account"
        },
        "groups": {
          "$ref": "#/definitions/graphIdentityGroupsDataConnection"
        },
        "groupsNew": {
          "$ref": "#/definitions/graphGroupsConnection"
        },
        "eligiblePolicies": {
          "$ref": "#/definitions/graphIdentityPolicyEligibilityDataConnection",
          "title": "TODO: Deprecate. Use Identity -\u003e providersData -\u003e eligible_policies"
        },
        "originAccountsSummary": {
          "$ref": "#/definitions/graphIdentityOriginAccountsSummary",
          "title": "When logical list of the identity is present in an account then\nit can be either local or cross or idc"
        },
        "originAccounts": {
          "$ref": "#/definitions/graphIdentityOriginAccountDataConnection",
          "description": "Explains why this identity is part of this account\nIt can be because of following\n1. Human Identities which exists as local IAM users in the account\n2. Human Identities which exists in IDC globally and has access to this account through an direct Assignment/Binding.\n3. Human Identities which exists in IDC globally but has lateral access to this account through another account\n4. Human Identities which exists in IAM in another account which as access to this account through direct or lateral."
        },
        "mode": {
          "$ref": "#/definitions/configAccountMode",
          "description": "Andromeda account mode specified via the Andromeda account settings."
        },
        "knownLocations": {
          "$ref": "#/definitions/graphKnownLocationsConnection"
        },
        "knownDevices": {
          "$ref": "#/definitions/graphKnownDevicesConnection"
        },
        "significanceData": {
          "$ref": "#/definitions/graphIdentitySignificanceData",
          "description": "Information about different significance attributes of the identity at the account level.\nIf identity is active in another account but not in this account the inactive flag\nwill not be set."
        },
        "accountProviderId": {
          "type": "string"
        },
        "identityAccountState": {
          "$ref": "#/definitions/configIdentityStatus"
        },
        "opsInsights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityOpsInsightData"
          }
        },
        "riskFactors": {
          "$ref": "#/definitions/graphRiskFactors"
        },
        "riskFactorsData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphRiskFactorData"
          }
        },
        "computedBlastRisk": {
          "type": "integer",
          "format": "int64",
          "title": "The following blast_risk related fields store the originally computed\nblast_risk values for an identity whose risk has been accepted"
        },
        "computedBlastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "activityCount": {
          "type": "integer",
          "format": "int64"
        },
        "lastActivityAt": {
          "type": "string",
          "format": "date-time"
        },
        "folders": {
          "$ref": "#/definitions/graphFolderConnection"
        },
        "lastActivity": {
          "$ref": "#/definitions/graphActivity"
        }
      }
    },
    "graphIdentityAccountDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphIdentityAccountData"
        }
      }
    },
    "graphIdentityAccountSummary": {
      "type": "object",
      "properties": {
        "identityId": {
          "type": "string"
        },
        "accountsOwned": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphAccountOwnershipSummary"
          }
        }
      }
    },
    "graphIdentityAccountsDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityAccountDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphIdentityAccountsSummary": {
      "type": "object",
      "properties": {
        "groupedAccountsByBlastRiskLevel": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityGroupedByRiskLevel"
          }
        },
        "identityId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        }
      }
    },
    "graphIdentityActiveAccessRequestDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityAccessRequestDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphIdentityActiveAccessRequestSummaryData": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/configJitPolicyTransactionStatus"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "description": "Duration of the access request in seconds."
        },
        "reviews": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityAccessRequestReviewData"
          }
        },
        "type": {
          "$ref": "#/definitions/AccessRequestTypeMessageAccessRequestType"
        },
        "accountName": {
          "type": "string"
        },
        "requesterName": {
          "type": "string"
        }
      }
    },
    "graphIdentityApplicationData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "applicationObjectId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/ExternalUserStatusMessageExternalUserStatus"
        },
        "applicationType": {
          "type": "string"
        }
      },
      "title": "TODO: auto-detect type to unmarshal. maybe add origin type targets or make type as common application_type user"
    },
    "graphIdentityAwsIamData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID of the IAM user in the AWS account.\nMaps to the userid in the AWS IAM"
        },
        "username": {
          "type": "string",
          "description": "The AWS IAM user username."
        },
        "arn": {
          "type": "string",
          "description": "The AWS IAM user ARN."
        },
        "identityId": {
          "type": "string"
        },
        "path": {
          "type": "string",
          "description": "Path of the IAM user in the AWS account."
        },
        "originProviderId": {
          "type": "string",
          "description": "Andromeda ID of the provider where this IAM user is defined."
        },
        "originProviderName": {
          "type": "string",
          "description": "Provider name where this IAM user is defined."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/andromedautilsTag"
          },
          "title": "tags associated with the IAM user"
        },
        "accessKeyData": {
          "$ref": "#/definitions/graphAccessKeyDataConnection"
        },
        "userMfaData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphMfaData"
          }
        },
        "accessKeysSummary": {
          "$ref": "#/definitions/graphAccessKeysSummary"
        },
        "consoleAccess": {
          "type": "boolean"
        },
        "iamGroupData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityGroupData"
          },
          "description": "A list of IAM groups that this incarnation is part of."
        },
        "iamGroupDataNew": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublicgraphGroup"
          },
          "title": "This is the new Group connection"
        },
        "state": {
          "$ref": "#/definitions/ExternalUserStatusMessageExternalUserStatus"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "graphIdentityAwsIdcData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "A unique string used to identify the user. The length limit is 128 characters. This value can consist of letters, accented characters, symbols, numbers, and punctuation.\nThis value is specified at the time the user is created and stored as an attribute of the user object in the identity store."
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "title": "The globally unique identifier for the identity\nThis maps to the user_id in the AWS IDC"
        },
        "email": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/graphIdentityInsightLocation"
        },
        "scimType": {
          "$ref": "#/definitions/IdentityScimStatusTypeMessageIdentityScimStatusType",
          "title": "The status of the user in the SCIM system (SCIM, MANUAL, UNSPECIFIED)"
        },
        "userType": {
          "type": "string",
          "title": "A string indicating the type of user in AWS"
        },
        "mfaData": {
          "$ref": "#/definitions/graphMfaData",
          "description": "Need to distinguish between it is applicable but set to false vs it is not applicable\nThis needs to become an ENUM."
        },
        "awsUserExternalIds": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphAwsExternalId"
          },
          "title": "These are external ids associated with the identity in AWS"
        },
        "state": {
          "$ref": "#/definitions/ExternalUserStatusMessageExternalUserStatus",
          "title": "The status of the user in the HRIS system (ENABLED, DEACTIVATED)"
        }
      }
    },
    "graphIdentityAzureData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "A unique string used to identify the user. The length limit is 128 characters. This value can consist of letters, accented characters, symbols, numbers, and punctuation.\nThis value is specified at the time the user is created and stored as an attribute of the user object in the identity store."
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "azureObjectId": {
          "type": "string",
          "title": "id in azure"
        },
        "email": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/graphIdentityInsightLocation"
        },
        "state": {
          "$ref": "#/definitions/ExternalUserStatusMessageExternalUserStatus"
        },
        "orgInfo": {
          "$ref": "#/definitions/graphOrganizationInfo"
        }
      }
    },
    "graphIdentityDataIssue": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/IdentityDataIssueTypeMessageIdentityDataIssueType"
        },
        "description": {
          "type": "string"
        },
        "originData": {
          "$ref": "#/definitions/graphIdentityOriginData"
        }
      }
    },
    "graphIdentityDataIssueConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityDataIssueEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphIdentityDataIssueEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphIdentityDataIssue"
        }
      }
    },
    "graphIdentityEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/nonpublicgraphIdentity"
        }
      }
    },
    "graphIdentityEligibilityData": {
      "type": "object",
      "properties": {
        "eligibleRole": {
          "$ref": "#/definitions/protobufAny",
          "title": "Eligiblity Type: ROLE_ASSIGNMENT"
        },
        "eligibleResourceSet": {
          "$ref": "#/definitions/protobufAny",
          "title": "Eligiblity Type: RESOURCE_SET_ASSIGNMENT"
        },
        "eligibleResourcesData": {
          "$ref": "#/definitions/graphIdentityResourceEligibilityData",
          "title": "Eligiblity Type: RESOURCE_ASSIGNMENT\nConnection of per service type resource eligibility data"
        }
      }
    },
    "graphIdentityEligibleProvidersConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityEligibleProvidersEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphIdentityEligibleProvidersEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    },
    "graphIdentityGroupData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Andromeda UUID"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/IdentityGroupTypeMessageIdentityGroupType"
        },
        "identities": {
          "$ref": "#/definitions/graphIdentitiesConnection",
          "title": "members of this group"
        }
      }
    },
    "graphIdentityGroupDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphIdentityGroupData"
        }
      }
    },
    "graphIdentityGroupedByRiskCategory": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/configRiskCategory"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "factors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityGroupedByRiskFactor"
          }
        }
      }
    },
    "graphIdentityGroupedByRiskFactor": {
      "type": "object",
      "properties": {
        "factor": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/configRiskFactor"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "graphIdentityGroupedByRiskLevel": {
      "type": "object",
      "properties": {
        "riskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "graphIdentityGroupsDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityGroupDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphIdentityHrisData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "title": {
          "type": "string",
          "title": "Title of the identity in the source Hris system"
        },
        "positionTitle": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "department": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/graphIdentityInsightLocation"
        },
        "managerId": {
          "type": "string",
          "title": "ID of the manager in the source HRIS system"
        },
        "managerName": {
          "type": "string"
        },
        "managerEmail": {
          "type": "string"
        },
        "managerTitle": {
          "type": "string"
        },
        "hrType": {
          "$ref": "#/definitions/configHrType",
          "title": "Employee type in the source HRIS system"
        },
        "hireDate": {
          "type": "string",
          "format": "date-time"
        },
        "terminationDate": {
          "type": "string",
          "format": "date-time"
        },
        "category": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/ExternalUserStatusMessageExternalUserStatus",
          "title": "The status of the user in the HRIS system (ENABLED, DEACTIVATED)"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "graphIdentityIdpData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Maps to login in the API"
        },
        "username": {
          "type": "string",
          "title": "Either matching the email or username from the API\nOkta's format requires email format"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "mfaEnabled": {
          "type": "boolean"
        },
        "title": {
          "type": "string",
          "title": "Title of the identity in the source Idp system"
        },
        "location": {
          "$ref": "#/definitions/graphIdentityInsightLocation"
        },
        "managerId": {
          "type": "string",
          "title": "ID of the manager in the source Idp system"
        },
        "managerName": {
          "type": "string"
        },
        "managerEmail": {
          "type": "string"
        },
        "managerUsername": {
          "type": "string"
        },
        "managerTitle": {
          "type": "string"
        },
        "department": {
          "type": "string"
        },
        "identityId": {
          "type": "string"
        },
        "hrType": {
          "$ref": "#/definitions/configHrType",
          "title": "Employee type in the source IDP system"
        },
        "state": {
          "$ref": "#/definitions/ExternalUserStatusMessageExternalUserStatus",
          "title": "The status of the user in the HRIS system (ENABLED, DEACTIVATED, SUSPENDED)"
        },
        "accessKeyData": {
          "$ref": "#/definitions/graphAccessKeyDataConnection"
        },
        "userMfaData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphMfaData"
          }
        },
        "accessKeysSummary": {
          "$ref": "#/definitions/graphAccessKeysSummary"
        },
        "idpApplications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublicgraphIdpApplication"
          }
        },
        "isPrivilegedUser": {
          "type": "boolean",
          "title": "TODO(AS-7016)\nIf this IDP user is a privileged user based on the Identity Mapping configuration"
        }
      }
    },
    "graphIdentityInsight": {
      "type": "object",
      "properties": {
        "summary": {
          "type": "string",
          "title": "summary of the insights"
        },
        "issues": {
          "$ref": "#/definitions/graphIdentityDataIssueConnection",
          "description": "List of issues related to the identity data."
        }
      }
    },
    "graphIdentityInsightLocation": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "locationState": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "streetAddress": {
          "type": "string"
        }
      },
      "title": "location data in the source system\nHR and IDP might have different fields populated\nfor example, an HR system might not have a street address\nbut okta does"
    },
    "graphIdentityOpsInsightData": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/IdentitySignificanceTypeMessageIdentitySignificanceType",
          "title": "type of the signficance"
        },
        "category": {
          "$ref": "#/definitions/IdentitySignificanceCategoryMessageIdentitySignificanceCategory",
          "title": "Category of the operations insight"
        }
      }
    },
    "graphIdentityOrgInfo": {
      "type": "object",
      "properties": {
        "hrType": {
          "$ref": "#/definitions/configHrType"
        },
        "hireDate": {
          "type": "string",
          "format": "date-time"
        },
        "terminationDate": {
          "type": "string",
          "format": "date-time"
        },
        "orgName": {
          "type": "string"
        },
        "managerName": {
          "type": "string"
        },
        "managerId": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/andromedautilsLocation"
        },
        "department": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "graphIdentityOriginAccountData": {
      "type": "object",
      "properties": {
        "identityOriginType": {
          "$ref": "#/definitions/IdentityOriginTypeMessageIdentityOriginType",
          "description": "In this scenario, the identity is present in this account via IDC instance or IAM user.\nThe origin could be AWS_IDC or AWS_IAM or AWS_IDC_SCIM."
        },
        "username": {
          "type": "string",
          "description": "If local then false and if cross account then true.\nFollowing fields apply when it is a Local IAM user\nThe AWS IAM user username."
        },
        "arn": {
          "type": "string",
          "description": "The AWS IAM user ARN."
        },
        "isCrossAccount": {
          "type": "boolean",
          "title": "In case this is a local user then whether this user was defined in this account\nor user is from a cross account (cross_account.id != identity_account_data.account_id)"
        },
        "crossAccountInfo": {
          "$ref": "#/definitions/graphCrossAccountInfo",
          "description": "Information about the cross account in case identity is local IAM user but\nnot defined in this account."
        }
      },
      "description": "This information is about the origin of the identity who has access to the account\nlisted in the IdentityAccountData. The origin coule be AWS_IDC or AWS_IAM."
    },
    "graphIdentityOriginAccountDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityOriginAccountDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphIdentityOriginAccountDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphIdentityOriginAccountData"
        }
      }
    },
    "graphIdentityOriginAccountsSummary": {
      "type": "object",
      "properties": {
        "isGlobal": {
          "type": "boolean",
          "description": "whether this identity is present in this account via IDC instance."
        },
        "localCount": {
          "type": "integer",
          "format": "int32",
          "title": "count of local instances of this identity in this account. It is one if single IAM user.\nIt is 2 when it is present in both username=foo and username=foo@acme.com"
        },
        "crossAccountCount": {
          "type": "integer",
          "format": "int32",
          "description": "count of number of cross account incarnations of this identity that has access to this account.\nEg. foo IAM user is present in both account A and B. Then foo IAM user in account B has been given trust\nvia a Role_B2A in account A. So, in account A foo has cross_account_count = 1."
        }
      }
    },
    "graphIdentityOriginData": {
      "type": "object",
      "properties": {
        "identityOriginType": {
          "$ref": "#/definitions/IdentityOriginTypeMessageIdentityOriginType",
          "title": "The type of the origin system like IDP, HRIS, AWS_IDC, AWS_IAM"
        },
        "originId": {
          "type": "string",
          "description": "Id of the source system. Eg. in case of IAM it is the andromeda ID of\nsource Account."
        },
        "originName": {
          "type": "string"
        },
        "isReference": {
          "type": "boolean",
          "description": "This flag is set when the identity is only present as a reference in the system and\nnot actually defined in this origin system. Eg. in case of IAM SSO with OKTA\nthe identity is only present in OKTA and there is no incarnation in\nAWS. However, the identity has access to the AWS resources and it is \"present\"\nin the origin, provider, only via reference."
        },
        "isSourceOfTruth": {
          "type": "boolean",
          "title": "true if the user is source of truth user"
        },
        "hasIncarnation": {
          "type": "boolean",
          "title": "true if user has incarantion"
        },
        "originUserId": {
          "type": "string",
          "description": "Andromeda User UUID of the origin User."
        },
        "originUserName": {
          "type": "string",
          "description": "Name of the origin User."
        },
        "originUserUsername": {
          "type": "string",
          "description": "Username of the origin User."
        },
        "state": {
          "$ref": "#/definitions/ExternalUserStatusMessageExternalUserStatus",
          "description": "State of the origin User in the origin source."
        },
        "opsInsights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityOpsInsightData"
          },
          "description": "TODO(AS-7016)\nAll the significances related to this identity origin."
        },
        "hrisData": {
          "$ref": "#/definitions/graphIdentityHrisData",
          "title": "oneof origin_data {\n IdentityHrisData hris_data = 20;\n IdentityIdpData idp_data = 21;\n IdentityAwsIdcData aws_idc_data = 22;\n IdentityAwsIamData aws_iam_data = 23;\n IdentityAzureData azure_data = 24;\n IdentityProviderIdpSsoData iam_sso_data = 25;\n}\n  option (utils.graphql_options) = {\n union_type: \"identityOriginType\"\n};"
        },
        "idpData": {
          "$ref": "#/definitions/graphIdentityIdpData"
        },
        "awsIdcData": {
          "$ref": "#/definitions/graphIdentityAwsIdcData"
        },
        "awsIamData": {
          "$ref": "#/definitions/graphIdentityAwsIamData"
        },
        "azureData": {
          "$ref": "#/definitions/graphIdentityAzureData"
        },
        "providerIdpSsoData": {
          "$ref": "#/definitions/graphIdentityProviderIdpSsoData",
          "title": "In this case the origin_id == AWS Provider ID"
        },
        "applicationData": {
          "$ref": "#/definitions/graphIdentityApplicationData"
        },
        "identity": {
          "$ref": "#/definitions/nonpublicgraphIdentity",
          "title": "Identity Information"
        },
        "providerId": {
          "type": "string"
        },
        "membershipGroups": {
          "$ref": "#/definitions/graphGroupsConnection",
          "description": "List of groups this user is part of typically in the IDP system.\nThis can only be in context of a provider. So, we need to create a\nnew connection for this."
        },
        "identityId": {
          "type": "string",
          "title": "New Fields based on the new design"
        },
        "originUserExternalId": {
          "type": "string"
        },
        "originUserEmail": {
          "type": "string"
        },
        "isIncarnation": {
          "type": "boolean",
          "title": "TBD"
        },
        "orgInfo": {
          "$ref": "#/definitions/graphIdentityOrgInfo",
          "title": "New Org Info"
        },
        "userMfaData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphMfaData"
          }
        },
        "isPrivilegedUser": {
          "type": "boolean"
        },
        "consoleAccess": {
          "type": "boolean"
        },
        "accessKeysSummary": {
          "$ref": "#/definitions/graphAccessKeysSummary"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/andromedautilsTag"
          }
        },
        "accessKeyData": {
          "$ref": "#/definitions/graphAccessKeyDataConnection"
        }
      }
    },
    "graphIdentityOriginDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityOriginDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphIdentityOriginDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphIdentityOriginData"
        }
      }
    },
    "graphIdentityOverview": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32",
          "title": "BlockPlot risk_block_plot = 2;"
        }
      }
    },
    "graphIdentityPermissionsData": {
      "type": "object",
      "properties": {
        "permissionName": {
          "type": "string",
          "title": "Name of the permission like S3:GetObject"
        },
        "riskLevel": {
          "$ref": "#/definitions/ActionRiskLevelEnumActionRiskLevel",
          "title": "Risk level of the permission in the policy in the account Eg. LOW or HIGH"
        },
        "accessLevel": {
          "$ref": "#/definitions/configAccessLevel",
          "title": "access level of the permission in the policy in the account Eg. READ or WRITE"
        },
        "serviceName": {
          "type": "string",
          "title": "The service name associated with the permission"
        },
        "used": {
          "type": "boolean",
          "title": "To be deprecated"
        },
        "usageLevel": {
          "$ref": "#/definitions/ActionUsageLevelEnumActionUsageLevel"
        }
      }
    },
    "graphIdentityPermissionsDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityPermissionsDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphIdentityPermissionsDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphIdentityPermissionsData"
        }
      }
    },
    "graphIdentityPoliciesDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityPolicyDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphIdentityPolicyData": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        },
        "policyType": {
          "$ref": "#/definitions/configPolicyTypeMessagePolicyType",
          "description": "policy type like whether it is permission set vs iam role."
        },
        "blastRisk": {
          "type": "integer",
          "format": "int64"
        },
        "blastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "isBlastRiskComputed": {
          "type": "boolean"
        },
        "policyLastUsedAt": {
          "type": "string",
          "format": "date-time",
          "title": "policy last used date time"
        },
        "policyLastUsedAtDataSource": {
          "$ref": "#/definitions/PolicyLastUsedAtDataSourceMessagePolicyLastUsedAtDataSource",
          "title": "policy last used at data source"
        },
        "hasAdminPermissions": {
          "type": "boolean",
          "title": "has admin permissions"
        },
        "excessivePrivilegeScore": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskFrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskInfrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskUnusedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskFrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskInfrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskUnusedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "unusedPermissionsPercentage": {
          "type": "integer",
          "format": "int64"
        },
        "untrackedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "riskAccessLevels": {
          "$ref": "#/definitions/graphRiskAccessLevels",
          "title": "To be deprecated, use field #52 permissions_access_level_summary"
        },
        "incomingTrusts": {
          "$ref": "#/definitions/graphIncomingTrustsConnection",
          "description": "Incoming Trust relations which this policy has trusted to allow role assumptions.\nEg. If admin wants to allow a user who has access to a role R1 to be able to assume role\nR2 then they need make R2 trust any user who has role R1 by adding R1 in the trust policy of R2.\nLogically, it means R1 -\u003e (assume Role) -\u003e R2.\nConfiguration wise it is R2 (Trusted) -\u003e R1 in the trust policy of R2.\nA Permission Set can only have direct binding or via a group as trust within the same account. However,\nIAM roles allow trusts to cross account identities (no groups) or roles."
        },
        "outgoingTrusts": {
          "$ref": "#/definitions/graphOutgoingTrustsConnection"
        },
        "accountId": {
          "type": "string"
        },
        "identityId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/nonpublicgraphScope",
          "title": "scope of the policy in which it is bound, e.g. Account, Resource Group"
        },
        "policyJsonDocuments": {
          "$ref": "#/definitions/graphPoliciesJsonDocumentConnection",
          "title": "To be deprecated, use field #51 policy_details"
        },
        "accountProviderId": {
          "type": "string"
        },
        "accessRequestSummary": {
          "$ref": "#/definitions/graphIdentityAccessRequestSummaryData"
        },
        "opsInsights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphPolicyOpsInsightData"
          }
        },
        "policyDetails": {
          "$ref": "#/definitions/graphAccountPolicyDetailsConnection"
        },
        "permissionsData": {
          "$ref": "#/definitions/graphIdentityPermissionsDataConnection",
          "description": "List of permissions in this policy. For example an AWS PermissionSet can have multiple\nAWS Policies and each policy can have multiple permissions. This is the list of all the permissions\nacross all the AWS policies in this account."
        },
        "roleTrustDocument": {
          "type": "string",
          "title": "currently applies to aws only"
        },
        "permissionsSummary": {
          "$ref": "#/definitions/nonpublicgraphPermissionsSummary"
        },
        "policyRecommendation": {
          "$ref": "#/definitions/graphUnifiedIdentityAccountPolicyRecommendation"
        }
      }
    },
    "graphIdentityPolicyDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphIdentityPolicyData"
        }
      }
    },
    "graphIdentityPolicyEligibilityConstraints": {
      "type": "object",
      "properties": {
        "scopeType": {
          "$ref": "#/definitions/ScopeTypeEnumScopeType"
        }
      }
    },
    "graphIdentityPolicyEligibilityData": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        },
        "policyType": {
          "$ref": "#/definitions/configPolicyTypeMessagePolicyType"
        },
        "accountId": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "identityId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "eligibilityIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "EligibilityIds are returned to ease the subsequent queries for nested resolvers."
        },
        "policyAccessRequestProfile": {
          "$ref": "#/definitions/graphPolicyAccessRequestProfile",
          "description": "policyAccessRequestProfile holds the effective access request profile details for this policy.\nIt is highly advised to request for this field only for a single policy at a time,\nbecause gathering effective profiles for multiple policies at a time could be expensive."
        },
        "bindingType": {
          "$ref": "#/definitions/PolicyBindingTypeMessagePolicyBindingType"
        },
        "activeAccessRequests": {
          "$ref": "#/definitions/graphIdentityActiveAccessRequestDataConnection"
        },
        "blastRisk": {
          "type": "integer",
          "format": "int64"
        },
        "eligibilityConstraints": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityPolicyEligibilityConstraints"
          }
        },
        "eligibleResourceGroups": {
          "$ref": "#/definitions/graphEligibleResourceGroupsConnection"
        },
        "eligibleUsers": {
          "$ref": "#/definitions/graphEligibleUserIncarnationsConnection"
        }
      }
    },
    "graphIdentityPolicyEligibilityDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityPolicyEligibilityDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphIdentityPolicyEligibilityDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphIdentityPolicyEligibilityData"
        }
      }
    },
    "graphIdentityProviderAssignmentData": {
      "type": "object",
      "properties": {
        "assignmentType": {
          "$ref": "#/definitions/ProviderAssignmentTypeMessageProviderAssignmentType",
          "description": "What was the type of binding",
          "title": "This is the data that is specific to the provider and is used to"
        },
        "accessRequestId": {
          "type": "string",
          "title": "If the binding type is JIT or standing via andromeda then the id of the JIT request"
        },
        "isAndromedaManaged": {
          "type": "boolean",
          "title": "Whether Andromeda owns and manages this binding"
        },
        "status": {
          "$ref": "#/definitions/TrustStatusMessageTrustStatus",
          "description": "May be convert to significance."
        },
        "isDirectBinding": {
          "type": "boolean",
          "description": "In case of indirect binding, the principal through with the\n the assignment happened.",
          "title": "Details of the binding whether it is direct or indirect"
        },
        "principal": {
          "$ref": "#/definitions/graphIdentityProviderResolvedAssignmentPrincipalUnion",
          "title": "Scope where the binding was configured\n Scope binding_scope = 10;"
        }
      },
      "description": "TODO(P0) AS-3963\nAnswer the details of the the assignment of the identity to the provider."
    },
    "graphIdentityProviderData": {
      "type": "object",
      "properties": {
        "providerId": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "providerCategory": {
          "$ref": "#/definitions/utilsProviderCategoryType"
        },
        "providerTierId": {
          "type": "string",
          "title": "TODO AS-3963\nconvert to the actual provider tier object"
        },
        "providerTierName": {
          "type": "string"
        },
        "isOwner": {
          "type": "boolean"
        },
        "accountsCount": {
          "type": "integer",
          "format": "int64"
        },
        "applicationAuthType": {
          "$ref": "#/definitions/ApplicationAuthTypeMessageApplicationAuthType"
        },
        "logo": {
          "$ref": "#/definitions/graphLogoData"
        },
        "activities": {
          "$ref": "#/definitions/graphActivitiesConnection"
        },
        "knownLocations": {
          "$ref": "#/definitions/graphKnownLocationsConnection"
        },
        "knownDevices": {
          "$ref": "#/definitions/graphKnownDevicesConnection"
        },
        "blastRisk": {
          "type": "integer",
          "format": "int64"
        },
        "isBlastRiskComputed": {
          "type": "boolean"
        },
        "isSuperAdmin": {
          "type": "boolean"
        },
        "identityId": {
          "type": "string"
        },
        "serviceIdentitiesCount": {
          "type": "integer",
          "format": "int64"
        },
        "accessRequestsCount": {
          "type": "integer",
          "format": "int64"
        },
        "accountsSummary": {
          "$ref": "#/definitions/graphIdentityAccountsSummary"
        },
        "accountsData": {
          "$ref": "#/definitions/graphIdentityAccountsDataConnection"
        },
        "accessRequestData": {
          "$ref": "#/definitions/graphIdentityAccessRequestDataConnection"
        },
        "reviewRequestData": {
          "$ref": "#/definitions/graphIdentityReviewRequestDataConnection",
          "title": "TODO (AS-7384) deprecate this field once UI app / tests have\nbeen moved to use Identities -\u003e ReviewRequestData"
        },
        "authType": {
          "$ref": "#/definitions/configProviderAuthType"
        },
        "policyData": {
          "$ref": "#/definitions/graphUnifiedIdentityPolicyDataConnection",
          "title": "unified policy data for the provider"
        },
        "originAccounts": {
          "$ref": "#/definitions/graphIdentityOriginDataConnection"
        },
        "significanceData": {
          "$ref": "#/definitions/graphIdentitySignificanceData"
        },
        "providerState": {
          "$ref": "#/definitions/configIdentityStatus",
          "description": "Provider status of the identity (ENABLED, DEACTIVATED, STALE)\nIt is possible that the identity is deactivated in the IDC as it is removed\nfrom the group that is synced with the IDC. However, there could still be\nan IAM user incarnation of the identity that is enabled. In such cases, the\nstatus of the identity in the IDC will be DEACTIVATED and the status of the\nidentity in the provider will be stale."
        },
        "opsInsights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityOpsInsightData"
          }
        },
        "riskFactors": {
          "$ref": "#/definitions/graphRiskFactors"
        },
        "riskFactorsData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphRiskFactorData"
          }
        },
        "activityCount": {
          "type": "integer",
          "format": "int64"
        },
        "lastActivityAt": {
          "type": "string",
          "format": "date-time"
        },
        "accessKeySignificanceData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphAccessKeySignificanceData"
          }
        },
        "applicationResolvedAssignments": {
          "$ref": "#/definitions/graphIdentityResolvedAssignmentsConnection"
        },
        "idpApplicationData": {
          "$ref": "#/definitions/protobufAny"
        },
        "eligiblePolicies": {
          "$ref": "#/definitions/graphIdentityPolicyEligibilityDataConnection"
        },
        "providerMembersMetadata": {
          "$ref": "#/definitions/graphIdentityProviderMembersMetadata"
        },
        "lastActivity": {
          "$ref": "#/definitions/graphActivity"
        },
        "userResolvedAssignments": {
          "$ref": "#/definitions/protobufAny"
        },
        "originsCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "graphIdentityProviderDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphIdentityProviderData"
        }
      }
    },
    "graphIdentityProviderEligibilityAccountData": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "accountMode": {
          "$ref": "#/definitions/configAccountMode"
        }
      }
    },
    "graphIdentityProviderEligibilityData": {
      "type": "object",
      "properties": {
        "providerId": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "accessRequestProfile": {
          "$ref": "#/definitions/graphPolicyAccessRequestProfile",
          "description": "This is the effective access request profile used for this eligibility."
        },
        "activeAccessRequests": {
          "$ref": "#/definitions/graphIdentityActiveAccessRequestDataConnection",
          "description": "In future access request could be for a resource as well like\nS3 bucket or a DynamoDB table. Based on that we can create a new\naccess request data connection or keep one for each use case.\nAlso, related questions are around what is the type of the\naccess request. Like is it for the policy, provider or something\nelse."
        },
        "policyData": {
          "$ref": "#/definitions/graphIdentityProviderEligibilityPolicyData",
          "description": "When SCIM push groups are enabled, then eligible providers will\nhave the SCIM push group role as well."
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "providerCategory": {
          "$ref": "#/definitions/utilsProviderCategoryType"
        },
        "eligibilityIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "EligibilityIds are returned to ease the subsequent queries for nested resolvers."
        },
        "eligibleUser": {
          "$ref": "#/definitions/graphIdentityOriginData"
        },
        "accountData": {
          "$ref": "#/definitions/graphIdentityProviderEligibilityAccountData"
        },
        "eligibilityConstraints": {
          "$ref": "#/definitions/graphIdentityPolicyEligibilityConstraints"
        },
        "eligibleResourceGroups": {
          "$ref": "#/definitions/graphEligibleResourceGroupsConnection"
        },
        "eligibleAccessType": {
          "$ref": "#/definitions/IdentityEligibilityAccessTypeMessageIdentityEligibilityAccessType",
          "title": "Each row of eligibilty would be of a single type"
        },
        "eligibilityData": {
          "$ref": "#/definitions/graphIdentityEligibilityData",
          "description": "Resource role set eligibility data\nWhen the eligibility type is RESOURCE_SET_ASSIGNMENT then this field will be populated."
        }
      }
    },
    "graphIdentityProviderEligibilityDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityProviderEligibilityDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      },
      "description": "Eligibility Details on a per-provider basis\nThis API return the incarnation, role level details\nand eventually add the scope detatils as well."
    },
    "graphIdentityProviderEligibilityDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphIdentityProviderEligibilityData"
        }
      }
    },
    "graphIdentityProviderEligibilityPolicyData": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        },
        "policyType": {
          "$ref": "#/definitions/configPolicyTypeMessagePolicyType"
        },
        "blastRisk": {
          "type": "integer",
          "format": "int64"
        },
        "blastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "externalId": {
          "type": "string"
        }
      }
    },
    "graphIdentityProviderIdpSsoData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "title": "username of the identity in the origin system"
        },
        "idpApplications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublicgraphIdpApplication"
          },
          "title": "Name of the okta APP through which the access was provided to the origin system"
        },
        "idpProviderId": {
          "type": "string",
          "title": "ID of the IDP provider\nTBD: may be it should be the integration ID instead?"
        },
        "idpProviderName": {
          "type": "string",
          "title": "Name of the IDP provider"
        },
        "state": {
          "$ref": "#/definitions/ExternalUserStatusMessageExternalUserStatus",
          "title": "State of the identity in the AWS Provider"
        }
      }
    },
    "graphIdentityProviderMembersMetadata": {
      "type": "object",
      "properties": {
        "successfulLoginsByUsersCount": {
          "type": "integer",
          "format": "int32",
          "title": "Number of successful logins in the provider by users incarnations"
        },
        "successfulLoginsCount": {
          "type": "integer",
          "format": "int32",
          "title": "Number of successful logins in the provider by identity"
        },
        "failedLoginsByUsersCount": {
          "type": "integer",
          "format": "int32",
          "title": "Number of failed logins in the provider by users incarnations"
        },
        "failedLoginsCount": {
          "type": "integer",
          "format": "int32",
          "title": "Number of failed logins in the provider by identity"
        },
        "loginsCount": {
          "type": "integer",
          "format": "int32",
          "title": "Number of total logins by identity in the provider"
        },
        "loginsByUsersCount": {
          "type": "integer",
          "format": "int32",
          "title": "Number of total logins by users incarnations in the provider"
        }
      }
    },
    "graphIdentityProviderResolvedAssignmentPrincipalUnion": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/graphIdentityOriginData",
          "title": "When principal is a human incarnation"
        },
        "group": {
          "$ref": "#/definitions/nonpublicgraphGroup",
          "title": "when principal is a group"
        }
      }
    },
    "graphIdentityProvidersDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityProviderDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphIdentityProvidersSummary": {
      "type": "object",
      "properties": {
        "groupedProvidersByBlastRiskLevel": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityGroupedByRiskLevel"
          }
        },
        "identityId": {
          "type": "string"
        },
        "providersOwned": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphProviderOwnershipSummary"
          }
        },
        "applicationsByLogins": {
          "$ref": "#/definitions/graphDistribution",
          "title": "TODO(P0) AS-3963\nSummary of applications by this identity's logins\nSpecial consideration for the 0 as those would be the applications that are not used at all\nscale factor 10\nhistogram buckets - 0, 1-9, 10-99, 100-999, 1000-9999, 10000-99999, 100000+\nUse exponential buckets for this use case.\nOnly do this for the applications and not for the cloud providers"
        }
      }
    },
    "graphIdentityResolvedAssignmentsConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityResolvedAssignmentsEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphIdentityResolvedAssignmentsData": {
      "type": "object",
      "properties": {
        "providerId": {
          "type": "string",
          "description": "Ideally this could be part of the scope itself where scope would be\nprovider instead."
        },
        "identityId": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/graphIdentityPolicyData",
          "description": "Provider Level Policy Data. This is applicable onl for the SCIM Push Group Role\n for now.\n For now not getting the full policy data like in case of the cloud environments\n Policy policy_data = 22 [\n     (utils.graphql_field_options) = {\n        resolver: true,\n     }\n ];",
          "title": "logical Identity or NHI only\nRequired when the provider is enabled with SCIM push groups\nstring policy_id = 20;\nstring policy_name = 21;"
        },
        "assignmentUser": {
          "$ref": "#/definitions/graphIdentityOriginData",
          "title": "This is the incarnation for which the binding is present.\nIt also allow us to do filtering if needed to show\nthe assignments for a specific incarnation.\nWho has the assginment?"
        },
        "assignmentData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityProviderAssignmentData"
          },
          "description": "How the principal (identity or NHI) got access to the provider binding.\nIn case, there were access via multiple groups then two bindings will be created\none for each group."
        }
      },
      "description": "TODO(P0) AS-3963\nDon't implement at provider level right away. Focus on the identity and nhi level first.enum\nDecide on this after the okta IDP is designed.\n\nThis information is in context of an account so the related information about\n policy is captured here. It only carries the Policy level information\n and does not have any per-identity specific data\n incoming trusts here are for all the identities in the account for that policy."
    },
    "graphIdentityResolvedAssignmentsEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphIdentityResolvedAssignmentsData"
        }
      }
    },
    "graphIdentityResourceEligibilityConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityResourceEligibilityEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphIdentityResourceEligibilityData": {
      "type": "object",
      "properties": {
        "eligibilityIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "eligibleResources": {
          "$ref": "#/definitions/graphIdentityResourceEligibilityConnection"
        }
      }
    },
    "graphIdentityResourceEligibilityEdge": {
      "type": "object",
      "properties": {
        "serviceType": {
          "$ref": "#/definitions/ServiceTypeMessageServiceType"
        },
        "allResources": {
          "type": "boolean"
        },
        "eligibleResource": {
          "$ref": "#/definitions/protobufAny"
        },
        "eligibleRole": {
          "$ref": "#/definitions/protobufAny"
        },
        "eligibilityIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "eligibilties for this combination of resource and role"
        },
        "eligibleResourceId": {
          "type": "string"
        },
        "eligibleRoleId": {
          "type": "string"
        }
      }
    },
    "graphIdentityReviewRequestData": {
      "type": "object",
      "properties": {
        "reviewId": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/JitPolicyReviewStatusMessageReviewerReviewStatus"
        },
        "reason": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "request": {
          "$ref": "#/definitions/graphIdentityAccessRequestData"
        }
      }
    },
    "graphIdentityReviewRequestDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityReviewRequestDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphIdentityReviewRequestDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphIdentityReviewRequestData"
        }
      }
    },
    "graphIdentitySignificanceData": {
      "type": "object",
      "properties": {
        "isSuperAdmin": {
          "type": "boolean",
          "title": "Significane type SUPER_ADMIN"
        },
        "isAccountOwner": {
          "type": "boolean",
          "title": "Significane type ACCOUNT_OWNER"
        },
        "isAccountAdmin": {
          "type": "boolean",
          "title": "SIGNIFICANCE_TYPE ACCOUNT_ADMIN"
        },
        "isRiskAccepted": {
          "type": "boolean",
          "title": "Identities whos risk has been accepted in the account. The standing policies\nthat have high blast risk are not included in account's risk calculation.\nRISK_ACCEPTED"
        },
        "isInactive": {
          "type": "boolean"
        },
        "isNonCompliant": {
          "type": "boolean",
          "title": "Identity state is non-compliant across the IDP (deactivated) and Provider (active).\nNON_COMPLIANT = 10;"
        },
        "isDataInconsistent": {
          "type": "boolean",
          "title": "Identity data is inconsistent across different sources.\nIDENTITY_DATA_INCONSISTENCY"
        },
        "hasCrossAccountWithCriticalityEscalation": {
          "type": "boolean",
          "title": "Cross account access with criticality escalation\nCROSS_ACCOUNT_WITH_CRITICALITY_ESCALATION"
        },
        "isDeactivatedUserWithPolicyBindings": {
          "type": "boolean",
          "title": "Deactivated User with policy bindings"
        },
        "isLocalIdentity": {
          "type": "boolean",
          "title": "Local IAM users when provider is setup with the AWS IDC\nLOCAL_IDENTITY"
        },
        "isInactive3090Days": {
          "type": "boolean"
        },
        "isInactive90180Days": {
          "type": "boolean"
        },
        "isInactive180365Days": {
          "type": "boolean"
        },
        "isInactive365DaysPlus": {
          "type": "boolean"
        }
      },
      "title": "TODO(AS-503)"
    },
    "graphIncomingTrustEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphTrustEdges"
        }
      }
    },
    "graphIncomingTrustsConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIncomingTrustEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphKeyOpsInsightData": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/KeySignificanceTypeMessageKeySignificanceType",
          "title": "type of the signficance"
        },
        "category": {
          "$ref": "#/definitions/KeySignificanceCategoryMessageKeySignificanceCategory",
          "title": "Category of the operations insight"
        }
      }
    },
    "graphKeyRiskData": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/KeyRiskFactorTypeMessageKeyRiskFactorType",
          "title": "type of the signficance"
        },
        "category": {
          "$ref": "#/definitions/KeyRiskCategoryMessageKeyRiskCategory",
          "title": "Category of the operations insight"
        }
      }
    },
    "graphKnownDevice": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "device": {
          "$ref": "#/definitions/graphDevice"
        }
      }
    },
    "graphKnownDeviceEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphKnownDevice"
        }
      }
    },
    "graphKnownDevicesConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphKnownDeviceEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphKnownLocation": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "location": {
          "$ref": "#/definitions/andromedautilsLocation"
        }
      }
    },
    "graphKnownLocationEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphKnownLocation"
        }
      }
    },
    "graphKnownLocationsConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphKnownLocationEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphLinear": {
      "type": "object",
      "properties": {
        "numFiniteBuckets": {
          "type": "integer",
          "format": "int32",
          "description": "Must be greater than 0."
        },
        "width": {
          "type": "number",
          "format": "double",
          "description": "Must be greater than 0."
        },
        "offset": {
          "type": "number",
          "format": "double",
          "description": "Lower bound of the first bucket."
        }
      },
      "description": "Specifies a linear sequence of buckets that all have the same width\n(except overflow and underflow). Each bucket represents a constant\nabsolute uncertainty on the specific value in the bucket.\n\nThere are `num_finite_buckets + 2` (= N) buckets. Bucket `i` has the\nfollowing boundaries:\n\n   Upper bound (0 \u003c= i \u003c N-1):     offset + (width * i).\n\n   Lower bound (1 \u003c= i \u003c N):       offset + (width * (i - 1))."
    },
    "graphListAccountsSortedByRiskResponse": {
      "type": "object",
      "properties": {
        "accountRiskScore": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphAccountRiskScore"
          }
        }
      }
    },
    "graphListAllAccountsForProviderResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelsconfigAccount"
          }
        }
      }
    },
    "graphListHRIdentitiesResponse": {
      "type": "object",
      "properties": {
        "hrIdentities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphHrIdentityInfo"
          }
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "nextPageCursor": {
          "type": "string"
        }
      }
    },
    "graphListServiceIdentitiesResponse": {
      "type": "object",
      "properties": {
        "serviceIdentities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceIdentity"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphListServiceIdentityAccountData": {
      "type": "object",
      "properties": {
        "identityAccountData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceIdentityAccountData"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphListServiceIdentityPolicyData": {
      "type": "object",
      "properties": {
        "serviceIdentityPolicyData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceIdentityPolicyData"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphListServiceIdentityProviderData": {
      "type": "object",
      "properties": {
        "identityProviderData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceIdentityProviderData"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphLogoData": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "title": "Logo URL"
        },
        "httpContentType": {
          "type": "string",
          "title": "image/png, image/jpeg"
        }
      },
      "title": "TODO(P0) AS-3963"
    },
    "graphMfaData": {
      "type": "object",
      "properties": {
        "mfaFactorId": {
          "type": "string"
        },
        "factorType": {
          "$ref": "#/definitions/MfaFactorTypeMessageMfaFactorType"
        },
        "mfaCreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "mfaStrength": {
          "$ref": "#/definitions/MfaStrengthMessageMfaStrength"
        }
      }
    },
    "graphOrganizationInfo": {
      "type": "object",
      "properties": {
        "employeeId": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "managerId": {
          "type": "string"
        },
        "managerName": {
          "type": "string"
        },
        "positionTitle": {
          "type": "string"
        },
        "department": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "hrType": {
          "$ref": "#/definitions/configHrType",
          "title": "google.protobuf.Timestamp hire_date = 10; // Requires SPO license in Azure\ngoogle.protobuf.Timestamp termination_date = 11; // Requires SPO license in Azure\nstring category = 12;"
        }
      }
    },
    "graphOriginData": {
      "type": "object",
      "properties": {
        "providerId": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "folderId": {
          "type": "string"
        },
        "folderName": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "resourceGroupId": {
          "type": "string"
        },
        "resourceGroupName": {
          "type": "string"
        },
        "defaultOriginId": {
          "type": "string"
        },
        "defaultOriginName": {
          "type": "string"
        }
      }
    },
    "graphOutgoingTrust": {
      "type": "object",
      "properties": {
        "principalAccountId": {
          "type": "string"
        },
        "principalAccountName": {
          "type": "string"
        },
        "principalAccountMode": {
          "$ref": "#/definitions/configAccountMode"
        },
        "principalId": {
          "type": "string"
        },
        "principalName": {
          "type": "string"
        }
      }
    },
    "graphOutgoingTrustEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphOutgoingTrust"
        }
      }
    },
    "graphOutgoingTrustsConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphOutgoingTrustEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphPermissionsAccessLevelSummary": {
      "type": "object",
      "properties": {
        "accessLevel": {
          "$ref": "#/definitions/configAccessLevel"
        },
        "totalPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "usedPermissionsCount": {
          "type": "integer",
          "format": "int64",
          "description": "The following metrics can be used to understand the usage of the permissions in the policy by the access levels.\nIn observation mode, admins can prune down the permissions policy to only include the\npermissions that are used."
        },
        "unusedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "untrackedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "graphPermissionsData": {
      "type": "object",
      "properties": {
        "permissionName": {
          "type": "string",
          "title": "Name of the permission like S3:GetObject"
        },
        "riskLevel": {
          "$ref": "#/definitions/ActionRiskLevelEnumActionRiskLevel",
          "title": "Risk level of the permission in the policy in the account Eg. LOW or HIGH"
        },
        "accessLevel": {
          "$ref": "#/definitions/configAccessLevel",
          "title": "access level of the permission in the policy in the account Eg. READ or WRITE"
        },
        "serviceName": {
          "type": "string",
          "title": "The service name associated with the permission"
        },
        "used": {
          "type": "boolean",
          "title": "To be deprecated"
        },
        "usageLevel": {
          "$ref": "#/definitions/ActionUsageLevelEnumActionUsageLevel",
          "title": "usage level of the permission in the policy in the account Eg. Used, Unused or Ambiguous"
        }
      }
    },
    "graphPermissionsDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphPermissionsDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphPermissionsDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphPermissionsData"
        }
      }
    },
    "graphPoliciesGroupedByBlastRiskLevel": {
      "type": "object",
      "properties": {
        "blastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "graphPoliciesJsonDocumentConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphPolicyJsonDocumentEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      },
      "title": "Policy JSON documents"
    },
    "graphPoliciesSummary": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "identityId": {
          "type": "string"
        },
        "standingPoliciesInfo": {
          "$ref": "#/definitions/graphStandingPoliciesInfo"
        },
        "groupedByBlastRiskLevel": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphPoliciesGroupedByBlastRiskLevel"
          }
        }
      }
    },
    "graphPolicyAccessRequestProfile": {
      "type": "object",
      "properties": {
        "requestValidationConfig": {
          "$ref": "#/definitions/configAccessRequestValidationConfig"
        },
        "extensionConfig": {
          "$ref": "#/definitions/configAccessRequestExtensionConfig"
        },
        "policyRequestReviewers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "itsmSettings": {
          "$ref": "#/definitions/configAccessRequestItsmSettings"
        },
        "policyRequestLeveledReviewers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphPolicyRequestReviewer"
          }
        }
      }
    },
    "graphPolicyJsonData": {
      "type": "object",
      "properties": {
        "externalId": {
          "type": "string"
        },
        "documentJson": {
          "type": "string",
          "description": "we have issues with maps currently. The UI needs to pretty-print this."
        },
        "externalPolicyType": {
          "$ref": "#/definitions/ProviderPolicyTypeMessageProviderPolicyType"
        },
        "externalPolicyName": {
          "type": "string"
        }
      }
    },
    "graphPolicyJsonDocumentEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphPolicyJsonData"
        }
      }
    },
    "graphPolicyOpsInsightData": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/PolicySignificanceTypeMessagePolicySignificanceType",
          "title": "type of the signficance"
        },
        "category": {
          "$ref": "#/definitions/PolicySignificanceCategoryMessagePolicySignificanceCategory",
          "title": "Category of the operations insight"
        }
      }
    },
    "graphPolicyRequestReviewer": {
      "type": "object",
      "properties": {
        "reviewers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "minimumRequiredApprovals": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "graphPrincipalData": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/configPrincipalTypeMessagePrincipalType"
        },
        "id": {
          "type": "string",
          "title": "ID of the principal"
        },
        "name": {
          "type": "string",
          "title": "name of the principal"
        },
        "providerId": {
          "type": "string",
          "title": "provider ID in which principal exists, if applicable"
        },
        "integrationId": {
          "type": "string",
          "title": "outdated"
        },
        "accountId": {
          "type": "string",
          "title": "Account ID where this principal is defined"
        },
        "accountName": {
          "type": "string",
          "title": "Account name where this principal is defined"
        },
        "principalOriginType": {
          "$ref": "#/definitions/PrincipalOriginTypeMessagePrincipalOriginType",
          "title": "In case of the identity it is typically the username or email.\nEg. if an IAM user is the principal and also IDC is enabled\nthen the principal will have two sources. One from IAM and another from IDC.\nIn that case the source_id will be the username of the IAM user and the source_type will be IAM.\nonly allowed values are AWS_IAM and AWS_IDC"
        },
        "idInOrigin": {
          "type": "string",
          "title": "The principal's ID in the source system.\nEg. ARN in case of AWS IAM and userid in the AWS IDC"
        },
        "scope": {
          "$ref": "#/definitions/nonpublicgraphScope",
          "title": "Scope where the principal is defined"
        },
        "identityId": {
          "type": "string",
          "title": "The identity ID in Andromeda if the principal is a local user\nFor example in case of logical active binding"
        }
      }
    },
    "graphProviderDetailsData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/modelsconfigProviderType"
        }
      }
    },
    "graphProviderOwnershipSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/modelsconfigProviderType"
        }
      }
    },
    "graphResourceGroupScopeData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "isInherited": {
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/ScopeTypeEnumScopeType"
        },
        "parentScope": {
          "$ref": "#/definitions/nonpublicgraphScope"
        }
      }
    },
    "graphResourceScopeData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "isInherited": {
          "type": "boolean"
        },
        "resourceType": {
          "$ref": "#/definitions/ResourceTypeMessageResourceType"
        },
        "type": {
          "$ref": "#/definitions/ScopeTypeEnumScopeType"
        }
      }
    },
    "graphRiskAccessLevels": {
      "type": "object",
      "properties": {
        "accessLevelUnspecifiedCount": {
          "type": "integer",
          "format": "int32",
          "title": "Access levels"
        },
        "accessLevelListCount": {
          "type": "integer",
          "format": "int32"
        },
        "accessLevelWriteTagCount": {
          "type": "integer",
          "format": "int32"
        },
        "accessLevelDeleteTagCount": {
          "type": "integer",
          "format": "int32"
        },
        "accessLevelReadMetadataCount": {
          "type": "integer",
          "format": "int32"
        },
        "accessLevelReadDataCount": {
          "type": "integer",
          "format": "int32"
        },
        "accessLevelWriteMetadataCount": {
          "type": "integer",
          "format": "int32"
        },
        "accessLevelCreateCount": {
          "type": "integer",
          "format": "int32"
        },
        "accessLevelWriteDataCount": {
          "type": "integer",
          "format": "int32"
        },
        "accessLevelDeleteDataCount": {
          "type": "integer",
          "format": "int32"
        },
        "accessLevelDeleteCount": {
          "type": "integer",
          "format": "int32"
        },
        "accessLevelPermissionsManagementCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "graphRiskFactorData": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/configRiskFactor"
        },
        "category": {
          "$ref": "#/definitions/configRiskCategory"
        }
      }
    },
    "graphRiskFactors": {
      "type": "object",
      "properties": {
        "noMfa": {
          "type": "boolean"
        },
        "weakMfa": {
          "type": "boolean"
        },
        "stale": {
          "type": "boolean"
        },
        "unusualTravel": {
          "type": "boolean"
        },
        "anomalousCloudActivity": {
          "type": "boolean"
        },
        "anomalousAppActivity": {
          "type": "boolean"
        },
        "anomalousLoginActivity": {
          "type": "boolean"
        },
        "highBlastRisk": {
          "type": "boolean"
        },
        "passwordHygiene": {
          "type": "boolean",
          "title": "RISK_FACTOR_PASSWORD_HYGIENE"
        },
        "keyHygiene": {
          "type": "boolean",
          "title": "RISK_FACTOR_KEY_HYGIENE"
        },
        "accessKeyRotationPastDueDate": {
          "type": "boolean",
          "title": "Deprecated"
        }
      }
    },
    "graphServiceIdentitiesGroupedByRiskCategoryResponse": {
      "type": "object",
      "properties": {
        "identitiesGroupedByRiskCategory": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityGroupedByRiskCategory"
          }
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "graphServiceIdentitiesGroupedByType": {
      "type": "object",
      "properties": {
        "serviceIdentityType": {
          "$ref": "#/definitions/ServiceIdentityTypeMessageServiceIdentityType"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "graphServiceIdentitiesGroupedByTypeResponse": {
      "type": "object",
      "properties": {
        "serviceIdentitiesGroupedByType": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceIdentitiesGroupedByType"
          }
        }
      }
    },
    "graphServiceIdentity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "username": {
          "type": "string",
          "title": "service identity name"
        },
        "state": {
          "$ref": "#/definitions/ServiceIdentityStatusMessageServiceIdentityStatus"
        },
        "serviceIdentityType": {
          "$ref": "#/definitions/ServiceIdentityTypeMessageServiceIdentityType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "owners": {
          "$ref": "#/definitions/graphIdentitiesConnection"
        },
        "awsExternalServiceIdentitySubType": {
          "$ref": "#/definitions/AwsExternalServiceIdentitySubTypeMessageAwsExternalServiceIdentitySubType"
        },
        "activities": {
          "$ref": "#/definitions/graphActivitiesConnection"
        },
        "knownLocations": {
          "$ref": "#/definitions/graphKnownLocationsConnection"
        },
        "knownDevices": {
          "$ref": "#/definitions/graphKnownDevicesConnection"
        },
        "blastRisk": {
          "type": "integer",
          "format": "int64",
          "description": "blastRisk is the privilege component of the risk."
        },
        "blastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "isBlastRiskComputed": {
          "type": "boolean"
        },
        "risk": {
          "type": "integer",
          "format": "int64",
          "title": "risk is an aggregate of static, behaviour and privilege risks.\nCurrently risk = blastRisk"
        },
        "riskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "riskFactorsData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceIdentityRiskFactorData"
          }
        },
        "riskFactors": {
          "$ref": "#/definitions/graphServiceIdentityRiskFactors"
        },
        "trustedService": {
          "type": "string",
          "title": "repeated RiskSeries risk_time_series = 17;\nrepeated Finding findings = 18;"
        },
        "eksClusterName": {
          "type": "string",
          "title": "To Do: Move eks_cluster_name, trusted_service and aws_external_service_identity_sub_type to an union field"
        },
        "providersData": {
          "$ref": "#/definitions/graphServiceIdentityProvidersDataConnection"
        },
        "originAccountId": {
          "type": "string",
          "description": "In AWS this is a single account id in a slice."
        },
        "originAccountName": {
          "type": "string"
        },
        "originData": {
          "$ref": "#/definitions/graphOriginData"
        },
        "significanceData": {
          "$ref": "#/definitions/graphServiceIdentitySignificanceData",
          "description": "Information about different significance attributes of the non-human identity at the global level.\nThe information at the provider and global level will be same given non-human identity is\npresent only in a single provider."
        },
        "accessKeysSummary": {
          "$ref": "#/definitions/graphAccessKeysSummary"
        },
        "accessData": {
          "$ref": "#/definitions/graphAccessData"
        },
        "roleTrustConditionType": {
          "$ref": "#/definitions/RoleTrustConditionTypeMessageRoleTrustConditionType",
          "title": "condition type for the service identity\ncondition type refers to the type of condition in the role trust document from where the service identity is created"
        },
        "opsInsights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceIdentityOpsInsightData"
          }
        },
        "activityCount": {
          "type": "integer",
          "format": "int64",
          "description": "To avoid the N+1 GQL problem, putting the number of activities on the identity node\ntop level itself."
        },
        "lastActivityAt": {
          "type": "string",
          "format": "date-time"
        },
        "metadata": {
          "$ref": "#/definitions/graphServiceIdentityMetadata"
        },
        "clients": {
          "$ref": "#/definitions/graphServiceInstancesConnection"
        },
        "lastActivity": {
          "$ref": "#/definitions/graphActivity"
        }
      }
    },
    "graphServiceIdentityAccountData": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "blastRisk": {
          "type": "integer",
          "format": "int64"
        },
        "blastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "isBlastRiskComputed": {
          "type": "boolean"
        },
        "activities": {
          "$ref": "#/definitions/graphActivitiesConnection"
        },
        "knownLocations": {
          "$ref": "#/definitions/graphKnownLocationsConnection"
        },
        "knownDevices": {
          "$ref": "#/definitions/graphKnownDevicesConnection"
        },
        "highRiskFrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskInfrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskUnusedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskFrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskInfrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskUnusedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "untrackedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "unusedPermissionsPercentage": {
          "type": "integer",
          "format": "int64"
        },
        "totalPermissions": {
          "type": "integer",
          "format": "int64"
        },
        "excessivePrivilegeScore": {
          "type": "integer",
          "format": "int64"
        },
        "isRiskAccepted": {
          "type": "boolean"
        },
        "servicesUsed": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "policiesData": {
          "$ref": "#/definitions/graphServiceIdentityPoliciesDataConnection"
        },
        "identityId": {
          "type": "string"
        },
        "riskFactors": {
          "$ref": "#/definitions/graphServiceIdentityRiskFactors"
        },
        "accessData": {
          "$ref": "#/definitions/graphAccessData"
        },
        "significanceData": {
          "$ref": "#/definitions/graphServiceIdentitySignificanceData"
        },
        "opsInsights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceIdentityOpsInsightData"
          }
        },
        "computedBlastRisk": {
          "type": "integer",
          "format": "int64",
          "title": "The following blast_risk related fields store the originally computed\nblast_risk values for an identity whose risk has been accepted"
        },
        "computedBlastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "riskFactorsData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceIdentityRiskFactorData"
          }
        },
        "activityCount": {
          "type": "integer",
          "format": "int64"
        },
        "lastActivityAt": {
          "type": "string",
          "format": "date-time"
        },
        "mode": {
          "$ref": "#/definitions/configAccountMode",
          "description": "Andromeda account mode specified via the Andromeda account settings."
        },
        "folders": {
          "$ref": "#/definitions/graphFolderConnection"
        },
        "lastActivity": {
          "$ref": "#/definitions/graphActivity"
        }
      }
    },
    "graphServiceIdentityAccountDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphServiceIdentityAccountData"
        }
      }
    },
    "graphServiceIdentityAccountPolicyOpsInsightData": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/AccountPolicyServiceIdentitySignificanceTypeMessageAccountPolicyServiceIdentitySignificanceType",
          "title": "type of the signficance"
        },
        "category": {
          "$ref": "#/definitions/ServiceIdentitySignificanceCategoryMessageServiceIdentitySignificanceCategory",
          "title": "Category of the operations insight"
        }
      }
    },
    "graphServiceIdentityAccountsDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceIdentityAccountDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphServiceIdentityMetadata": {
      "type": "object",
      "properties": {
        "trustedService": {
          "$ref": "#/definitions/graphTrustedService"
        },
        "awsExternalServiceIdentity": {
          "$ref": "#/definitions/graphAwsExternalServiceIdentity"
        },
        "eksClusterDetails": {
          "$ref": "#/definitions/graphEksClusterDetails"
        },
        "azureServiceIdentity": {
          "$ref": "#/definitions/graphAzureServiceIdentity"
        },
        "gcpServiceIdentity": {
          "$ref": "#/definitions/graphGcpServiceIdentity"
        }
      }
    },
    "graphServiceIdentityOpsInsightData": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/ServiceIdentitySignificanceTypeMessageServiceIdentitySignificanceType",
          "title": "type of the signficance"
        },
        "category": {
          "$ref": "#/definitions/ServiceIdentitySignificanceCategoryMessageServiceIdentitySignificanceCategory",
          "title": "Category of the operations insight"
        }
      }
    },
    "graphServiceIdentityPoliciesDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceIdentityPolicyDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphServiceIdentityPolicyData": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        },
        "blastRisk": {
          "type": "integer",
          "format": "int64"
        },
        "blastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "isBlastRiskComputed": {
          "type": "boolean"
        },
        "hasAdminPermissions": {
          "type": "boolean",
          "title": "has admin permissions"
        },
        "policyType": {
          "$ref": "#/definitions/configPolicyTypeMessagePolicyType",
          "description": "policy type like whether it is permission set vs iam role."
        },
        "excessivePrivilegeScore": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskFrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskInfrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskUnusedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskFrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskInfrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskUnusedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "untrackedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "unusedPermissionsPercentage": {
          "type": "integer",
          "format": "int64"
        },
        "incomingTrusts": {
          "$ref": "#/definitions/graphIncomingTrustsConnection",
          "description": "Incoming Trust relations which this policy has trusted to allow role assumptions.\nEg. If admin wants to allow a user who has access to a role R1 to be able to assume role\nR2 then they need make R2 trust any user who has role R1 by adding R1 in the trust policy of R2.\nLogically, it means R1 -\u003e (assume Role) -\u003e R2.\nConfiguration wise it is R2 (Trusted) -\u003e R1 in the trust policy of R2.\nA Permission Set can only have direct binding or via a group as trust within the same account. However,\nIAM roles allow trusts to cross account identities (no groups) or roles."
        },
        "outgoingTrusts": {
          "$ref": "#/definitions/graphOutgoingTrustsConnection"
        },
        "accountId": {
          "type": "string"
        },
        "identityId": {
          "type": "string"
        },
        "accountProviderId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "policyDetails": {
          "$ref": "#/definitions/graphAccountPolicyDetailsConnection"
        },
        "permissionsData": {
          "$ref": "#/definitions/graphIdentityPermissionsDataConnection",
          "description": "List of permissions in this policy. For example an AWS PermissionSet can have multiple\nAWS Policies and each policy can have multiple permissions. This is the list of all the permissions\nacross all the AWS policies in this account."
        },
        "roleTrustDocument": {
          "type": "string",
          "title": "currently applies to aws only"
        },
        "scope": {
          "$ref": "#/definitions/nonpublicgraphScope",
          "title": "scope of the policy in which it is bound, e.g. Account, Resource Group"
        },
        "permissionsSummary": {
          "$ref": "#/definitions/nonpublicgraphPermissionsSummary"
        },
        "policyRecommendation": {
          "$ref": "#/definitions/graphUnifiedIdentityAccountPolicyRecommendation"
        },
        "opsInsights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceIdentityAccountPolicyOpsInsightData"
          }
        }
      }
    },
    "graphServiceIdentityPolicyDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphServiceIdentityPolicyData"
        }
      }
    },
    "graphServiceIdentityProviderAssignmentData": {
      "type": "object",
      "properties": {
        "assignmentType": {
          "$ref": "#/definitions/ProviderAssignmentTypeMessageProviderAssignmentType",
          "description": "What was the type of binding",
          "title": "This is the data that is specific to the provider and is used to"
        },
        "accessRequestId": {
          "type": "string",
          "title": "If the binding type is JIT then the id of the JIT request"
        },
        "isAndromedaManaged": {
          "type": "boolean",
          "title": "Whether Andromeda owns and manages this binding"
        },
        "status": {
          "$ref": "#/definitions/TrustStatusMessageTrustStatus",
          "description": "May be convert to significance."
        },
        "isDirectBinding": {
          "type": "boolean",
          "title": "Details of the binding whether it is direct or indirect"
        },
        "principal": {
          "$ref": "#/definitions/graphServiceIdentityProviderResolvedAssignmentPrincipalUnion",
          "title": "Scope where the binding was configured\n Scope binding_scope = 10;"
        }
      },
      "title": "TODO(P0) AS-3963"
    },
    "graphServiceIdentityProviderData": {
      "type": "object",
      "properties": {
        "providerId": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "blastRisk": {
          "type": "integer",
          "format": "int64"
        },
        "isBlastRiskComputed": {
          "type": "boolean"
        },
        "providerCategory": {
          "$ref": "#/definitions/utilsProviderCategoryType"
        },
        "providerTierId": {
          "type": "string",
          "title": "TODO AS-3963\nconvert to the actual provider tier object"
        },
        "providerTierName": {
          "type": "string"
        },
        "providerBindingType": {
          "$ref": "#/definitions/ProviderAssignmentTypeMessageProviderAssignmentType",
          "description": "TODO(P0): AS-3963\n- standing or JIT. How did this user get access to this provider."
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType",
          "title": "TODO AS-3963\nProvider Type as well. This will be useful for filtering.\nTODO(P0) AS-3963\nRole object the incoming trust -\u003e principal== group,"
        },
        "activities": {
          "$ref": "#/definitions/graphActivitiesConnection"
        },
        "accountsCount": {
          "type": "integer",
          "format": "int64"
        },
        "knownLocations": {
          "$ref": "#/definitions/graphKnownLocationsConnection"
        },
        "knownDevices": {
          "$ref": "#/definitions/graphKnownDevicesConnection"
        },
        "accountsData": {
          "$ref": "#/definitions/graphServiceIdentityAccountsDataConnection"
        },
        "identityId": {
          "type": "string"
        },
        "authType": {
          "$ref": "#/definitions/configProviderAuthType"
        },
        "policiesData": {
          "$ref": "#/definitions/graphUnifiedServiceIdentityPoliciesDataConnection",
          "title": "unified policy data for the provider"
        },
        "significanceData": {
          "$ref": "#/definitions/graphServiceIdentitySignificanceData"
        },
        "opsInsights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceIdentityOpsInsightData"
          }
        },
        "riskFactors": {
          "$ref": "#/definitions/graphServiceIdentityRiskFactors"
        },
        "riskFactorsData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceIdentityRiskFactorData"
          }
        },
        "activityCount": {
          "type": "integer",
          "format": "int64"
        },
        "lastActivityAt": {
          "type": "string",
          "format": "date-time"
        },
        "applicationResolvedAssignments": {
          "$ref": "#/definitions/graphServiceIdentityResolvedAssignmentsConnection"
        },
        "providerMembersMetadata": {
          "$ref": "#/definitions/graphIdentityProviderMembersMetadata"
        },
        "lastActivity": {
          "$ref": "#/definitions/graphActivity"
        },
        "userResolvedAssignments": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    },
    "graphServiceIdentityProviderDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphServiceIdentityProviderData"
        }
      }
    },
    "graphServiceIdentityProviderResolvedAssignmentPrincipalUnion": {
      "type": "object",
      "properties": {
        "serviceIdentity": {
          "$ref": "#/definitions/graphServiceIdentity"
        },
        "group": {
          "$ref": "#/definitions/nonpublicgraphGroup",
          "title": "when principal is a group"
        }
      }
    },
    "graphServiceIdentityProvidersDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceIdentityProviderDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphServiceIdentityResolvedAssignmentsConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceIdentityResolvedAssignmentsEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphServiceIdentityResolvedAssignmentsData": {
      "type": "object",
      "properties": {
        "providerId": {
          "type": "string",
          "description": "Ideally this could be part of the scope itself where scope would be\nprovider instead."
        },
        "role": {
          "$ref": "#/definitions/graphServiceIdentityPolicyData",
          "description": "Provider Level Policy Data. This is applicable onl for the SCIM Push Group Role\n for now.\n For now not getting the full policy data like in case of the cloud environments\n Policy policy_data = 22 [\n     (utils.graphql_field_options) = {\n       resolver: true,\n     }\n ];",
          "title": "Required when the provider is enabled with SCIM push groups\nstring policy_id = 20;\nstring policy_name = 21;"
        },
        "assignmentData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceIdentityProviderAssignmentData"
          },
          "description": "How the principal (identity or NHI) got access to the provider binding.\nIn case, there were access via multiple groups then two bindings will be created\none for each group."
        }
      },
      "description": "TODO(P0) AS-3963\nDon't implement at provider level right away. Focus on the identity and nhi level first.enum\nDecide on this after the okta IDP is designed.\n\nThis information is in context of an account so the related information about\n policy is captured here. It only carries the Policy level information\n and does not have any per-identity specific data\n incoming trusts here are for all the identities in the account for that policy."
    },
    "graphServiceIdentityResolvedAssignmentsEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphServiceIdentityResolvedAssignmentsData"
        }
      }
    },
    "graphServiceIdentityRiskFactorData": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/configRiskFactor"
        },
        "category": {
          "$ref": "#/definitions/configRiskCategory"
        }
      }
    },
    "graphServiceIdentityRiskFactors": {
      "type": "object",
      "properties": {
        "noHumanOwner": {
          "type": "boolean"
        },
        "consoleAccess": {
          "type": "boolean"
        },
        "sharedAcrossApps": {
          "type": "boolean"
        },
        "accessedFromOutside": {
          "type": "boolean"
        },
        "anamalousCloudActivities": {
          "type": "boolean"
        },
        "highBlastRisk": {
          "type": "boolean"
        },
        "passwordHygiene": {
          "type": "boolean",
          "title": "RISK_FACTOR_PASSWORD_HYGIENE = 14;"
        },
        "keyHygiene": {
          "type": "boolean",
          "title": "RISK_FACTOR_KEY_HYGIENE = 15;"
        },
        "staleOwner": {
          "type": "boolean",
          "title": "RISK_FACTOR_INVALID_OWNER = 16;"
        },
        "accessKeyRotationPastDueDate": {
          "type": "boolean"
        }
      }
    },
    "graphServiceIdentitySignificanceData": {
      "type": "object",
      "properties": {
        "isRiskAccepted": {
          "type": "boolean"
        },
        "hasAdminPrivileges": {
          "type": "boolean"
        },
        "hasCrossAccountWithCriticalityEscalation": {
          "type": "boolean"
        },
        "isInactive": {
          "type": "boolean"
        },
        "isEksClusterNotFound": {
          "type": "boolean",
          "title": "eks nhi bad configurations"
        },
        "isOidcProviderNotFound": {
          "type": "boolean"
        },
        "hasMultipleBindingsForEks": {
          "type": "boolean"
        },
        "isSamlProviderNotFound": {
          "type": "boolean"
        },
        "isEksServiceAccountWithoutConstraint": {
          "type": "boolean"
        },
        "isEksServiceAccountWithInvalidTrust": {
          "type": "boolean"
        },
        "multipleNhisShareSameAwsRole": {
          "type": "boolean"
        },
        "hasNoPolicyBindings": {
          "type": "boolean",
          "title": "identity without any policy bindings"
        },
        "hasOverPrivilegedRole": {
          "type": "boolean"
        },
        "hasUnusedRole": {
          "type": "boolean"
        }
      },
      "title": "TODO(AS-2436)\n RISK_ACCEPTED"
    },
    "graphServiceInstanceEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/nonpublicgraphServiceInstance"
        }
      }
    },
    "graphServiceInstancesConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphServiceInstanceEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphStandingPoliciesInfo": {
      "type": "object",
      "properties": {
        "totalStandingPolicies": {
          "type": "integer",
          "format": "int64"
        },
        "totalStandingPoliciesViaLateralMovement": {
          "type": "integer",
          "format": "int64"
        },
        "totalUnusedPolicies": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "graphTrustEdges": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/EdgeTypeMessageEdgeType",
          "description": "The principal who is trusted.",
          "title": "Direct/Indirect"
        },
        "trustedPrincipalData": {
          "$ref": "#/definitions/graphPrincipalData",
          "title": "We need to still populate the PrincipalData for the indirect trust.\nIn that scenario, the id and name correctly identity the local user.\nSo, alternative is to add a LOCAL_USER type in the principal. When that is set\nthe ID remains the ARN, name is the username, but the Principal Data still gets\npopulated for all direct and indirect trusts.\nTBD: Is there any complications due to the fact that local user\ndoes not have an Andromeda ID and instead using Provider ARN?"
        },
        "policyBindingType": {
          "$ref": "#/definitions/PolicyBindingTypeMessagePolicyBindingType"
        },
        "isAndromedaManaged": {
          "type": "boolean"
        },
        "status": {
          "$ref": "#/definitions/TrustStatusMessageTrustStatus",
          "description": "Status of this trust. If the principal is no longer enabled\nthen the trust status would be STALE and should be cleaned up."
        }
      }
    },
    "graphTrustedService": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "graphUnifiedIdentityAccountPolicyRecommendation": {
      "type": "object",
      "properties": {
        "jsonData": {
          "type": "string",
          "description": "Recommended policy based on the used permissions in the policy.\nJSON version of the recommended policy in the account.\nThis information can be used for creating a PermissionSet or IAM Role in AWS.\nFollow the structure and only filter out actions in the statements in each policy / structure inside.\ntake care of the empty actions scenarios."
        },
        "blastRisk": {
          "type": "integer",
          "format": "int64"
        },
        "blastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublicPermission"
          }
        },
        "permissionsData": {
          "$ref": "#/definitions/graphPermissionsDataConnection"
        },
        "recommendedPolicyName": {
          "type": "string"
        },
        "providerPolicyType": {
          "$ref": "#/definitions/ProviderPolicyTypeMessageProviderPolicyType"
        }
      }
    },
    "graphUnifiedIdentityPolicyData": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        },
        "policyType": {
          "$ref": "#/definitions/configPolicyTypeMessagePolicyType",
          "description": "policy type like whether it is permission set vs iam role."
        },
        "blastRisk": {
          "type": "integer",
          "format": "int64"
        },
        "blastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "isBlastRiskComputed": {
          "type": "boolean"
        },
        "hasAdminPermissions": {
          "type": "boolean",
          "title": "has admin permissions"
        },
        "excessivePrivilegeScore": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskFrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskInfrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskUnusedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskFrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskInfrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskUnusedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "unusedPermissionsPercentage": {
          "type": "integer",
          "format": "int64"
        },
        "untrackedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "riskAccessLevels": {
          "$ref": "#/definitions/graphRiskAccessLevels",
          "title": "To be deprecated, use field #52 permissions_access_level_summary"
        },
        "incomingTrusts": {
          "$ref": "#/definitions/graphIncomingTrustsConnection",
          "description": "Incoming Trust relations which this policy has trusted to allow role assumptions.\nEg. If admin wants to allow a user who has access to a role R1 to be able to assume role\nR2 then they need make R2 trust any user who has role R1 by adding R1 in the trust policy of R2.\nLogically, it means R1 -\u003e (assume Role) -\u003e R2.\nConfiguration wise it is R2 (Trusted) -\u003e R1 in the trust policy of R2.\nA Permission Set can only have direct binding or via a group as trust within the same account. However,\nIAM roles allow trusts to cross account identities (no groups) or roles."
        },
        "outgoingTrusts": {
          "$ref": "#/definitions/graphOutgoingTrustsConnection"
        },
        "accountId": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "accountMode": {
          "$ref": "#/definitions/configAccountMode"
        },
        "identityId": {
          "type": "string"
        },
        "policyJsonDocuments": {
          "$ref": "#/definitions/graphPoliciesJsonDocumentConnection",
          "title": "To be deprecated, use field #51 policy_details"
        },
        "accountProviderId": {
          "type": "string"
        },
        "accessRequestSummary": {
          "$ref": "#/definitions/graphIdentityAccessRequestSummaryData"
        },
        "policyDetails": {
          "$ref": "#/definitions/graphAccountPolicyDetailsConnection"
        },
        "permissionsData": {
          "$ref": "#/definitions/graphIdentityPermissionsDataConnection",
          "description": "List of permissions in this policy. For example an AWS PermissionSet can have multiple\nAWS Policies and each policy can have multiple permissions. This is the list of all the permissions\nacross all the AWS policies in this account."
        },
        "roleTrustDocument": {
          "type": "string"
        },
        "permissionsSummary": {
          "$ref": "#/definitions/nonpublicgraphPermissionsSummary"
        }
      }
    },
    "graphUnifiedIdentityPolicyDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphUnifiedIdentityPolicyDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphUnifiedIdentityPolicyDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphUnifiedIdentityPolicyData"
        }
      }
    },
    "graphUnifiedServiceIdentityPoliciesDataConnection": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphUnifiedServiceIdentityPolicyDataEdge"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "graphUnifiedServiceIdentityPolicyData": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        },
        "blastRisk": {
          "type": "integer",
          "format": "int64"
        },
        "blastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "isBlastRiskComputed": {
          "type": "boolean"
        },
        "hasAdminPermissions": {
          "type": "boolean",
          "title": "has admin permissions"
        },
        "policyType": {
          "$ref": "#/definitions/configPolicyTypeMessagePolicyType",
          "description": "policy type like whether it is permission set vs iam role."
        },
        "excessivePrivilegeScore": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskFrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskInfrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskUnusedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskFrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskInfrequentlyUsedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskUnusedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "untrackedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "unusedPermissionsPercentage": {
          "type": "integer",
          "format": "int64"
        },
        "incomingTrusts": {
          "$ref": "#/definitions/graphIncomingTrustsConnection",
          "description": "Incoming Trust relations which this policy has trusted to allow role assumptions.\nEg. If admin wants to allow a user who has access to a role R1 to be able to assume role\nR2 then they need make R2 trust any user who has role R1 by adding R1 in the trust policy of R2.\nLogically, it means R1 -\u003e (assume Role) -\u003e R2.\nConfiguration wise it is R2 (Trusted) -\u003e R1 in the trust policy of R2.\nA Permission Set can only have direct binding or via a group as trust within the same account. However,\nIAM roles allow trusts to cross account identities (no groups) or roles."
        },
        "outgoingTrusts": {
          "$ref": "#/definitions/graphOutgoingTrustsConnection"
        },
        "accountId": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "accountMode": {
          "$ref": "#/definitions/configAccountMode"
        },
        "identityId": {
          "type": "string"
        },
        "accountProviderId": {
          "type": "string"
        },
        "policyDetails": {
          "$ref": "#/definitions/graphAccountPolicyDetailsConnection"
        },
        "permissionsData": {
          "$ref": "#/definitions/graphIdentityPermissionsDataConnection",
          "description": "List of permissions in this policy. For example an AWS PermissionSet can have multiple\nAWS Policies and each policy can have multiple permissions. This is the list of all the permissions\nacross all the AWS policies in this account."
        },
        "roleTrustDocument": {
          "type": "string",
          "title": "currently applies to aws only"
        },
        "permissionsSummary": {
          "$ref": "#/definitions/nonpublicgraphPermissionsSummary"
        }
      }
    },
    "graphUnifiedServiceIdentityPolicyDataEdge": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/graphUnifiedServiceIdentityPolicyData"
        }
      }
    },
    "inventorymodelsPolicyType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CUSTOMER_MANAGED",
        "PROVIDER_MANAGED",
        "INLINE"
      ],
      "default": "UNKNOWN"
    },
    "logsBatchProcessingState": {
      "type": "string",
      "enum": [
        "BATCH_PROCESSING_STATE_UNSPECIFIED",
        "BATCH_PROCESSING_STATE_INIT",
        "BATCH_PROCESSING_STATE_PROCESSING",
        "BATCH_PROCESSING_STATE_COMPLETED",
        "BATCH_PROCESSING_STATE_FAILED"
      ],
      "default": "BATCH_PROCESSING_STATE_UNSPECIFIED"
    },
    "modelsconfigAccessReviewCampaignScope": {
      "type": "object",
      "properties": {
        "scopeFilters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelsconfigAccessReviewScopeFilter"
          }
        }
      },
      "title": "A campaign has following dimensions to the scope\n Based on the type of the campaign, the scope can be defined.\n All filters are Anded together.\n System Default will have filter with\n provider_category_match: [CLOUD, APPLICATION, IDP]"
    },
    "modelsconfigAccessReviewScopeFilter": {
      "type": "object",
      "properties": {
        "providerCategoryMatch": {
          "$ref": "#/definitions/configProviderCategoryMatch"
        },
        "providerMatch": {
          "$ref": "#/definitions/configProviderMatch"
        },
        "scopeMatch": {
          "$ref": "#/definitions/configScopeMatch"
        },
        "identityUsernameMatch": {
          "$ref": "#/definitions/configIdentityUsernameMatch",
          "title": "Deprecated not going to be implemented"
        },
        "rolesMatch": {
          "$ref": "#/definitions/configRolesMatch"
        },
        "identityMatch": {
          "$ref": "#/definitions/configIdentityMatch"
        },
        "providerAccountMatch": {
          "$ref": "#/definitions/configProviderAccountMatch"
        },
        "groupMatch": {
          "$ref": "#/definitions/configGroupMatch",
          "title": "Filter for the groups to be included in the access review.\nOnly allowed with the entitlement type of USER_GROUP_ASSIGNMENT"
        },
        "rolesTagMatch": {
          "$ref": "#/definitions/configKvTagMatch",
          "description": "Filter all the roles that match the tag criteria. This cannot be combined with the roles_match."
        },
        "groupsTagMatch": {
          "$ref": "#/definitions/configKvTagMatch",
          "description": "Filter all the groups that match the tag criteria. This cannot be combined with the groups_match."
        },
        "hrTypeMatch": {
          "$ref": "#/definitions/configHrTypeMatch",
          "title": "Filter all bindings that have principal with this hr type. This can be combined with other matches here"
        },
        "externalUserStatusMatch": {
          "$ref": "#/definitions/configExternalUserStatusMatch",
          "title": "Filter out all user with this state in the campaign"
        }
      }
    },
    "modelsconfigAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "mode": {
          "$ref": "#/definitions/configAccountMode",
          "description": "It is going to override the mode in the Provider.\nWhen not specified the backend will fill in with the Provider mode."
        },
        "lspDeactivated": {
          "type": "boolean",
          "title": "This a new option supported in Google's latest proto.\n[\n  (google.api.field_behavior) = NON_EMPTY_DEFAULT\n];"
        },
        "defaultAccessRequestProfileId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "It is a Andromeda Account resource that holds common attributes that are configurations and settings \nrelated to Andromeda features related to a provider account. All the learnt information about the \nprovider cloud would be in a referenced provider specific resource Eg. AWSAccount, GCPAccount etc.",
      "required": [
        "name",
        "tenantId"
      ]
    },
    "modelsconfigCampaignTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "readOnly": true
        },
        "entitlementType": {
          "$ref": "#/definitions/configEntitlementTypeMessageEntitlementType",
          "description": "This represents the type of access review entitlements being\nreviewed."
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "campaignOwnerTemplates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configCampaignOwnersTemplate"
          },
          "description": "CampaignOwnersTemplates are used to assign owners to the campaign instance.\nWe try finding every identity that matches the ORed aggregate of the\nCampaignOwnersTemplates and assign them the owner role.\nTherefore the reviewers can be a union of Identity1, Identity2, accountAdmin and providerOwner."
        },
        "reviewerAssignmentScheme": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configCampaignReviewerAssignmentScheme"
          }
        },
        "revocationPolicy": {
          "$ref": "#/definitions/configCampaignAccessRevocationPolicy"
        },
        "notificationsConfig": {
          "$ref": "#/definitions/configCampaignNotificationsConfig"
        },
        "campaignScope": {
          "$ref": "#/definitions/modelsconfigAccessReviewCampaignScope"
        },
        "accessAnalysisPolicy": {
          "$ref": "#/definitions/configAccessReviewAnalysisPolicy"
        },
        "fallbackReviewerId": {
          "type": "string",
          "title": "Use this reviewer if its set, and user under review is same as 1st level reviewer selected\nif nil, no self check, and fallback will be to campaign owner if no valid reviewer ids available"
        },
        "scheduleConfig": {
          "$ref": "#/definitions/configCampaignScheduleConfig",
          "description": "Campaign Schedule Config is used to schedule the campaign to run at a specific time with a specific frequency."
        },
        "ownerIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "list of owner ids that this template is associated with, this only work with an identity template\nfor other templates this needs to be changed"
        },
        "disableSelfReview": {
          "type": "boolean",
          "title": "if set, reviewer will be set to one of manager/fallbackreview/owner if user under review is same as reviewer"
        },
        "templateCreatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "name"
      ]
    },
    "modelsconfigIntegration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/configIntegrationsType"
        },
        "tenantId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "type",
        "tenantId"
      ]
    },
    "modelsconfigPolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "providerId": {
          "type": "string",
          "description": "ProviderId refers to the Provider that the Policy is scoped to."
        },
        "providerPolicyReference": {
          "type": "string",
          "description": "In case of AWS, provider_policy_reference is pset or policy arn."
        },
        "isLsp": {
          "type": "boolean",
          "title": "is_lsp = true for computed LSP as well as implemented LSP"
        },
        "isComputed": {
          "type": "boolean",
          "title": "is_computed = true for computed LSP"
        },
        "discoveredTags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/andromedautilsTag"
          },
          "description": "discovered_tags are the tags that are discovered for the policy."
        },
        "accountId": {
          "type": "string",
          "description": "AccountId is only set when the Policy is created at the Account level.\nIf the policy is fetched from a management account/identity center, the Policy\nis scoped at the Provider level only, and the AccountId remains empty.",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "description": "Policy in Andromeda represents a set of actions that can be performed on an Account resource.\nThe Policy can be bound to a User in an Account, which can give the User relevant permissions to\nperform the Actions on the Account resource.\nThese policies are fetched from the Provider, and are stored in Andromeda.\nThis is currently an immutable object."
    },
    "modelsconfigPolicyEligibilityMapping": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "readOnly": true
        },
        "providerId": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Name of the eligibility mapping. This is used for display purposes.\nIt will also be the name of the ResourceSet role Type\nThat is generated from the eligibility mapping."
        },
        "accountId": {
          "type": "string"
        },
        "policyId": {
          "type": "string",
          "description": "PolicyId is the id of the policy that is being mapped to the eligibility. It is blank\nfor provider assignments.\nIn case of application assignments with push groups, the policy id will be\nthe id of the shadow policy. Note that the Admins will see these shadow policies\nin assignablePolicies list while creating the eligibility."
        },
        "userId": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "eligibilityConstraint": {
          "$ref": "#/definitions/configEligibilityConstraint"
        },
        "provisioningConditions": {
          "$ref": "#/definitions/configPolicyProvisioningConditionsData"
        },
        "status": {
          "$ref": "#/definitions/configPolicyElgibilityMappingStatusStatus"
        },
        "eligibilityType": {
          "$ref": "#/definitions/EligibilityConfigurationTypeMessageEligibilityConfigurationType"
        },
        "resourceSetEligibilityData": {
          "$ref": "#/definitions/modelsconfigResourceSetEligibilityData",
          "title": "resource based eligibility data"
        }
      }
    },
    "modelsconfigProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "category": {
          "$ref": "#/definitions/utilsProviderCategoryType"
        },
        "applicationType": {
          "type": "string"
        },
        "defaultMode": {
          "$ref": "#/definitions/configAccountMode",
          "description": "Default Andromeda mode for all the accounts within a provider.\nDEPRECATED."
        },
        "defaultAccessRequestProfileId": {
          "type": "string",
          "description": "JitPolicyProfile binding with the provider."
        },
        "appSettings": {
          "$ref": "#/definitions/configApplicationSettings"
        },
        "acccountExclusionRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configAccountExclusionRule"
          },
          "description": "AccountExclusionRule defines the rule to exclude accounts from the provider.\nIf the account matches any of the rules, it will be excluded from the discovery."
        },
        "provisioningConfig": {
          "$ref": "#/definitions/configAccessRequestProvisioningConfig"
        },
        "idpProviderId": {
          "type": "string",
          "description": "This an Optional field indicating the IDP provider where this provider is setup as\nan Application. It will not be set for any IDP providers.\nEach provider then determines how to use this connection Eg.\nIn case of IAM SSO all users come from this IDP and it will be a mandatory\nconfiguration. In case of AWS with IDC it is a no-op\nIn case of Azure the users actually come from the Entra IDP.\nWhen this configuration is set, in the GQL IdpApplicationData will be set.\nThis field should be set once and immutable as it would create a lot of issues\nfor the idp applications."
        },
        "appTierId": {
          "type": "string"
        },
        "ownerIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "IdentityIds are the Andromeda UUIDs of the identity objects.\n@soorajtom - add refrential integrity constraint"
        },
        "mode": {
          "$ref": "#/definitions/AndromedaModeMessageAndromedaMode",
          "title": "Whether access request feature is enabled for this provider.\nIn case of cloud providers they can be moved to enforcement mode\nonly when the provider is enabled for access request.\nDefault: is OBSERVATION"
        },
        "applicationAuthType": {
          "$ref": "#/definitions/ApplicationAuthTypeMessageApplicationAuthType",
          "description": "Auth type for the provider."
        },
        "tenantId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "type",
        "appTierId",
        "tenantId"
      ]
    },
    "modelsconfigProviderTier": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int64",
          "description": "Priority of the provider tier. Lower value means higher priority.\n1 is the highest priority. 0 is undefined."
        },
        "tenantId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "title": "TODO(P1) AS-3963",
      "required": [
        "name",
        "priority",
        "tenantId"
      ]
    },
    "modelsconfigProviderType": {
      "type": "string",
      "enum": [
        "PROVIDER_TYPE_UNSPECIFIED",
        "PROVIDER_TYPE_AWS",
        "PROVIDER_TYPE_GCP",
        "PROVIDER_TYPE_AZURE",
        "PROVIDER_TYPE_WORKDAY",
        "PROVIDER_TYPE_OKTA",
        "PROVIDER_TYPE_IDP_APPLICATION",
        "PROVIDER_TYPE_ENTRA",
        "PROVIDER_TYPE_CUSTOM_APPLICATION",
        "PROVIDER_TYPE_GOOGLE_WORKSPACE",
        "PROVIDER_TYPE_ADP",
        "PROVIDER_TYPE_SALESFORCE",
        "PROVIDER_TYPE_HRIS",
        "PROVIDER_TYPE_ACTIVE_DIRECTORY",
        "PROVIDER_TYPE_PINGONE",
        "PROVIDER_TYPE_ATLAS"
      ],
      "default": "PROVIDER_TYPE_UNSPECIFIED",
      "title": "- PROVIDER_TYPE_IDP_APPLICATION: TODO(P0) AS-3963\nAll the providers created from the IDP like okta will have\ncategory as IDP_APPLICATION\n - PROVIDER_TYPE_HRIS: generic hris integration"
    },
    "modelsconfigResourceRoleEligibilityData": {
      "type": "object",
      "properties": {
        "serviceType": {
          "$ref": "#/definitions/ServiceTypeMessageServiceType"
        },
        "allResources": {
          "type": "boolean"
        },
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Andromeda UUIDs of the resources"
        },
        "externalRoleIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Andromeda UUIDs of the roles\nList of roles that are related to the service type allowed in the\naccess request. The payload accepts external role ids instead of role ids\nto support policies that are not inventoried as first class Andromeda Roles\nin the system and that do not have a Andromeda Policy/Role UUID."
        },
        "index": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "modelsconfigResourceSetEligibilityData": {
      "type": "object",
      "properties": {
        "eligibilityConstraint": {
          "$ref": "#/definitions/ResourceSetEligibilityConstraintMessageResourceSetEligibilityConstraint"
        },
        "resourceRoleEligibility": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modelsconfigResourceRoleEligibilityData"
          }
        }
      }
    },
    "modelsconfigTenant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Name is a human readable Tenant name. This might not be unique."
        },
        "domain": {
          "type": "string",
          "description": "Domain is used to identify the users of a Tenant based on their emails."
        },
        "description": {
          "type": "string",
          "title": "Description provides allows storing more details about the Tenant.\nThe description field is optional"
        },
        "isSuperTenant": {
          "type": "boolean"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "description": "Tenant in Andromeda is the primary customer account. A Tenant\nbrings with it various personas that are significant under the Tenant.\nThese personas are mostly identified by the identity provider, therefore\nthe Tenant construct is closely bound to the IdP.\nWe follow a one Tenant - one IdP binding.\nThe Tenant object can be considered the root object for all andromeda\nresources, and all resources for a user scoped under a Tenant view.",
      "required": [
        "id",
        "name",
        "domain"
      ]
    },
    "modelsconfigTenantFeatureData": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/FeatureTypeMessageFeatureType"
        },
        "status": {
          "$ref": "#/definitions/FeatureStatusMessageFeatureStatus"
        }
      },
      "required": [
        "type"
      ]
    },
    "modelsconfigTenantSettings": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "tenantId": {
          "type": "string",
          "readOnly": true
        },
        "idpConfiguration": {
          "$ref": "#/definitions/configIdpConfiguration",
          "description": "IdPConfiguration holds the settings that are required to configure SSO,\n(more) specifically in descope. The IdPConfiguration is unique to a Tenant,\nand allows a Tenant's IdP users to access Andromeda resources.\nThis also holds information that is returned/provided by descope, which needs\nto be presented to our Tenant for configuring the SAML application in their\nIdP like Okta/PingIdentity etc."
        },
        "defaultAccessRequestProfileId": {
          "type": "string"
        },
        "appSettings": {
          "$ref": "#/definitions/configApplicationSettings"
        },
        "identityMappingPolicy": {
          "$ref": "#/definitions/configIdentityMappingPolicy",
          "description": "IdentityMappingPolicy holds the settings that are required to merge users\nbased on the patterns provided. This is used to merge users from different\nproviders into a single Identity in Andromeda."
        },
        "notificationSettings": {
          "$ref": "#/definitions/configNotificationSettings"
        },
        "defaultProviderTierId": {
          "type": "string"
        },
        "primaryIdentityProviderIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "itsmSettings": {
          "$ref": "#/definitions/configItsmSettings",
          "description": "The default ITSM settings for the tenant."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "description": "TenantSettings holds the configurations for a particular Tenant."
    },
    "modelsconfigUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "tenantId": {
          "type": "string",
          "description": "This is populated when a User creates a Tenant."
        },
        "emailVerified": {
          "type": "boolean",
          "description": "EmailVerified is marked true when the User signs up to Andromeda\nsuccessfully, by validating their Email ID with the OTP sent.",
          "readOnly": true
        },
        "userVerified": {
          "type": "boolean",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      },
      "description": "User is an entity that utilizes services and resources provided\nby the Providers. This User is also a known identity that has its\npresence in the Tenants IdP and HR databases and Providers' Identity centers.\nThe User is persisted in Andromeda to gain ownership of Andromeda\nresources like the Account, JitPolicyProfile, JitPolicyRequest creator/approver etc.",
      "required": [
        "name",
        "email",
        "tenantId"
      ]
    },
    "nonpublicAccountRiskResponse": {
      "type": "object",
      "properties": {
        "accountRisk": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "nonpublicCreateJobStatusResponse": {
      "type": "object",
      "properties": {
        "jobStatus": {
          "$ref": "#/definitions/nonpublicJobStatus"
        }
      }
    },
    "nonpublicDeltaComputeEvent": {
      "type": "object",
      "properties": {
        "tenantId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "resource": {
          "$ref": "#/definitions/protobufAny"
        },
        "operationType": {
          "$ref": "#/definitions/DeltaComputeOperationTypeEnumDeltaComputeOperationType"
        }
      }
    },
    "nonpublicGetJobStatusByIdResponse": {
      "type": "object",
      "properties": {
        "jobStatus": {
          "$ref": "#/definitions/nonpublicJobStatus"
        }
      }
    },
    "nonpublicGetLatestJobStatusResponse": {
      "type": "object",
      "properties": {
        "jobStatus": {
          "$ref": "#/definitions/nonpublicJobStatus"
        }
      }
    },
    "nonpublicGetTenantStatusResponse": {
      "type": "object",
      "properties": {
        "tenantId": {
          "type": "string"
        },
        "tenantStatus": {
          "$ref": "#/definitions/nonpublicTenantStatusEnumTenantStatus"
        },
        "jobStatuses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublicJobStatus"
          }
        }
      }
    },
    "nonpublicGraphDatagram": {
      "type": "object",
      "properties": {
        "requestType": {
          "$ref": "#/definitions/nonpublicGraphDatagramRequestType",
          "title": "Request type: {UPSERT, DELETE}"
        },
        "request": {
          "$ref": "#/definitions/protobufAny",
          "title": "request is a message with graph annotation"
        },
        "fieldMask": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "field_mask is used to set only certain fields of the request.\nIf it is to empty, all fields are set.\nThis is useful since there is no way to know if a value is set in proto3 or is it set to default.\nFixed fields (id and tenant_id) are automatically added."
        },
        "updatedAtCheck": {
          "type": "string",
          "format": "date-time",
          "description": "if the updated_at of the request protobuf matches this value for the primary entity.\nIf CONDITIONAL_CREATE strategy is used when this is a part of the array,\nno CREATE calls will be generated for the primary entity.\nIf any egress field changes for the primary entity, the secondary entities may still be created."
        },
        "useTestRegistry": {
          "type": "boolean",
          "description": "Use the test registry. This is only used for unit testing protographs."
        },
        "updateWithoutVersionCheck": {
          "type": "boolean",
          "description": "If update_without_version_check is set to true, then the request is an update request.\nIf CONDITIONAL_CREATE strategy is used when this is a part of the array,\nno CREATE calls will be generated for the primary entity.\nIf any egress field changes for the primary entity, the secondary entities may still be created."
        },
        "skipSetUpdatedAt": {
          "type": "boolean",
          "title": "Skip set_updated_at will not set the updatedAt to the time when the instruction was generated\nOnly implemented for newer strategies: CONDITIONAL_MERGE and CONDITIONAL_CREATE"
        }
      },
      "description": "GraphDatagram encapsulates a request that has been made over a model-agnostic Graph protobuf."
    },
    "nonpublicGraphDatagramArrayUpsertStrategy": {
      "type": "string",
      "enum": [
        "BLIND_MERGE",
        "CONDITIONAL_MERGE",
        "CONDITIONAL_CREATE"
      ],
      "default": "BLIND_MERGE",
      "description": "- BLIND_MERGE: This creates MERGE…SET for each object in the array\nThis is the default (also, v1) strategy\n - CONDITIONAL_MERGE: Conditional MERGE does a MATCH for the object and properties\nif no match is found, it does a MERGE…SET\n - CONDITIONAL_CREATE: Conditional CREATE does a match for the object and properties\nif object exists but with different property set, it does a MATCH…SET\nif object doesn’t exist, it does a CREATE…SET",
      "title": "GraphDatagramArrayUpsertStrategy is the strategy to generate UPSERT instructions"
    },
    "nonpublicGraphDatagramRequestType": {
      "type": "string",
      "enum": [
        "GRAPH_DATAGRAM_REQUEST_TYPE_UNSPECIFIED",
        "GRAPH_DATAGRAM_REQUEST_TYPE_UPSERT",
        "GRAPH_DATAGRAM_REQUEST_TYPE_DELETE"
      ],
      "default": "GRAPH_DATAGRAM_REQUEST_TYPE_UNSPECIFIED",
      "description": "GraphDatagram `request_type` can be an `UPSERT` instruction or a `DELETE` instruction."
    },
    "nonpublicHandleEventResponse": {
      "type": "object",
      "properties": {
        "statusCode": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "nonpublicIdentityAccountEprResponse": {
      "type": "object",
      "properties": {
        "identityEpr": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "nonpublicIdentityPolicyAccountEprResponse": {
      "type": "object",
      "properties": {
        "identityEpr": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "nonpublicIdentityRiskResponse": {
      "type": "object",
      "properties": {
        "identityRisk": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "nonpublicJobStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/JobTypeEnumJobType"
        },
        "scope": {
          "$ref": "#/definitions/JobStatusScopeEnumJobStatusScope"
        },
        "tenantId": {
          "type": "string"
        },
        "providerId": {
          "type": "string",
          "title": "provider_id/provider_id\nTODO(PI): internal"
        },
        "providerType": {
          "$ref": "#/definitions/nonpublicinventoryProviderType"
        },
        "providerAccountId": {
          "type": "string",
          "description": "if account_id is null, we will assume the data point is at connector level."
        },
        "state": {
          "$ref": "#/definitions/JobStateEnumJobState"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "metadata": {
          "type": "object"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "nonpublicJobStatusFilter": {
      "type": "object",
      "properties": {
        "providerId": {
          "type": "string"
        },
        "providerAccountId": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/JobTypeEnumJobType"
        },
        "startedAfter": {
          "type": "string",
          "format": "date-time"
        },
        "state": {
          "$ref": "#/definitions/JobStateEnumJobState"
        },
        "scope": {
          "$ref": "#/definitions/JobStatusScopeEnumJobStatusScope"
        },
        "name": {
          "type": "string"
        },
        "metadata": {
          "type": "object"
        },
        "providerType": {
          "$ref": "#/definitions/nonpublicinventoryProviderType"
        }
      }
    },
    "nonpublicListJobsResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublicJobStatus"
          }
        }
      }
    },
    "nonpublicOpResponse": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string"
        }
      },
      "title": "OpResponse is the response to a GraphDatagram operation\ncurrently it only contains the transaction_id"
    },
    "nonpublicPermission": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "accessLevel": {
          "$ref": "#/definitions/ActionAccessLevelEnumActionAccessLevel"
        },
        "sensitiveInformationExposure": {
          "type": "boolean"
        },
        "resourceExposure": {
          "type": "boolean"
        },
        "privilegeEscalationExposure": {
          "type": "boolean"
        },
        "score": {
          "type": "number",
          "format": "float"
        },
        "service": {
          "type": "string"
        },
        "serviceCriticality": {
          "$ref": "#/definitions/ServiceCriticalityLevelEnumServiceCriticalityLevel"
        },
        "riskLevel": {
          "$ref": "#/definitions/ActionRiskLevelEnumActionRiskLevel"
        },
        "usageLevel": {
          "$ref": "#/definitions/ActionUsageLevelEnumActionUsageLevel"
        }
      }
    },
    "nonpublicProviderRiskResponse": {
      "type": "object",
      "properties": {
        "providerRisk": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "nonpublicTenantRiskResponse": {
      "type": "object",
      "properties": {
        "tenantRisk": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "nonpublicTenantStatusEnumTenantStatus": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "FAILURE",
        "READY"
      ],
      "default": "UNDEFINED"
    },
    "nonpublicUpdateJobStatusResponse": {
      "type": "object",
      "properties": {
        "jobStatus": {
          "$ref": "#/definitions/nonpublicJobStatus"
        }
      }
    },
    "nonpublicValidateITSMTicketDetailsResponse": {
      "type": "object",
      "properties": {
        "isValid": {
          "type": "boolean"
        }
      }
    },
    "nonpublicValidateProvisioningGroupExistenceResponse": {
      "type": "object",
      "properties": {
        "exists": {
          "type": "boolean"
        },
        "nonExistentProvisioningGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "nonpublicbehaviorModel": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/BehaviorModelMessageBehaviorModel"
        },
        "recompute": {
          "type": "boolean"
        },
        "tenants": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "nonpublicgraphFilter": {
      "type": "object",
      "properties": {
        "operation": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includeNull": {
          "type": "boolean"
        }
      }
    },
    "nonpublicgraphFolder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        }
      }
    },
    "nonpublicgraphGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Andromeda UUID"
        },
        "name": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/GroupTypeMessageGroupType"
        },
        "isReference": {
          "type": "boolean",
          "description": "is_reference = true means the group is only present as a reference and not actually defined in the system. For e.g. in case of SCIM groups, the IDP group will have is_reference = true, but the IDP(okta) group will have is_reference = false."
        },
        "originGroup": {
          "$ref": "#/definitions/nonpublicgraphGroup",
          "description": "in case of is_reference = true, this will be the original source group."
        },
        "members": {
          "$ref": "#/definitions/graphGroupMembers",
          "title": "members of this group"
        },
        "provider": {
          "$ref": "#/definitions/protobufAny",
          "title": "Provider that this group belongs to"
        },
        "account": {
          "$ref": "#/definitions/protobufAny",
          "title": "Account that this group belongs to"
        },
        "ownerId": {
          "type": "string",
          "description": "This is the owner of the group in the provider system.\nIn case of the owner is no longer present in the system, this will be a shell node with Identity\nState == Deactivated."
        },
        "owners": {
          "$ref": "#/definitions/graphIdentitiesConnection"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/andromedautilsTag"
          }
        },
        "groupProviders": {
          "$ref": "#/definitions/graphGroupProvidersConnection",
          "title": "List of the providers to which this group has access"
        }
      }
    },
    "nonpublicgraphIdentity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "username": {
          "type": "string",
          "description": "The username is the co-relation of an identity in various provider/accounts."
        },
        "email": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/configIdentityStatus"
        },
        "type": {
          "$ref": "#/definitions/configIdentityType"
        },
        "orgInfo": {
          "$ref": "#/definitions/graphHrIdentityInfo"
        },
        "identityOrgInfo": {
          "$ref": "#/definitions/graphIdentityOrgInfo",
          "description": "New standardized identity org info."
        },
        "activities": {
          "$ref": "#/definitions/graphActivitiesConnection"
        },
        "knownLocations": {
          "$ref": "#/definitions/graphKnownLocationsConnection"
        },
        "knownDevices": {
          "$ref": "#/definitions/graphKnownDevicesConnection"
        },
        "blastRisk": {
          "type": "integer",
          "format": "int64",
          "description": "blastRisk is the privilege component of the risk."
        },
        "blastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "isBlastRiskComputed": {
          "type": "boolean"
        },
        "risk": {
          "type": "integer",
          "format": "int64",
          "title": "risk is an aggregate of static, behaviour and privilege risks.\nCurrently risk = blastRisk"
        },
        "riskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "riskFactors": {
          "$ref": "#/definitions/graphRiskFactors"
        },
        "isSuperAdmin": {
          "type": "boolean"
        },
        "providersSummary": {
          "$ref": "#/definitions/graphIdentityProvidersSummary"
        },
        "accountsSummary": {
          "$ref": "#/definitions/graphIdentityAccountSummary"
        },
        "providersData": {
          "$ref": "#/definitions/graphIdentityProvidersDataConnection"
        },
        "insight": {
          "$ref": "#/definitions/graphIdentityInsight",
          "description": "Insight about the identity from various data sources."
        },
        "origins": {
          "$ref": "#/definitions/graphIdentityOriginDataConnection",
          "description": "List of sources where identity information is consolidated by Andromeda system."
        },
        "significanceData": {
          "$ref": "#/definitions/graphIdentitySignificanceData",
          "description": "Information about different significance attributes of the identity at the global level."
        },
        "countIncarnationsWithAccessKey": {
          "type": "integer",
          "format": "int64"
        },
        "accessKeysSummary": {
          "$ref": "#/definitions/graphAccessKeysSummary"
        },
        "opsInsights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphIdentityOpsInsightData"
          }
        },
        "riskFactorsData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphRiskFactorData"
          }
        },
        "activityCount": {
          "type": "integer",
          "format": "int64",
          "description": "To avoid the N+1 GQL problem, putting the number of activities on the identity node\ntop level itself."
        },
        "lastActivityAt": {
          "type": "string",
          "format": "date-time"
        },
        "accessData": {
          "$ref": "#/definitions/graphAccessData"
        },
        "eligibilityDetails": {
          "$ref": "#/definitions/graphIdentityProviderEligibilityDataConnection",
          "description": "TODO(P1) AS-3963\nList of eligible providers for the identity.\nTo get the list of application simply filter on the type of the provider."
        },
        "reviewRequestData": {
          "$ref": "#/definitions/graphIdentityReviewRequestDataConnection",
          "title": "List of active reviews assigned to this identity.\nThis node will be replacing review_request_data present inside\nIdentityProvidersDataConnection"
        },
        "requests": {
          "$ref": "#/definitions/graphIdentityAccessRequestDataConnection"
        },
        "eligibleProviders": {
          "$ref": "#/definitions/graphIdentityEligibleProvidersConnection"
        },
        "lastActivity": {
          "$ref": "#/definitions/graphActivity"
        },
        "accessReviewsData": {
          "$ref": "#/definitions/graphAccessReviewerData"
        },
        "campaignOwnersData": {
          "$ref": "#/definitions/graphCampaignOwnersData",
          "description": "Need to have list of campaign related summary for the reviewer",
          "title": "TODO: AS-9302"
        },
        "groupOwnershipList": {
          "$ref": "#/definitions/graphGroupsConnection",
          "title": "Identity is owner of the group. It is not required that that\nthe identity is also member of this group"
        }
      }
    },
    "nonpublicgraphIdpApplication": {
      "type": "object",
      "properties": {
        "applicationOriginId": {
          "type": "string"
        },
        "applicationName": {
          "type": "string"
        }
      }
    },
    "nonpublicgraphPermissionsSummary": {
      "type": "object",
      "properties": {
        "totalPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "usedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "unusedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "unusedPermissionsPercentage": {
          "type": "number",
          "format": "float"
        },
        "permissionsAccessLevelSummary": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphPermissionsAccessLevelSummary"
          }
        },
        "untrackedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "nonpublicgraphScope": {
      "type": "object",
      "properties": {
        "folder": {
          "$ref": "#/definitions/graphFolderScopeData"
        },
        "account": {
          "$ref": "#/definitions/graphAccountScopeData"
        },
        "resourceGroup": {
          "$ref": "#/definitions/graphResourceGroupScopeData"
        },
        "group": {
          "$ref": "#/definitions/graphGroupScopeData"
        },
        "resource": {
          "$ref": "#/definitions/graphResourceScopeData"
        }
      }
    },
    "nonpublicgraphServiceInstance": {
      "type": "object",
      "properties": {
        "serviceType": {
          "type": "string"
        },
        "serviceInstanceName": {
          "type": "string"
        }
      }
    },
    "nonpublicinventoryProviderType": {
      "type": "string",
      "enum": [
        "PROVIDER_TYPE_UNSPECIFIED",
        "PROVIDER_AWS",
        "PROVIDER_GCP",
        "PROVIDER_AZURE",
        "PROVIDER_OKTA",
        "PROVIDER_WORKDAY",
        "PROVIDER_ENTRA",
        "PROVIDER_APPLICATION",
        "PROVIDER_CUSTOM_APPLICATION",
        "PROVIDER_GOOGLE_WORKSPACE",
        "PROVIDER_ADP",
        "PROVIDER_SALESFORCE",
        "PROVIDER_HRIS",
        "PROVIDER_ACTIVE_DIRECTORY",
        "PROVIDER_PINGONE",
        "PROVIDER_ATLAS"
      ],
      "default": "PROVIDER_TYPE_UNSPECIFIED",
      "title": "- PROVIDER_AWS: Providers 1 - 199\nTODO: Cleanup this ProviderType enum and use the config ProviderType enum"
    },
    "nonpublicpolicyEffectivePermissionsResponse": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dataActions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "nonpublicpolicyIdentityHasRiskInScope": {
      "type": "object",
      "properties": {
        "tenantId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "scopeId": {
          "type": "string"
        },
        "identityId": {
          "type": "string"
        },
        "blastRisk": {
          "type": "integer",
          "format": "int32"
        },
        "blastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "computedBlastRisk": {
          "type": "integer",
          "format": "int32"
        },
        "computedBlastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "isRiskAccepted": {
          "type": "boolean"
        },
        "totalPermissions": {
          "type": "integer",
          "format": "int64"
        },
        "sensitiveInformationExposure": {
          "type": "boolean"
        }
      }
    },
    "nonpublicpolicyPermissionsSummary": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "totalPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "usedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "unusedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "untrackedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "accessLevelSummaries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/policyAccessLevelSummary"
          }
        }
      }
    },
    "nonpublicpolicyPolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "serviceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "policyType": {
          "$ref": "#/definitions/configPolicyTypeMessagePolicyType"
        },
        "hasAdministratorPrivileges": {
          "type": "boolean"
        },
        "providerPolicies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/policyProviderPolicy"
          }
        }
      },
      "title": "========================== Policy =========================="
    },
    "nonpublicpolicyResourceData": {
      "type": "object",
      "properties": {
        "serviceType": {
          "type": "string",
          "title": "Type of cloud service (e.g. \"s3\", \"ec2\", \"rds\")"
        },
        "allResources": {
          "type": "boolean",
          "title": "When true, all resources of this service type are affected\nWhen false, only specific resources are affected"
        },
        "discoveredFrom": {
          "$ref": "#/definitions/DiscoveredFromMessageDiscoveredFrom"
        },
        "resourceInstances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublicpolicyResourceInstance"
          }
        }
      },
      "title": "ResourceData contains affected resources for a specific cloud service"
    },
    "nonpublicpolicyResourceInstance": {
      "type": "object",
      "properties": {
        "externalId": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "resourceFound": {
          "type": "boolean"
        }
      }
    },
    "nonpublicpolicyResourceRoleAssignment": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/nonpublicpolicyPolicy"
        },
        "assignmentType": {
          "$ref": "#/definitions/ProviderAssignmentTypeMessageProviderAssignmentType"
        },
        "roleAssignmentType": {
          "$ref": "#/definitions/PolicyAssignmentTypeMessagePolicyAssignmentType"
        },
        "matchTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchTypeMessageMatchType"
          }
        }
      }
    },
    "nonpublicpolicyUserHasRiskInScope": {
      "type": "object",
      "properties": {
        "tenantId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "scopeId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "blastRisk": {
          "type": "integer",
          "format": "int32"
        },
        "blastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "computedBlastRisk": {
          "type": "integer",
          "format": "int32"
        },
        "computedBlastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        },
        "isRiskAccepted": {
          "type": "boolean"
        },
        "totalPermissions": {
          "type": "integer",
          "format": "int64"
        },
        "sensitiveInformationExposure": {
          "type": "boolean"
        }
      }
    },
    "nonpublicstaticEffectivePermissionsResponse": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "nonpublicstaticGeolocation": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "type": "number",
          "format": "double"
        },
        "accuracyRadius": {
          "type": "integer",
          "format": "int64"
        },
        "cityGeoNameId": {
          "type": "integer",
          "format": "int64"
        },
        "countryGeoNameId": {
          "type": "integer",
          "format": "int64"
        },
        "cityName": {
          "type": "string"
        },
        "countryName": {
          "type": "string"
        }
      }
    },
    "nonpublictimeseriesActivitiesGroupedByIdentity": {
      "type": "object",
      "properties": {
        "identityId": {
          "type": "string"
        },
        "identityName": {
          "type": "string"
        },
        "identityType": {
          "$ref": "#/definitions/configIdentityType"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "activities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/timeseriesIdentityActivityPayload"
          }
        }
      }
    },
    "nonpublictimeseriesActivitiesGroupedByPolicy": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "activities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/timeseriesIdentityActivityPayload"
          }
        }
      }
    },
    "nonpublictimeseriesActivityFilters": {
      "type": "object",
      "properties": {
        "ProviderId": {
          "type": "string"
        },
        "IntegrationId": {
          "type": "string",
          "title": "TODO: integration is outdated. TSDB migration"
        },
        "AccountId": {
          "type": "string"
        },
        "StartTime": {
          "type": "string",
          "format": "date-time"
        },
        "EndTime": {
          "type": "string",
          "format": "date-time"
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "ActiveProviderIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ActiveIntegrationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "TODO: integration is outdated. TSDB migration"
        },
        "policyId": {
          "type": "string"
        },
        "excludeWellFormedPolicies": {
          "type": "boolean",
          "description": "If true, filter activities without well-formed policy IDs.\nSometimes, policy IDs can be missing or \"N/A\"."
        },
        "identityId": {
          "type": "string"
        },
        "identityType": {
          "$ref": "#/definitions/configIdentityType"
        },
        "accessKeyId": {
          "type": "string"
        },
        "accessType": {
          "$ref": "#/definitions/AccessTypeMessageAccessType"
        }
      }
    },
    "nonpublictimeseriesFilter": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ProviderId": {
          "type": "string"
        },
        "IntegrationId": {
          "type": "string",
          "title": "TODO: integration is outdated"
        },
        "AccountId": {
          "type": "string"
        },
        "ActiveProviderIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ActiveIntegrationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "TODO: integration is outdated"
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "policyId": {
          "type": "string"
        },
        "ApplicationId": {
          "type": "string"
        },
        "ActiveApplicationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "actionTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "policyAccessLevelSummary": {
      "type": "object",
      "properties": {
        "accessLevel": {
          "$ref": "#/definitions/ActionAccessLevelEnumActionAccessLevel"
        },
        "totalPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "usedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "unusedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "highRiskPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "lowRiskPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "untrackedPermissionsCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "policyBlastRiskSummary": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "totalPermissionsCount": {
          "type": "integer",
          "format": "int64"
        },
        "blastRiskScore": {
          "type": "number",
          "format": "float"
        },
        "sensitiveInformationExposure": {
          "type": "boolean"
        },
        "accessLevelSummaries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/policyAccessLevelSummary"
          }
        }
      }
    },
    "policyBlastRiskSummaryResponse": {
      "type": "object",
      "properties": {
        "scopeId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "identityId": {
          "type": "string"
        },
        "blastRiskSummaries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/policyBlastRiskSummary"
          }
        }
      }
    },
    "policyIdentityRiskInScopeResponse": {
      "type": "object",
      "properties": {
        "identityRiskInScope": {
          "$ref": "#/definitions/nonpublicpolicyIdentityHasRiskInScope"
        }
      }
    },
    "policyPermissionsResponse": {
      "type": "object",
      "properties": {
        "scopeId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "identityId": {
          "type": "string"
        },
        "policiesPermissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/policyPolicyPermissions"
          }
        }
      }
    },
    "policyPermissionsSummaryResponse": {
      "type": "object",
      "properties": {
        "scopeId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "identityId": {
          "type": "string"
        },
        "permissionsSummaries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublicpolicyPermissionsSummary"
          }
        }
      },
      "title": "========================== GetPermissionsSummary =========================="
    },
    "policyPoliciesSummaryResponse": {
      "type": "object",
      "properties": {
        "tenantId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "scopeId": {
          "type": "string"
        },
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublicpolicyPolicy"
          }
        }
      }
    },
    "policyPolicyDetailsResponse": {
      "type": "object",
      "properties": {
        "scopeId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublicpolicyPolicy"
          }
        }
      }
    },
    "policyPolicyPermissions": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublicPermission"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "policyPolicyResourcesData": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string",
          "title": "ID of the policy, empty if policies were processed as a group"
        },
        "resourcesData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublicpolicyResourceData"
          },
          "title": "Resource data grouped by service type (e.g. S3, EC2)"
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      },
      "title": "PolicyResourcesData contains resource data for a single policy or policy group"
    },
    "policyProviderPolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "policyDocument": {
          "type": "string"
        },
        "serviceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "policyType": {
          "$ref": "#/definitions/inventorymodelsPolicyType"
        },
        "providerPolicyType": {
          "$ref": "#/definitions/ProviderPolicyTypeMessageProviderPolicyType"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublicPermission"
          }
        }
      }
    },
    "policyRecommendedPolicyResponse": {
      "type": "object",
      "properties": {
        "scopeId": {
          "type": "string"
        },
        "scopeExternalId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "tenantId": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        },
        "identityId": {
          "type": "string"
        },
        "recommendedPolicyName": {
          "type": "string"
        },
        "recommendedProviderPolicyType": {
          "$ref": "#/definitions/ProviderPolicyTypeMessageProviderPolicyType"
        },
        "recommendedPolicyDocument": {
          "type": "string"
        },
        "recommendedPermissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublicPermission"
          }
        },
        "recommendedBlastRiskScore": {
          "type": "integer",
          "format": "int64"
        },
        "recommendedBlastRiskLevel": {
          "$ref": "#/definitions/RiskLevelMessageRiskLevel"
        }
      }
    },
    "policyResourceDetailsResponse": {
      "type": "object",
      "properties": {
        "roleAssignments": {
          "$ref": "#/definitions/policyResourceRoleAssignmentsResponse"
        }
      }
    },
    "policyResourceRoleAssignmentsRequest": {
      "type": "object",
      "properties": {
        "pageArgs": {
          "$ref": "#/definitions/utilsPageArgs"
        },
        "filterExpression": {
          "$ref": "#/definitions/graphFilterExpression"
        }
      }
    },
    "policyResourceRoleAssignmentsResponse": {
      "type": "object",
      "properties": {
        "roleAssignments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublicpolicyResourceRoleAssignment"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "policyResourcesDataResponse": {
      "type": "object",
      "properties": {
        "policiesResourcesData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/policyPolicyResourcesData"
          },
          "title": "Resource data for each policy/policy group that was analyzed"
        }
      },
      "title": "ResourcesDataResponse contains resource data for each policy or policy group"
    },
    "policyUserRiskInScopeResponse": {
      "type": "object",
      "properties": {
        "userRiskInScope": {
          "$ref": "#/definitions/nonpublicpolicyUserHasRiskInScope"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "relayGroupMembershipResponse": {
      "type": "object",
      "properties": {
        "requestMetadata": {
          "$ref": "#/definitions/relayRelayRequestMetadata"
        },
        "userId": {
          "type": "string"
        },
        "nestedGroupId": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/OperationStatusMessageOperationStatus"
        },
        "errorMessage": {
          "type": "string"
        }
      },
      "title": "Sync service responses"
    },
    "relayGroupMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "relayLejitRequestMetadata": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string"
        }
      }
    },
    "relayRelayRequestMetadata": {
      "type": "object",
      "properties": {
        "lejitRequestMetadata": {
          "$ref": "#/definitions/relayLejitRequestMetadata"
        },
        "secuarRequestMetadata": {
          "$ref": "#/definitions/relaySecuarRequestMetadata"
        }
      }
    },
    "relayRevokeAppAssignmentRequest": {
      "type": "object",
      "properties": {
        "idpProviderId": {
          "type": "string",
          "description": "Idp Provider Id of the idp connected with the access request/review binding Provider."
        },
        "userId": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        }
      }
    },
    "relayRevokeGroupMembershipRequest": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        }
      }
    },
    "relayRevokeProviderDirectAssignmentRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        }
      }
    },
    "relayRevokeResourceSetAssignmentRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "scopeId": {
          "type": "string"
        },
        "resourceSetConfiguration": {
          "$ref": "#/definitions/configAccessRequestResourceSetData"
        }
      }
    },
    "relayRevokeRoleAssignmentRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "scopeId": {
          "type": "string"
        }
      }
    },
    "relayRoleAssignmentResponse": {
      "type": "object",
      "properties": {
        "requestMetadata": {
          "$ref": "#/definitions/relayRelayRequestMetadata"
        },
        "userId": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/OperationStatusMessageOperationStatus"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "relayRoleMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "relaySecuarRequestMetadata": {
      "type": "object",
      "properties": {
        "campaignId": {
          "type": "string"
        },
        "accessReviewSnapshotId": {
          "type": "string"
        }
      }
    },
    "secuarTriggerRevocationResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "Response indicating success or failure of the revocation operation"
    },
    "summarizationSessionSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "andromedaIdentityId": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        },
        "andromedaAccountId": {
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/summarizationSessionSummaryStatus"
        },
        "summary": {
          "$ref": "#/definitions/summarizationSummarizationActivityResponse"
        },
        "tenantId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "providerId": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "andromedaScopeId": {
          "type": "string"
        }
      },
      "description": "SessionSummary is the status of each session summary triggered\nby the ada session summarization service.",
      "required": [
        "tenantId"
      ]
    },
    "summarizationSessionSummaryStatus": {
      "type": "string",
      "enum": [
        "SESSION_SUMMARY_STATUS_TRIGGERED",
        "SESSION_SUMMARY_STATUS_IN_PROGRESS",
        "SESSION_SUMMARY_STATUS_COMPLETED",
        "SESSION_SUMMARY_STATUS_PRELIMINARY_COMPLETED"
      ],
      "default": "SESSION_SUMMARY_STATUS_TRIGGERED"
    },
    "summarizationSummarizationActivityResponse": {
      "type": "object",
      "properties": {
        "summary": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "errorcode": {
          "$ref": "#/definitions/summarizationSummarizationErrorCode"
        }
      },
      "title": "This is the response sent from the python worker to the orchestrator"
    },
    "summarizationSummarizationErrorCode": {
      "type": "string",
      "enum": [
        "STATUS_OK",
        "STATUS_ERROR",
        "STATUS_LIMIT_EXCEEDED"
      ],
      "default": "STATUS_OK"
    },
    "summarizationSummarizationResponse": {
      "type": "object",
      "properties": {
        "sessionSummary": {
          "$ref": "#/definitions/summarizationSessionSummary"
        }
      }
    },
    "timeseriesActivityPayload": {
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/utilsGeoLocation"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "timeseriesIdentityActivityDevice": {
      "type": "object",
      "properties": {
        "deviceInfo": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "engine": {
          "type": "string"
        },
        "architecture": {
          "type": "string"
        }
      }
    },
    "timeseriesIdentityActivityPayload": {
      "type": "object",
      "properties": {
        "providerId": {
          "type": "string"
        },
        "providerType": {
          "$ref": "#/definitions/modelsconfigProviderType"
        },
        "providerLogoUrl": {
          "type": "string"
        },
        "providerCategory": {
          "$ref": "#/definitions/utilsProviderCategoryType"
        },
        "accountName": {
          "type": "string"
        },
        "scopeId": {
          "type": "string"
        },
        "scopeType": {
          "$ref": "#/definitions/ScopeTypeEnumScopeType"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "activity": {
          "type": "string",
          "description": "Activity is the stringified JSON of the activity. This could be eiher the IdP activity,\nor an action within the Provider or Account."
        },
        "location": {
          "$ref": "#/definitions/andromedautilsLocation",
          "description": "Location is the geo location figured out from the Action. This typically comes as part\nof the log itself, either in the form of source IPAddress, or the location details (for\ninstance in case of Okta logs).\nIn case the Provider/Integration logs do not provide this data, we query maxmind and store\nthe location internally while ingesting."
        },
        "device": {
          "$ref": "#/definitions/timeseriesIdentityActivityDevice",
          "description": "Device carries the device information that was used to carry out the Activity."
        },
        "policyId": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "accessData": {
          "type": "string"
        },
        "accessType": {
          "$ref": "#/definitions/AccessTypeMessageAccessType"
        }
      }
    },
    "timeseriesListActivitiesGroupedByIdentityResponse": {
      "type": "object",
      "properties": {
        "activitiesGroupedByIdentity": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublictimeseriesActivitiesGroupedByIdentity"
          }
        }
      }
    },
    "timeseriesListActivitiesGroupedByPolicyResponse": {
      "type": "object",
      "properties": {
        "activitiesGroupedByPolicy": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nonpublictimeseriesActivitiesGroupedByPolicy"
          }
        }
      }
    },
    "timeseriesListActivitiesResponse": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/timeseriesActivityPayload"
          }
        }
      }
    },
    "timeseriesListIdentityActivitiesResponse": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/timeseriesIdentityActivityPayload"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "timeseriesListIdentityKnownDevicesResponse": {
      "type": "object",
      "properties": {
        "device": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphKnownDevice"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "timeseriesListIdentityKnownLocationsResponse": {
      "type": "object",
      "properties": {
        "location": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/graphKnownLocation"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/utilsPageInfo"
        }
      }
    },
    "utilsGeoLocation": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "country": {
          "type": "string"
        }
      }
    },
    "utilsPageArgs": {
      "type": "object",
      "properties": {
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "cursor": {
          "type": "string",
          "title": "Not supported in M2"
        },
        "skip": {
          "type": "integer",
          "format": "int64"
        },
        "sort": {
          "type": "string"
        }
      }
    },
    "utilsPageInfo": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "endCursor": {
          "type": "string",
          "title": "Not supported in M2"
        },
        "hasNextPage": {
          "type": "boolean",
          "title": "Not supported in M2"
        }
      }
    },
    "utilsProviderCategoryType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "CLOUD",
        "IDP",
        "APPLICATION"
      ],
      "default": "UNSPECIFIED",
      "description": "- IDP: Okta\n - APPLICATION: Figma from Okta",
      "title": "TODO AS-3963\nconvert this to a encapsulated message and enum type"
    }
  }
}
